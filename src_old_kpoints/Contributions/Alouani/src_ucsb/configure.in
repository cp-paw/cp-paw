dnl Process this file with autoconf to produce a configure script.
#
#
# This line checks if the source-directory is in the actual path
# This prevents users to call the configure script from somewhere else
## MIND !!! adapt next line if changing the name of the source directory
#
AC_INIT(src)
#
#######################################################################
#######################################################################
##                                                                   ##
## begin of user adaptable variables                                 ##
##                                                                   ##
#######################################################################
#######################################################################
#
# the default path for the binaries is
# $PAWDIR/$BINARIES/$*ARCH
# PAWDIR will be set automatically after this block!
#
#_________________directory for the binaries
#
BINARIES=bin
#
# ________________names for the binaries
NONEBIN="paw.x"
FASTBIN="paw_fast.x"    
DEBUGBIN="paw_dbg.x"  
PARALLELBIN="ppaw_fast.x"
#
# ________________directories for the architecture dependent binaries
f90ARCH="intel_amd"   
fortARCH="alpha"   
xlf90ARCH="ibm"  
#
# Specification of the Fortran Compilers
# Fortran77 is needed for the internal numerical
# libraries
# ________________Fortran77/90 compilers 
AbsoftF90="f90"
AbsoftF77="f90"
CompaqF90="fort"
CompaqF77="fort"
IBMF90="xlf90"
IBMF77="xlf"
# ________________compiler flags for unoptimized compilation (Absoft,Compaq,IBM)
f90FLAGS="-c -YEXT_NAMES=LCS -YEXT_SFX=_"
f77FLAGS="$f90FLAGS"
fortFLAGS="-c"
fort77FLAGS="$fortFLAGS"
xlf90FLAGS="-qlanglvl=90STD -c -qhalt=e -qextchk"
xlfFLAGS="-qlanglvl=77STD -c -qhalt=e -qextchk"
#
# ________________compiler flags for optimized compilation (Absoft,Compaq,IBM)
f90OPTIMIZE="-B100 -O"
fortOPTIMIZE="-O3"
xlf90OPTIMIZE="-O3 -Q+clebsch -qfloat=rsqrt:hssngl:rsqrt -qmaxmem=-1 -qarch=auto"
#
# ________________compiler flags for debug compilation (Absoft,Compaq,IBM)
f90DEBUG="-g -Rs"   
fortDEBUG="-g3 -ladebug -C -assume gfullpath -check overflow -check underflow"
xlf90DEBUG="-g -C -qfullpath -qflttrap=zerodivide:invalid:enable -qsigtrap -qinitauto=FF"
#
# ________________compiler flags for linking the object files
f90LFLAGS=""
fortLFLAGS=""
xlf90LFLAGS="-bmaxdata:0x70000000 -bloadmap:loadmap -qextchk"
#
# ________________source file extensions
f90FEXT="f90"
fortFEXT="f90"
xlf90FEXT="f"
#
# ________________remove preprocessed sources after compilation?
#                 set to "rm" if yes and to "file" if no
NONEOPTRM="rm"
FASTOPTRM="rm"
PARALLELOPTRM="rm"
DEBUGOPTRM="file"
#
# the object files can be found in
# $PAWDIR/$BINARIES/$ARCH/$OBJECTS/$*DIR
# ________________directories for the objects
OBJECTS="Objects"
NONEDIR="none"  
FASTDIR="fast"
DEBUGDIR="debug"       
PARALLELDIR="$FASTDIR" 
#
# the sources are found in $PAWDIR/$SOURCES
# ________________directory for the sources
SOURCES="src"           
#
# the sources for the tools can be found in 
# $PAWDIR/$SOURCES/$TOOLS
#
#_________________directory for the sources of the tools
TOOLS=Tools
#_________________way to compile the PAW-tools
TOOLCOMP="fast"         
#
# the default path for the external libraries is
# $PAWDIR/$LIBRARIES/*ROOT
#
#________________ default directory for the libraries      
LIBRARIES="lib"  
#
#________________ default directory for FFTW-distribution
FFTWROOT="fftw-2.1.3"   
#
#________________ directory of MPICH-distribution
MPICHROOT="mpich-1.2.1"  
#
#________________ directory of ATLAS-distribution
ATLASROOT="ATLAS"  
#
#######################################################################
#######################################################################
##                                                                   ##
## end of user adaptable variables                                   ##
##                                                                   ##
#######################################################################
#######################################################################
#
# subdirectory tree of PAW distribution
#
# the PAWDIR is determined automatically, the rest follows from
# the variables set in the section above
#
PAWDIR=`pwd`
SRCDIR="$PAWDIR/$SOURCES" 
OBJDIR="$PAWDIR/$BINARIES"      # to be specified later (compiler-dependent)
BINDIR="$PAWDIR/$BINARIES"      # to be specified later (compiler-dependent) 
TOOLDIR="$SRCDIR/$TOOLS"   
#
# process command line arguments
#
# syntax: AC_ARG_WITH(package,help string,action if given, action if not given)
# can be invoked by calling ./configure --with-package= or
# ./configure --without-package
#
AC_ARG_WITH(libs,--without-libs\
            do NOT use external numerical libraries,
            USELIBS=$withval,USELIBS=yes)
AC_ARG_WITH(fftwdir,--with-fftwdir=DIR\
        root directory of FFTW distribution,
            FFTWDIR=$withval,FFTWDIR=notset)
AC_ARG_WITH(mpichdir,--with-mpidir=DIR\
         root directory of MPICH distribution,
            MPICHDIR=$withval,MPICHDIR=notset)
AC_ARG_WITH(atlasdir,--with-atlasdir=DIR\
       root directory of ATLAS distribution,
            ATLASDIR=$withval,ATLASDIR=notset)
AC_ARG_WITH(atlasarch,--with-atlasarch=ARCH\
     architecture for wich ATLAS blas was compiled (e.g. Linux_ATHLON),
            ATLASARCH=$withval,ATLASARCH=notset)
AC_ARG_WITH(make,--with-make=LOCATION\
      the location of the GNU make utility (if not in path),
            MAKEPATH=$withval,MAKEPATH=notset)
AC_ARG_WITH(cpp,--with-cpp=LOCATION\
       the location of the GNU C Preprocessor (if not in path),
            CPPPATH=$withval,CPPPATH=notset)
AC_ARG_WITH(cflags,--with-cflags=FLAGS\
       specify additional compiler flags,
            USERFLAGS=$withval)
AC_ARG_WITH(lflags,--with-lflags=LFLAGS\
      specify additional compiler flags for linking,
            USERLFLAGS=$withval)
AC_ARG_WITH(llibs,--with-llibs=LLIBS\
        specify additional libraries to be linked,
            USERLIBS=$withval)

echo "USERFLAGS $USERFLAGS"
#
# Check for Fortran90 Compiler
#
AC_CHECK_PROGS(COMPILER, $AbsoftF90 $CompaqF90 $IBMF90,no)
if test "$COMPILER" = "no"; then 
   AC_MSG_ERROR(no valid compiler (f90,fort,xlf90) found)
fi	
#
# define COMPILE and LINK VARIABLES
#
# Absoft f90
if test "$COMPILER" = "$AbsoftF90"; then
   LINK="$COMPILER $f90LFLAGS $USERLFLAGS"
   LLIBS="-lU77 -lm $USERLIBS"
   COMPILE="$COMPILER $f90FLAGS $USERFLAGS"
   COMPILE77="$AbsoftF77 $f77FLAGS"
   CPPVAR="$CPPVAR -DCPPVAR_U77"
   ARCH=$f90ARCH
   FEXT=$f90FEXT
   OPTIMIZE="$f90OPTIMIZE" 
   DEBUG="$f90DEBUG"      
fi
# Compaq fort
if test "$COMPILER" = "$CompaqF90"; then
   LINK="$COMPILER $fortLFLAGS $USERLFLAGS"
   COMPILE="$COMPILER $fortFLAGS $USERFLAGS"
   LLIBS="$USERLIBS"
   COMPILE77="$CompaqF77 $fort77FLAGS"
   CPPVAR="$CPPVAR"
   ARCH=$fortARCH
   FEXT=$fortFEXT
   OPTIMIZE="$fortOPTIMIZE"
   DEBUG="$fortDEBUG"
fi
# IBM xlf90
if test "$COMPILER" = "$IBMF90"; then
   LINK="$COMPILER $xlf90LFLAGS $USERLFLAGS"
   COMPILE="$COMPILER $xlf90FLAGS $USERFLAGS"
   COMPILE77="$IBMF77 $xlfFLAGS $USERFLAGS" 
   LLIBS="$USERLIBS"
   CPPVAR="$CPPVAR -DCPPVAR_SUPPORT_XLF -DCPPVAR_USAGE_EXIST \
-DCPPVAR_LANGEXT_XLF"
   ARCH=$xlf90ARCH
   FEXT=$xlf90FEXT
   OPTIMIZE="$xlf90OPTIMIZE"
   DEBUG="$xlf90DEBUG"
fi
OBJDIR="$OBJDIR/$ARCH/$OBJECTS"
PAWX="$BINDIR/$ARCH"
#
# Check for GNU make utility
#
# set by command line argument?
if test "$MAKEPATH" = "notset"; then
  # syntax: AC_CHECK_PROGS(variable, programs, value if found, value if not found)
  AC_CHECK_PROGS(MAKE, gmake make,notset)
                            else
  AC_MSG_RESULT(----------------------------------------------)
  AC_MSG_RESULT(Maketool set by command line agrument to)
  AC_MSG_RESULT($MAKEPATH)
  AC_MSG_RESULT(----------------------------------------------)
  AC_CHECK_FILE($MAKEPATH,MAKE="$MAKEPATH",MAKE="notset")
fi
if test "$MAKE" = "notset"; then
   AC_MSG_ERROR(GNU make utility was not found)
fi
#
# Check for the GNU C-Compatible Compiler Preprocessor
#
# set by command line argument?
if test "$CPPPATH" = "notset"; then
  AC_CHECK_PROG(CPP,cpp,cpp,notset)
                           else
  AC_MSG_RESULT(----------------------------------------------)
  AC_MSG_RESULT(C-Preprocessor set by command line argument to)
  AC_MSG_RESULT($CPPPATH)
  AC_MSG_RESULT(----------------------------------------------)
  AC_CHECK_FILE($CPPPATH,CPP="$CPPPATH",CPP="notset")
fi
if test "$CPP" = "notset"; then
   AC_MSG_ERROR(GNU C-Compatible Compiler Preprocessor is not found)
fi
#
# use external libraries?
#
if test "$USELIBS" = "no"; then
  #
  # no external libraries according to command line argument
  #
  LLINK="$LLINK -L$OBJDIR"
  LLIBS="$LLIBS -lblas -llapack"
  CPPVAR="$CPPVAR -DCPPVAR_FFT_PACK"
  AC_MSG_RESULT(----------------------------------)
  AC_MSG_RESULT(according to command line argument)
  AC_MSG_RESULT(no external libraries are used    )
  AC_MSG_RESULT(----------------------------------)
  
                           else
  #
  # Determine external libraries for Absoft f90
  #
  if test "$COMPILER" = "$AbsoftF90"; then
    #
    # The FFTW-routines
    #
    # check for command line argument
    if test "$FFTWDIR" = "notset"; then
      # if FFTWDIR not set by command line argument
      # --> search default path (set with the variables)
      AC_MSG_RESULT(---------------------------------)
      AC_MSG_RESULT(take default path for FFTW as no )
      AC_MSG_RESULT(command line argument is given)
      AC_MSG_RESULT(---------------------------------)
      AC_CHECK_FILES($PAWDIR/$LIBRARIES/$FFTWROOT \
                     $PAWDIR/$LIBRARIES/$FFTWROOT/fftw/.libs/libfftw.a, 
                     FFTWDIR="$PAWDIR/$LIBRARIES/$FFTWROOT", 
                     FFTWDIR=notset)
  		                    else
      # if FFTWDIR set by command line argument				   
      AC_CHECK_FILES($FFTWDIR/ \
                     $FFTWDIR/fftw/.libs/libfftw.a,
                     FFTWDIR="$FFTWDIR", 
       	             FFTWDIR=notset)
    fi			
    # if no FFTW-routines found - switch back to FFTPack
    # otherwise set variables
    if test "$FFTWDIR" = "notset"; then
      AC_MSG_WARN(-----------------------)
      AC_MSG_WARN(FFTW-library not found!)
      AC_MSG_WARN(using FFTPack instead  )
      AC_MSG_WARN(-----------------------)
      CPPVAR="$CPPVAR -DCPPVAR_FFT_PACK"
                                   else
      LLINK="$LLINK -L$FFTWDIR/fftw/.libs/"				     
      LLIBS="$LLIBS -lfftw"
      FFTW="yes"
      CPPVAR="$CPPVAR -DCPPVAR_FFT_FFTW"
    fi  
    #
    # The ATLAS BLAS routines
    #
    if test "$ATLASDIR" = "notset"; then
      # if ATLASDIR not set by command line argument
      if test "$ATLASARCH" = "notset"; then
        # if ATLASARCH not set by command line argument
	# the first in possible choice is taken 
        ATLASARCH=`ls $PAWDIR/$LIBRARIES/$ATLASROOT/lib/ \
                   | cut -d' ' -f1 | head -1`
	AC_MSG_RESULT(-------------------------------------------------)	   
	AC_MSG_RESULT(as no command line argument is given)
	AC_MSG_RESULT({$ATLASARCH} was chosen as architecture for ATLAS)	   
	AC_MSG_RESULT(if this is not the right choice - rerun )	   
	AC_MSG_RESULT(configure and use --with-atlasarch=... argument)	   
	AC_MSG_RESULT(-------------------------------------------------)	   
      fi
      AC_MSG_RESULT(---------------------------------)
      AC_MSG_RESULT(take default path for ATLAS as no)
      AC_MSG_RESULT(command line argument is given)
      AC_MSG_RESULT(---------------------------------)
      AC_CHECK_FILES($PAWDIR/$LIBRARIES/$ATLASROOT \
                     $PAWDIR/$LIBRARIES/$ATLASROOT/lib/$ATLASARCH/libf77blas.a\
                     $PAWDIR/$LIBRARIES/$ATLASROOT/lib/$ATLASARCH/libatlas.a, 
                     ATLASDIR="$PAWDIR/$LIBRARIES/$ATLASROOT", 
                     ATLASDIR=notset)
               	                    else
     # if ATLASDIR set by command line argument				   
     if test "$ATLASARCH" = "notset"; then
       # if ATLASARCH not set by command line argument
       # the first in 
       ATLASARCH=`ls $PAWDIR/$LIBRARIES/$ATLASROOT/lib/ \
                  | cut -d' ' -f1 | head -1`
       AC_MSG_RESULT(-------------------------------------------------)	   
       AC_MSG_RESULT(as no command line argument is given)
       AC_MSG_RESULT({$ATLASARCH} was chosen as architecture for ATLAS)	   
       AC_MSG_RESULT(if this is not the right choice, rerun )	   
       AC_MSG_RESULT(reconfigure and use --with-atlasarch=... argument)	   
       AC_MSG_RESULT(-------------------------------------------------)	   
     fi
     AC_CHECK_FILES($ATLASDIR/ \
                    $ATLASDIR/lib/$ATLASARCH/libf77blas.a\
                    $ATLASDIR/lib/$ATLASARCH/libatlas.a,
                    ATLASDIR="$ATLASDIR", 
        	    ATLASDIR=notset)
    fi			
    # if no ATLAS-library found - switch back to internal blas
    # otherwise set variables
    if test "$ATLASDIR" = "notset"; then
      AC_MSG_WARN(---------------------------)
      AC_MSG_WARN(ATLAS-library not found!)
      AC_MSG_WARN(using internal blas instead)
      AC_MSG_WARN(---------------------------)
      LLIBS="$LLIBS -llapack -lblas"
                                   else
      LLINK="$LLINK -L$ATLASDIR/lib/$ATLASARCH"				     
      LLIBS="$LLIBS -llapack -lf77blas -latlas"
    fi  
  fi  
  # 
  # Determine external libraries for IBM xlf90
  #
  if test  "$COMPILER" = "$IBMF90"; then
    # THE ESSL 
    AC_HAVE_LIBRARY(essl,ESSL=found,ESSL=no)
    if test "$ESSL" = "no"; then
      AC_MSG_WARN(---------------------------)
      AC_MSG_WARN(ESSL library not found)
      AC_MSG_WARN(using internal blas instead)
      AC_MSG_WARN(---------------------------)
      LLIBS="$LLIBS -lblas -llapack"
      CPPVAR="$CPPVAR -DCPPVAR_FFT_PACK"
      
                            else
      LLIBS="$LLIBS -lessl"			    
      CPPVAR="$CPPVAR -DCPPVAR_BLAS_ESSL -DCPPVAR_FFT_ESSL"
    fi   
  fi

  # 
  # Determine external library for Compaq fort
  #
  if test  "$COMPILER" = "$CompaqF90"; then
    # THE CXML
    AC_HAVE_LIBRARY(cxml,CXML=found,CXML=no)
    if test "$CXML" = "no"; then
      AC_MSG_WARN(---------------------------)
      AC_MSG_WARN(CXML library not found)
      AC_MSG_WARN(using internal blas instead)
      AC_MSG_WARN(---------------------------)
      LLIBS="$LLIBS -lblas -llapack"
      CPPVAR="$CPPVAR -DCPPVAR_FFT_PACK"
                            else
      LLIBS="$LLIBS -lcxml"	 		    
      CPPVAR="$CPPVAR -DCPPVAR_FFT_PACK"
    fi   
  fi
fi

#
# Check for MPICH
#
# only if non-IBM!!!
#
if test "$ARCH" = "$xlf90ARCH"; then
  # Search for libmpi.a on IBMs
  AC_HAVE_LIBRARY(mpi,LLIBSPARALLEL=-lmpi)
                                else
  if test "$MPICHDIR" = "notset"; then
    # if MPICHDIR not set by command line argument
    AC_MSG_RESULT(---------------------------------)
    AC_MSG_RESULT(take default path for MPICH as no)
    AC_MSG_RESULT(command line argument is given)
    AC_MSG_RESULT(---------------------------------)
    AC_CHECK_FILES($PAWDIR/$LIBRARIES/$MPICHROOT \
                   $PAWDIR/$LIBRARIES/$MPICHROOT/lib/libmpich.a\
                   $PAWDIR/$LIBRARIES/$MPICHROOT/lib/libfmpich.a,
                   MPICHDIR="$PAWDIR/$LIBRARIES/$MPICHROOT", 
                   MPICHDIR=notset)
                    	        else
    # if MPICHDIR set by command line argument				   
    AC_CHECK_FILES($MPICHDIR/ \
                   $MPICHDIR/lib/libmpich.a\
                   $MPICHDIR/lib/libfmpich.a,
                   MPICHDIR="$MPICHDIR", 
                   MPICHDIR=notset)
  fi			
  # if no MPICH-library found -> no parallel compilation possible
  # otherwise set variables
  if test "$MPICHDIR" = "notset"; then
    AC_MSG_WARN(--------------------------------)
    AC_MSG_WARN(MPICH-library not found!)
    AC_MSG_WARN(no parallel compilation possible)
    AC_MSG_WARN(--------------------------------)
                                  else
    LLINKPARALLEL="-L$MPICHDIR/lib"				     
    LLIBSPARALLEL="-lmpich -lfmpich"
  fi  
fi
#
# introduction of PARALLELNAME to avoid problems
# with Makefile.* generation when PARALLELDIR=fast
# --> see below 
if test "$PARALLELDIR" = "$FASTDIR"; then
  PARALLELNAME="parallel"
                                     else
  PARALLELNAME="$PARALLELDIR"
fi
#
# Definition of variables to be substituted in the *.in files
# There the synax is @VARIABLE@
#
AC_SUBST(PAWDIR)
AC_SUBST(COMPILE)
AC_SUBST(COMPILE77)
AC_SUBST(LINK)
AC_SUBST(LLINK)
AC_SUBST(LLINKPARALLEL)
AC_SUBST(LLIBSPARALLEL)
AC_SUBST(LLIBS)
AC_SUBST(OBJDIR)
AC_SUBST(SRCDIR)
AC_SUBST(BINDIR)
AC_SUBST(FFTW)
AC_SUBST(FFTWDIR)
AC_SUBST(MPICHDIR)
AC_SUBST(TOOLDIR)
AC_SUBST(NONEDIR)
AC_SUBST(FASTDIR)
AC_SUBST(PARALLELDIR)
AC_SUBST(PARALLELNAME)
AC_SUBST(DEBUGDIR)
AC_SUBST(TOOLCOMP)
AC_SUBST(PAWX)
AC_SUBST(CPPVAR)
AC_SUBST(FEXT)
AC_SUBST(ARCH)
AC_SUBST(CPP)
AC_SUBST(MAKE)
AC_SUBST(f90ARCH)
AC_SUBST(fortARCH)
AC_SUBST(xlf90ARCH)
#
# create Makefile from Makefile.in and f90pp from f90pp.in
#
AC_OUTPUT(Makefile:Makefile.in $BINDIR/f90pp:$SOURCES/F90PP/f90pp.in)
#
# make f90pp executeable
chmod +x $BINDIR/f90pp
#
# substiuting to get Makefile.none
#
AC_MSG_RESULT(creating Makefile.none)
sed -e "s%\(OBJDIR.*=.*\)%\1/$NONEDIR%" \
    -e "s%\(PAWX.*=.*\)%\1/$NONEBIN%"\
    -e "s%varOPTRM%$NONEOPTRM%"\
    -e 's%varPARALLEL%F%'\
    Makefile > Makefile.${NONEDIR}
#
# subsituting to get Makefile.fast
#
AC_MSG_RESULT(creating Makefile.fast)
sed -e "s%\(COMPILE.*=.*\)%\1 $OPTIMIZE %"\
    -e "s%\(OBJDIR.*=.*\)%\1/$FASTDIR%"\
    -e "s%\(PAWX.*=.*\)%\1/$FASTBIN%"\
    -e "s%varOPTRM%$FASTOPTRM%"\
    -e 's%varPARALLEL%F%'\
    Makefile > Makefile.${FASTDIR}
#
# subsituting to get Makefile.parallel
#
  AC_MSG_RESULT(creating Makefile.parallel)
  sed -e "s%\(COMPILE.*=.*\)%\1 $OPTIMIZE %"\
      -e "s%\(OBJDIR.*=.*\)%\1/$PARALLELDIR%"\
      -e "s%\(PAWX.*=.*\)%\1/$PARALLELBIN%"\
      -e "s%varOPTRM%$PARALLELOPTRM%"\
      -e 's%varPARALLEL%T%'\
      Makefile > Makefile.${PARALLELNAME}
#
# subsituting to get Makefile.debug
#
AC_MSG_RESULT(creating Makefile.debug)
sed -e "s%\(COMPILE.*=.*\)%\1 $DEBUG %"\
    -e "s%\(OBJDIR.*=.*\)%\1/$DEBUGDIR%"\
    -e "s%\(PAWX.*=.*\)%\1/$DEBUGBIN%"\
    -e "s%varOPTRM%$DEBUGOPTRM%"\
    -e 's%varPARALLEL%F%'\
    Makefile > Makefile.${DEBUGDIR}
#
# creating subdirectories
#
AC_MSG_RESULT(creating subdirectories)
mkdir -p  ${BINDIR} ${BINDIR}/${ARCH} 
list="$NONEDIR $FASTDIR $DEBUGDIR $PARALLELDIR"
for i in $list; do
  mkdir -p ${OBJDIR}/${i}
done
#
# removal of config.cache 
rm -f config.cache
AC_MSG_RESULT(configuration completed successfully!)

