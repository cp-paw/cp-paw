\documentclass[a4paper,10pt]{article}

\usepackage{parskip}
\usepackage[bf,small]{caption2}
\usepackage{tocloft}

\setlength{\textwidth}{145mm}
\setlength{\oddsidemargin}{10mm}
\setlength{\evensidemargin}{5mm}
\setlength{\topmargin}{0mm}
\setlength{\textheight}{220mm}

\newcommand{\PAW}{\textsc{PAW}}


\title{\hrulefill \\ {\Large \bf Installation guide for the \\} 
                  {\Huge \bf PAW-Code} \\ \vspace*{-0.3cm} \hrulefill}
\author{\small  Clemens F\"orst \\ 
        \small Clausthal University of Technology \\ 
        \small \underline{\texttt{clemens.foerst@tuwien.ac.at}}}
\date{}



\begin{document}
\maketitle
\tableofcontents

\section{Initial Remarks}

The \textsc{PAW}-Code has been ported to the following architectures (besides IBM):
\begin{itemize}
\item Intel/AMD based hardware using the Absoft \texttt{f90}
  compiler~\cite{f90} (there is also a running Version compiled with the
\texttt{pgf90}, but this still has to be tested).  
\item Alpha workstations using Compaq's \texttt{fort},
  which can be downloaded for free under the \textit{Enthusiast and Education}
  license~\cite{fort}.
\end{itemize}
This development made the introduction of a series of new variables necessary,
which have to be set before starting the compilation.  As the old installation
script \texttt{paw\_compile} did not prove to be efficient any more, a new
scheme was introduced for the release of the new version of the code.

It is based on Makefiles and a \texttt{/bin/sh}-script generated by the GNU
\texttt{autoconf} tool for the creation of automatic configuration
scripts~\cite{autoconf,autoconf2}.  This open source software is included in
Linux distributions, on other architectures you might have to download and
compile the sources.  The scripts generated are independent of
\texttt{autoconf} when they are run. Users do not need to have
\texttt{autoconf} installed!


\section{mini-HOWTO}

\begin{itemize}
\item Get the source code (see page~\pageref{sub:pre})
\item Unpack the distribution: \texttt{tar -xvzf PAW\_YYYYMMDD.tar.gz} (see
page~\pageref{sub:unpack})
\item Provide external libraries -- if desired (see pages~\pageref{sub:libs}
and~\pageref{sec:libs})
\item Configure your system. This can be done automatically on Linux and AIX
architectures (invoke \texttt{./configure}; see page~\pageref{sub:auto}) or
alternatively by the use of parameter files (use \texttt{./configure
--with-parmfile=...}; see page~\pageref{sub:parms})
\item Build the binaries by invoking \texttt{make all\_new}
\item Have fun!
\end{itemize}


\section{Going into detail}

\subsubsection*{Prerequisites}
\label{sub:pre}

Before starting to compile the \PAW\ code you must ensure, that one of the
supported compilers (Absoft \texttt{f90}, Compaq \texttt{fort} (\texttt{f90} on
TruUNIX) or IBM \texttt{xlf90}), the GNU C Preprocessor \texttt{cpp} and the
GNU \texttt{make} (\texttt{gmake} on IBM! The ``normal''  make will crash when
interpreting the Makefiles) tool~\cite{make} are installed on your system.

The \PAW\ source code is distributed as a gnu-zipped tarball
(\texttt{PAW\_YYYYMMDD.tar.gz} or \texttt{.tgz}), the atomic setups are found
\texttt{Setups\_YYYYMMDD.tar.gz}.  External libraries (ATLAS, FFTW, MPICH) are
not part of the distribution but can also be supplied.

\subsubsection*{Unpack the Distribution}
\label{sub:unpack}
Change into the directory, where the \PAW\ directory shall be located.  A sort
of standard procedure would be to have one directory which includes all the
\PAW\ distributions, e.g. \texttt{Archive\_PAW} in your home directory.  The
reason for that is the fact that new versions are released on a regular
basis. Nevertheless it may be reasonable to keep older distributions.  We use
the \texttt{Archive\_PAW} in order to have just one main \PAW\ directory.
Later you might also want to install the external libraries there.


As a first step you have to change to your e.g. \texttt{Archive\_PAW} directory
and unpack the tarball by typing
\begin{verbatim}
tar -xvzf PAW_YYYYMMDD.tar.gz
\end{verbatim}
On non-Linux machines you might have to unzip first by
\begin{verbatim}
gunzip PAW_YYYYMMDD.tar.gz
\end{verbatim}
in order to unpack with
\begin{verbatim}
tar -xvf PAW_YYYYMMDD.tar
\end{verbatim}
Change into the directory created.
\begin{verbatim}
cd PAW_YYYYMMDD
\end{verbatim}
When typing
\begin{verbatim}
ls -l
\end{verbatim}
you should at least find the following files and directories, as they are
essential to build the binaries:
\begin{verbatim}
-rw-rw-r--   1 clemens  atp         18555 Jul 14 13:41 Makefile.in
-rwxrwxr-x   1 clemens  atp         61412 Jul 14 13:43 configure
drwxrwxr-x   5 clemens  atp          4096 Jul 14 11:01 src/
\end{verbatim}

\subsubsection*{Use External Libraries?}
\label{sub:libs}
The next step concerns the libraries.  In principle the sequential \PAW-Code
can be compiled completely standalone, which means, that no external ($\equiv$
not part of the \PAW-src directory) libraries have to be linked.  By specifying
\begin{verbatim}
--without-libs
\end{verbatim}
as an option to the configure script the code will be compiled standalone.
This will, however, result in a major loss of performance compared to versions
using numerical libraries.

On IBM's and Alpha workstations, the numerical libraries \texttt{essl} and
\texttt{cxml} respectively will be linked automatically if available.  On Intel
based hardware we use the \mbox{ATLAS} \mbox{BLAS} and the \mbox{FFTW} Fast
Fourier transforms. Both packages are open source.  Section~\ref{sec:libs}
contains short installation guides.

On AIX architectures and in the case of manual configuration, it is the task of
the user to take care of the include files.  Mind that the code looks for
\texttt{mpif.h} and \texttt{FFTW\_F77.I} (uppercase!) in the object directories
(e.g. bin/intel/Objects/*) as MPI and FFTW include file respectively.  The
latter is of course only needed, when FFTW is used as FFT library.

No parallel compilation will be possible unless an MPI(CH) distribution is
specified or installed in the default path (see section~\ref{sec:libs}).  In
any case, the script will create a \texttt{Makefile.parallel} to allow expert
users to make changes -- without those, one will get an error during
compilation of the parallel binary.  


\subsubsection*{Automatical Configuration under Linux and AIX}
\label{sub:auto}
Invoking
\begin{verbatim}
./configure
\end{verbatim}
checks the availability of compiler, GNU \texttt{make} and the C Preprocessor
\texttt{cpp}.  If one of them is not found, the script will give an error
message and terminate.  On some machines this might be due to the fact, that
\texttt{make}/\texttt{gmake} or \texttt{cpp} are not in your path.  In this
case find out where they are lying (e.g. use '\texttt{locate cpp}' or
'\texttt{find / -name cpp}') and either add the corresponding paths to your
\texttt{PATH} shell variable or invoke \texttt{configure} together with
\begin{verbatim}
--with-cpp=...
\end{verbatim}
or
\begin{verbatim}
--with-make=...
\end{verbatim}
where the \ldots\ are replaced by the full path (e.g. \texttt{/lib/cpp} for
most Linux architectures).  Mind that for some new \texttt{cpp}-versions you
have to specify
\begin{verbatim}
--with-cppoptions=-traditional
\end{verbatim}
in order to prevent him to terminate multiline character statements.  This
would cause error messages like this:
\begin{verbatim}
          WRITE(NFILO,FMT='(/5X,"NFI",3X,"TIME",1X,"TEMP",3X,"EKINC"   &'
                                                                       ^
cf90-314 f90fe: ERROR PRINFO, 
File = /homer/cfoerst/PAW/bin/intel/Objects/debug/paw_d.f90, 
Line = 884, Column = 72
  Unknown edit descriptor "&" has been detected.
\end{verbatim}


Concerning the compiler flags for compilation and linking, defaults are set in
the \texttt{configure}-script.  Especially on IBM hardware users might want to
add architecture specific flags. This can be done using
\begin{verbatim}
--with-cflags=...
--with-lflags=...
--with-llibs=...
\end{verbatim}
for compiler and linker flags as well as libraries respectively. The
\texttt{--with-llibs} option has to be specified like a command line option for
the compiler (e.g. -lmpi).  When specifying more than one option use double
quotes, for example
\begin{verbatim}
--with-cflags="-option1 -option2"
\end{verbatim}
Default parameters for the Absoft \texttt{f90} are
\begin{verbatim}
CFLAGS="-c -YEXT_NAMES=LCS -YEXT_SFX=_"
CFLAGS_OPTIMIZED="-c -YEXT_NAMES=LCS -YEXT_SFX=_ -B100 -O"
LFLAGS=""
\end{verbatim}
For Compaq \texttt{fort}:
\begin{verbatim}
CFLAGS="-c"
CFLAGS_OPTIMIZED="-c -O3"
LFLAGS=""
\end{verbatim}
On IBM architectures 
\begin{verbatim}
CFLAGS="-qlanglvl=90STD -c -qhalt=e -qextchk"
CFLAGS_OPTIMIZED="-qlanglvl=90STD -c -qhalt=e -qextchk -O3 -Q+clebsch \
                  -qfloat=rsqrt:hssngl:rsqrt -qmaxmem=-1 -qarch=auto"
LFLAGS="-bmaxdata:0x70000000 -bloadmap:loadmap -qextchk"
\end{verbatim}
is used as default. Mind that \texttt{-qarch=auto} is set which implies that
the binaries are compiled for the given architecture. If you want to
cross-compile for other IBM hardware you will have to change this option (see
section~\ref{sec:hack}.  The flags specified by the user will be appended to
the ones listed above.  If you want to eliminate or change one of the default
options, have a look in section~\ref{sec:hack}.

\subsubsection*{Manual Configuration}
\label{sub:parms}

If, for some reason, the automatical configuration does not work on your
hardware -- e.g. you are using TruUNIX for Alphas or you want to override one
of the default compiler flags, which cannot be done by command line options to
the \texttt{configure}-script -- the alternative way to configure is via
parameter files.

After determining the \texttt{make} tool and \texttt{cpp}, the
\texttt{configure}-script will read in the necessary parameters from the file
specified. Mind that the script does not check the correctness. The parameters
are just processed. Check the configuration summary!

A few samples files are included in the distribution (\texttt{parms.*}).  Invoke 
\begin{verbatim}
./configure --with-parmfile=YOURPARAMETERFILE
\end{verbatim}
to have one read in.  In the sample files every line is commented. Concering
the format, it is necessary that the variable name starts at the beginning of a
line, that the arguments are enlosed by double quotes and that there is no
carriage return in multiline arguments.


\subsubsection*{Build the Binaries}
The \texttt{configure}-script produces a number of Makefiles and a \texttt{bin}
directory.  As a final step you type
\begin{verbatim}
make all_new
\end{verbatim}
or -- if necessary -- the full path to your GNU \texttt{make} utility to build
the whole distribution including the tools for analysis. This includes all
binaries listed in table~\ref{tab:bins}.

\begin{table}[h]
\centering
\begin{tabular}{|c|l|l|l|} \hline
          & binary       & target & target for first compilation \\ \hline \hline
          & {\tt paw.x}        & none   & none\_new \\
          & {\tt paw\_dbg.x}    & debug  & debug\_new \\
          & {\tt paw\_fast.x}   & fast   & fast\_new \\
\raisebox{4.5ex}[-4.5ex]{\PAW}  & {\tt ppaw\_fast.x}  & parallel & parallel\_new \\ \hline
          & {\tt paw\_atom.x}  & atom & \ --  \\
          & {\tt paw\_tra.x}   & tra  & \ -- \\
          & {\tt paw\_wave.x}  & wave & \ -- \\
          & {\tt paw\_grab.x}  & grab & \ -- \\
          & {\tt paw\_dos.x}  & dos & \ -- \\
          & {\tt paw\_converttra.x} & converttra & \ -- \\
          & {\tt paw\_cleantra.x }  & cleantra   & \ -- \\
          & {\tt paw\_strc.x}       & strc       & \ -- \\
\raisebox{11.5ex}[-11.5ex]{Tools}  & {\tt paw\_tostrc.x}     & tostrc     & \ -- \\ \hline
\end{tabular}
\caption{Binaries and corresponding targets}
\label{tab:bins}
\end{table}

Alternatively you can select a specific binary by invoking
\begin{verbatim}
make
\end{verbatim}
together with the corresponding \emph{target} (see table~\ref{tab:bins}).  If
you compile a binary for the first time, you will have to use the \emph{target
for first compilation} as dependencies due to the modules have to be
resolved. After that and for the Tools it is sufficient to use just the target.
Other possible targets are \texttt{tools} to compile all tools and of course
\texttt{all} to recompile all binaries.

To find the binaries change to the \texttt{bin} directory which has been
created by the \texttt{configure} script.  There you will find at least one
subdirectory out of \texttt{intel, alpha} and \texttt{ibm}.  This distinction
is made to be able to use one \PAW\ directory to compile for different
architectures.

For Linux systems: If you encounter an error like 
\begin{verbatim}
/homer/cfoerst/PAW/lib/ATLAS/lib/Linux_ATHLON/libf77blas.a(xerbla.o): 
In function `xerbla_':
xerbla.o(.text+0x17): undefined reference to `s_wsfe'
xerbla.o(.text+0x27): undefined reference to `do_fio'
xerbla.o(.text+0x3a): undefined reference to `do_fio'
xerbla.o(.text+0x3f): undefined reference to `e_wsfe'
xerbla.o(.text+0x4e): undefined reference to `s_stop'
collect2: ld returned 1 exit status
\end{verbatim}
while linking the objects, rerun the configure script with the
\texttt{--with-llibs=-lg2c} option or add \texttt{-lg2c} to the corresponding
line of your \texttt{parms.*}-file.



\section{Using External Libraries}
\label{sec:libs}

For a given \PAW\ distribution, the default directory to search for external
libraries is the \texttt{lib} directory (not \texttt{/lib}!). Is is created by typing
\begin{verbatim}
mkdir lib
\end{verbatim}
This does not imply, that everybody is supposed to have the libraries there and
recompile them for every new distribution.

The usual way would be to install them in some central directory (e.g. the
previously mentioned \texttt{Archive\_PAW}) and make a link from the
\texttt{lib} directory to the various root directions of the library
distributions.  Default are \texttt{ATLAS}, \texttt{fftw-intel} and
\texttt{fftw-alpha} as well as \texttt{mpich-intel} and \texttt{mpich-alpha} or
in general \texttt{mpich-\$ARCH}.
Change to the \texttt{lib} directory and type for example
\begin{verbatim}
ln -s /home/clemens/lib/mpich-1.2.1 mpich-intel
\end{verbatim}
to set a link from the actual directory to \texttt{mpich-intel}.  Once created,
this link directory can be copied using \texttt{cp -a} into every new
distribution. The \texttt{-a} option preserves links.


Alternatively one could specify the root directories of the library
distributions by using the following command line options for the
\texttt{configure} script:
\begin{verbatim}
--with-mpichdir=...
--with-atlasdir=...
--with-fftwdir=...
\end{verbatim}
where \ldots\ are replaced by the the directory (e.g. \texttt{/home/clemens/mpich-1.2.1}).  

Tarballs of the libraries are distributed together with the \PAW-Code or can
alternatively be found at~\cite{mpich,atlas,fftw}.  Unpack them and proceed as
stated in the following subsections.  Of course you are free to choose other
parameters -- this is just the way we do it.

If you want to use precompiled external libraries which are not arranged in the
initial directory structure of the distribution, you will have to specify the
directory of the libraries (\texttt{lib*.a}) in the parameter file.

\subsection{ATLAS}

This subsection just holds information to compile the ATLAS library on Intel
compatible hardware, because on all other architectures optimized BLAS
libraries are present and linked automatically by the configure script.

After unpacking the ATLAS distribution type make and follow the
instructions. Always use the default value ([y] or [n] by just typing ENTER) until you arrive at
\begin{verbatim}
use express setup? [y]:
\end{verbatim}
Enter \texttt{no} and proceed taking the defaults if you like so.  
Use \texttt{f90} as  \textsc{Fortran77} compiler (just needed to compile the wrappers). As \texttt{F77 FLAGS} use
\begin{verbatim}
-YEXT_NAMES=LCS -YEXT_SFX=_ -O
\end{verbatim}
to ensure, that the linking works out.

Again take the default values until you reach the 
\begin{verbatim}
Enter C Flags (CCFLAGS) [-fomit-frame-pointer -O3 -funroll-all-loops]: 
\end{verbatim}
prompt.  Just use \texttt{-fomit-frame-pointer -O} and proceed accepting the defaults.

If you have compiled an ATLAS BLAS for different architectures (e.g. Pentium
and ATHLON), the corresponding libraries will be in different subdirectories of
the ATLAS distribution. You find these subdirectories in \texttt{ATLAS/lib}.
If there is just one, the configure script will chose it
automatically. Otherwise it will take the first in the list unless you specify
\begin{verbatim}
--with-atlasarch=...
\end{verbatim}
where the \ldots\ are replaced by the name of the subdirectory (e.g. \texttt{Linux\_ATHLON}).


\subsection{FFTW}

\begin{description}
\item[Absoft \texttt{f90}:] As a first step you have to set the shell variable
\texttt{CPPFLAGS}. Depending on the shell you are using, this is done by
{\footnotesize
\begin{verbatim}
setenv CPPFLAGS "-DFFTW_FORTRANIZE_LOWERCASE -DFFTW_FORTRANIZE_EXTRA_UNDERSCORE"
\end{verbatim}
}
or
{\footnotesize
\begin{verbatim}
export CPPFLAGS="-DFFTW_FORTRANIZE_LOWERCASE -DFFTW_FORTRANIZE_EXTRA_UNDERSCORE"
\end{verbatim}
}
Then invoke
\begin{verbatim}
./configure --enable-i386-hacks
\end{verbatim}
to take advantage of the \texttt{gcc}/x86 specific performance hacks. A
\texttt{make} afterwards builds the distribution.


\end{description}

\subsection{MPICH}

\begin{description}
%%%%%%%%%%%%%%%%%%%%%%%
\item[Absoft \texttt{f90}:] Change into the root directory of the distribution and type
\begin{verbatim}
./configure -opt= -f90="f90 -YEXT_NAMES=LCS -YEXT_SFX=_" 
                  -f77="f77 -f -N15" -rsh=/usr/bin/rsh 
\end{verbatim}
in one line, if \texttt{/usr/bin/rsh} is the path to your remote shell binary.
On the Linux machines (SuSE) here in Clausthal the script does not find
\texttt{rsh} otherwise.  After the script has finished, type
\begin{verbatim}
make
\end{verbatim}
 With some tarballs of the \texttt{mpich-1.2.1} distribution, there might be an
error after a short time: {\footnotesize
\begin{verbatim}
make[4]: execvp: /fiji/clemens/paw_00000000/lib/mpich-1.2.1/bin/mpicc: Keine Berechtigung 
make[4]: *** [close.o] Error 127 
Make failed in directory mpi-io
make[3]: *** [mpiolib] Error 1 
make[2]: *** [mpio] Error 2 
make[1]: *** [mpi-modules] Error 2 
make: *** [mpi] Error 2
\end{verbatim}
}
Just type
\begin{verbatim}
chmod +x bin/*
\end{verbatim}
to make the files in the \texttt{bin} directory executable and rerun \texttt{make}.
%%%%%%%%%%%%%%%%%%%%
\item[Compaq \texttt{fort}:] Make sure, that there is a link from
\texttt{fort77} to \texttt{fort} as the \texttt{configure}-script of MPICH just
searches for \texttt{fort77}.  I've reported this bug - maybe it will be
corrected in the next release.  On the Linux-Alpha machines here in Clausthal
this link had to be made by hand.
\begin{verbatim}
ln -s binary linkname
\end{verbatim}
If you are not root on the machine, a possibility would be to put the link into
 your \texttt{$\tilde{}$/bin}-directory and add it to the \texttt{PATH} shell variable.  

Another way of fixing the problem is searching \texttt{fort77} in the MPICH
\texttt{configure}-script and change it to \texttt{fort}.  Watch the output of
the script to check whether the compiler has been found.

For the rest, typing \texttt{./configure} and \texttt{make} works out.

\end{description}





\section{Making your own changes to the installation scripts}
\label{sec:hack}

\subsection{Why this effort}

The new installation scheme shall help the user to compile the \PAW-Code
without having to find out about a lot of parameters himself.  Basically there
are the compiler flags and the preprocessor variables as well as the various
directories.  

Concerning the first two one might want to have a look at the
\texttt{src/paw\_library.f} file.  It is the interface for library calls of the
code.  Depending on the architecture and the libraries installed, different
routines have to be called.  This behavior is controlled by preprocessor
variables.  Another example would be the file \texttt{src/paw\_mpelib.f} where
a distinction between sequential and parallel compilation is made.  The
libraries to be linked must of course be the same as the one chosen by the
preprocessor.

The following subsections are just intended to give a short introduction,
please stick to the documentation in the files for further information.

\subsection{The \texttt{configure.in}-script}

The innermost part of the new scheme is the \texttt{configure.in} file.  It is
written in the macro language of the GNU \texttt{autoconf}
tool~\cite{autoconf,autoconf2}.  I have tried to put a lot of comments into
this file, so I expect it to be readable.

Especially important is the first part with the \emph{user adaptable
variables}. Here all the values can be set - the rest of the script just uses
the variables.  This is the place to make permanent changes to the installation
scheme (e.g. change the default compiler flags).

By invoking
\begin{verbatim}
autoconf
\end{verbatim}
in the \PAW\ directory the \texttt{configure} file -- which is a
\texttt{/bin/sh} script -- will be generated.


\subsection{The \texttt{Makefile.in} and the \texttt{Makefile.*}}

When \texttt{configure} is executed it determines the necessary variables (or
they are set by command line options) and replaces the
\begin{verbatim}
@VARIABLENAME@
\end{verbatim}
strings in the \texttt{Makefile.in} by the actual values to produce the
\texttt{Makefile.*}.  Some parameters which are different for every
\texttt{Makefile.*} are set by \texttt{sed}-commands.  Although in
\texttt{Makefile.in}, only the first part will be interesting to implement
changes.  I hope that the documentation there is sufficient as well.

The \texttt{Makefile.*} control the compilation of the various binaries.
Changes made to these files will be lost after the next execution of the
\texttt{configure} script.  They are, however, well suited for temporary
changes which cannot be made through command line options to the configure
script.




\section{Problems and Bugs}

These scripts have been tested on all architectures available to me.  There
they have worked out fine so far.  If you, however, experience problems, have
suggestions or if you find bugs, I will be pleased to help.  Just send an email
together with a detailed description of the problem and the output of the
\texttt{configure}-script and \texttt{Makefile} to:

\underline{\texttt{clemens.foerst@tuwien.ac.at}}

\clearpage
\section*{List of}
\addcontentsline{toc}{section}{List of}

\subsection*{command line options for \texttt{configure}}
\addcontentsline{toc}{subsection}{command line options for \texttt{configure}}

\begin{verbatim}
--without-libs            do NOT use external numerical libraries
--with-fftwdir=DIR        root directory of FFTW distribution
--with-mpidir=DIR         root directory of MPICH distribution
--with-atlasdir=DIR       root directory of ATLAS distribution
--with-atlasarch=ARCH     architecture for wich ATLAS blas was compiled 
--with-make=LOCATION      location of the GNU make utility (if not in path)
--with-cpp=LOCATION       location of the GNU C Preprocessor (if not in path)
--with-cppoptions=OPTIONS options for the GNU C Preprocessor
--with-cflags=FLAGS       specify additional compiler flags
--with-lflags=LFLAGS      specify additional compiler flags for linking
--with-llibs=LLIBS        specify additional libraries to be linked
--with-parmfile=PARMFILE  specify parameter file -- no automatic configuration
--help                    gives this list
\end{verbatim}

\subsection*{preprocessor variables}
\addcontentsline{toc}{subsection}{preprocessor variables}

\begin{verbatim}
CPPVAR_FFT_PACK           use internal FFT routines
CPPVAR_FFT_FFTW           use FFTW FFT routines
CPPVAR_FFT_ESSL           use ESSL FFT routines
CPPVAR_BLAS_ESSL          use ESSL syntax for BLAS/LAPACK calls 
CPPVAR_SUPPORT_XLF        xlf support routines exist 
CPPVAR_USAGE_EXIST        getrusage exists
CPPVAR_LANGEXT_XLF        use xlf language extensions
CPPVAR_U77                U77 library exists
\end{verbatim}


\addcontentsline{toc}{section}{References}
\begin{thebibliography}{99}
\bibitem{f90} www.absoft.com
\bibitem{fort} www.compaq.com/fortran
\bibitem{autoconf} www.gnu.org/software/autoconf/autoconf.html
\bibitem{autoconf2} www.gnu.org/manual
\bibitem{mpich} www-unix.mcs.anl.gov/mpi/mpich/download.html
\bibitem{atlas} www.netlib.org/atlas
\bibitem{fftw} www.fftw.org
\bibitem{make} www.gnu.org/software/make/make.html
\end{thebibliography}

\end{document}
