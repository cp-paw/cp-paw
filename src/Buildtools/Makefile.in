#________1_________2_________3_________4_________5_________6_________7_________8
################################################################################
##                                                                            ##
##  make a paw executable and a paw library using gmake                       ##
##  ===================================================                       ##
##                                                                            ##
################################################################################
##                                                                            ##
##  Primary targets:                                                          ##
##    prepare, executable, tools, libs                                        ##
##                                                                            ##
##    Two calls are required:                                                 ##
##      1) make prepare                                                       ##
##      2) make target , where target may be (executable, tools, libs, all)   ##
##                                                                            ##
##  directory structure                                                       ##
##    BASEDIR  cppaw distribution
##    BUILDDIR directory for compilation
##                                                                            ##
##  directory structure of BASEDIR                                            ##
##    src              sources for CP-PAW main code                           ##
##    src/Tools/*/     Tools                                                  ##
##    src/Buildtools/   preprocessor etc                                      ##
##                                                                            ##
##  a srcblob is contained in the paw exectable and the libraries             ##
##                                                                            ##
##  the following parameters are replaced by the build script                 ##
##      MAKE,AR,CPP,CPPFLAGS,FC,FFLAGS,LD,LDFLAGS,LIBS,INCLUDES,BASEDIR       ##
##                                                                            ##
##                                                                            ##
##  step0: preparation:                                                       ##
##      -- build-tools: f90pp, f90pp_tmplts.x, parmfilewriter.x               ##
##      -- objects: paw_srcblob.o,paw_version.o,version_writeparmfile.o       ##
##      -- copy include files into build directory                            ##
##                                                                            ##
##  step1: preprocessing (*_d.f90)                                            ##
##                                                                            ##
##  step2: construct module dependencies: (*.mk); combine into big.mk         ##
##                                                                            ##
##  step3: compile using big.mk (*.o)                                         ##
##                                                                            ##
##  step4: link into paw.x and tools                                          ##
##                                                                            ##
##  stept: install                                                            ##
##                                                                            ##
################################################################################
##    https://aoterodelaroza.github.io/devnotes/modern-fortran-makefiles/     ##
##    https://bytes.usc.edu/cs104/wiki/makefile                               ##
##                                                                            ##
##  makefile cheat sheet:                                                     ##
##    $@ expands into target                                                  ##
##    $< expands into the first dependency                                    ##
##    $^ expands into the list of dependencies                                ##
##                                                                            ##
##                                                                            ##
##  VPATH is makes search path variable. These directories need not be        ##
##  specified in prerequisites                                                ##
##                                                                            ##
################################################################################
#____set shell__________________________________________________________________
SHELL=/bin/bash
#____switch off implicit rules__________________________________________________
.SUFFIXES:
################################################################################
## The following block of variables is set by the configure                   ##
## script (AC_SUBST @...@ and sed-Commands var...)                            ##
################################################################################
#___________________________ library archiver___________________________________
export AR=@AR@
#___________________________ make tool__________________________________________
export MAKE=@MAKE@
#____________________________c-preprocessor_____________________________________
export CPP=@CPP@
#____________________________fortran compiler___________________________________
export FC=@FC@
#_____________________________linker____________________________________________
export LD=@LD@
#_____________________________flags for c-preprocessor__________________________
export CPPFLAGS=@CPPFLAGS@
#_____________________________flags for fortran compiler________________________
export FFLAGS=@FFLAGS@
#_____________________________flags for linker__________________________________
export LDFLAGS=@LDFLAGS@
#_____________________________libraries_________________________________________
export LIBS=@LIBS@
#_____________________________include and module files__________________________
export INCLUDES=@INCLUDES@
#_____________________________main cp-paw directory_____________________________
export BASEDIR=@BASEDIR@
#
#################  derived variables  ##########################################
#
#_____________________________search path of make_______________________________
# export VPATH=./ $(wildcard ./*) \
#              ${BASEDIR}/src $(wildcard ${BASEDIR}/src/Tools/*) 

#
################################################################################
##  Construct lists of source files                                           ##
##  the source codes are divided into groups                                  ##
##      admin: Buildtools/F90/f90pp_tmplts.f90                                ##
##             Buildtools/F90/parmfilewriter.f90                              ##
##             version_writeparmfile (made on the fly)                        ##
##      library: FLIBLIST, slatec.f, paw_version.f90                          ##
##      tools:   FTOOLS                                                       ##
##      main:    FLIST                                                        ##
################################################################################

#  slatec.f is a library written in Fortran77, which shall be removed
#  in future versions of the code. As F77 code it requires special
#  treatment.

#-------------------------------------------------------------------------------
#-- object files derived from FLIBLIST and  will become part                  --
#-- of the paw library libpaw.a.                                              --
#-------------------------------------------------------------------------------
export LIBLIST= \
        paw_trace \
        paw_error \
        paw_filehandler \
        paw_clock \
        paw_lock \
        paw_timing \
        paw_linkedlist \
        paw_strings \
        paw_dft \
        paw_dftaddendum \
        paw_constants \
        paw_spherical \
        paw_generalpurpose \
        paw_report \
        paw_periodictable \
        paw_radial \
        paw_schroedinger \
        paw_atomlib \
        paw_specialfunctions \
        paw_usage \
        paw_selftest \
        paw_strcio \
        paw_cell \
        paw_pdos \
        paw_banddata \
        paw_library \
        paw_polynom \
        paw_dimer  \
        paw_lmtobasics \
        paw_debug \
        paw_brillouin \
        paw_gaussian \
        paw_mpelib \
        paw_version 

#-------------------------------------------------------------------------------
#--  objects specific for the simulation code                                 --
#-------------------------------------------------------------------------------
export PAWLIST= \
	paw_driver \
        paw_thermostat \
        paw_isolate \
        paw_assist \
        paw_lists \
        paw_constraints \
        paw_lmto \
        paw_simplelmto \
        paw_dmft \
        paw_fft \
        paw_augmentation \
        paw_softcore \
        paw_classical \
        paw_forcefield \
        paw_atoms \
        paw \
        paw_efg \
        paw_ioroutines \
        paw_iotra \
        paw_ionew \
        paw_qmmm \
        paw_cosmo \
        paw_warmup \
        paw_optfric \
        paw_setups \
        paw_potential \
        paw_occupations \
        paw_pairpotential \
        paw_graphics \
        paw_waves1 \
        paw_waves2 \
        paw_mixer \
        paw_cg \
        paw_kpoints \
        paw_vext \
        paw_vdw \
        paw_ci \
        paw_opteels 


# DIRTOOLS contains the names of the source files for the tools including 
# the path relative to the tool directory $(BASEDIR)/src/
DIRTOOLS= \
        FromPOSCAR/paw_fromposcar \
        Grab/paw_grab \
        Murnaghan/paw_murnaghan \
        PDoS/paw_dos \
        PDoS/paw_dosplot \
        Polyhedra/paw_polyhedra \
        Preopt/paw_preopt \
        Stpa/paw_stpa \
        Stpa/paw_stpreport \
        Strc/paw_strc \
        Strc/paw_tostrc \
        Strc/paw_toxyz \
        Tra/paw_cleantra \
        Tra/paw_converttra \
        Tra/paw_tra \
        Wave/paw_1davpot \
        Wave/paw_cmcwave \
        Wave/paw_wave \
        Bands/paw_bands
export TOOLS=$(notdir $(DIRTOOLS))

# files from $(BASEDIR)/src/Buildtools to be placed in etc
export ADMIN= \
             f90pp.in \
             f90pp.sed \
             dollar_ok.sh \
             f90pp_tmplts.f90 \
             parmfilewriter.f90 \
             paw_versioninfo.sh 

export SCRIPTS=$(notdir $(wildcard $(BASEDIR)/src/Tools/Scripts/*.sh))

$(info "----------------------------------------------------------------------")
$(info "The source codes are divided into three subsests:")
$(info "PAWLIST: files for the simulation code, which are NOT on the library")
$(info "LIBLIST: files for the simulation code, which are on the library")
$(info "DIRTOOLS: Tools")
$(info "----------------------------------------------------------------------")
$(info "PAWLIST=$(PAWLIST)")
$(info "----------------------------------------------------------------------")
$(info "LIBLIST=$(LIBLIST)")
$(info "----------------------------------------------------------------------")
$(info "DIRTOOLS=$(DIRTOOLS)")
$(info "----------------------------------------------------------------------")
$(info "ADMIN=$(ADMIN)")
$(info "----------------------------------------------------------------------")

export BIGLIST=$(LIBLIST) $(PAWLIST) $(TOOLS)



#-------------------------------------------------------------------------------
#  derived lists                                                              --
#-------------------------------------------------------------------------------
# export FTOOLS=$(addsuffix .f90, $(DIRTOOLS))


# export FLIST=$(FLIST1) $(FLIST2) $(FLIST3)

# export DFLIST= $(addsuffix _d.f90, $(basename $(FLIST) $(FLIBLIST)))

# export DFTOOLS= $(addsuffix _d.f90, $(basename $(notdir $(FTOOLS))))

# export MKLIST= $(addsuffix .mk, \
#        $(basename $(FLIST) $(FLIBLIST) $(notdir $(FTOOLS))))

# export OLIST= $(addsuffix .o, \
#        $(basename $(FLIST) $(FLIBLIST) $(notdir $(FTOOLS))))

# export XTOOLS=$(addsuffix .x, $(basename $(notdir $(FTOOLS))))


# export OLIBLIST=$(addsuffix .o, $(basename $(FLIBLIST) slatec.o )) 

#
################################################################################
##  targets                                                                   ##
##  first target: make prepare                                                ##
##  second target: make all  or make executable                               ##
################################################################################
.PHONY: default
default: executable

.PHONY: all
all: executable libs tools scripts

.PHONY: collect
collect: $(addsuffix .F90p, $(BIGLIST)) slatec.f\
         $(addprefix etc/, $(ADMIN))

#________________preprocess all fortran files
#________________construct makefile for compilation
#________________construct prepare some object files
.PHONY: prepare
prepare: $(addsuffix .f90, $(BIGLIST)) big.mk includes \
         cppaw_version.info version_writeparmfile.o paw_srcblob.o

.PHONY: executable
executable: paw.x 

.PHONY: tools
tools: $(addsuffix .x, $(TOOLS))

./PHONY : scripts
scripts: $(SCRIPTS)

.PHONY: libs
libs: libpaw.a libpawfull.a

##########################################################################
##  Include files (module files etc)                                  
##########################################################################
.PHONY: includes
includes : 
	for X in $(INCLUDES) ; do \
           Y=$${X##*/} ;\
           if [[ ! -f $$X ]] ; then \
             echo "file $$X does not exist" ;\
             exit 1 ;\
           fi; \
           if [[ ! $$Y -nt $$X ]] ; then \
             rm $$Y ;\
             ln -s $$X $$Y ;\
           fi ; \
        done 

################################################################################
#
#  collect input in Builddirectory
#
#  files with extension .F90p need preprocessing. The suffix p has been added 
#  because filenames in macOS are not case sensitive.
#
################################################################################
#-------------------------------------------------------------------------------
#  administration tools into etc directory
#-------------------------------------------------------------------------------
$(addprefix etc/, $(ADMIN)): etc/% : $(BASEDIR)/src/Buildtools/% 
	cp $< $@

#-------------------------------------------------------------------------------
#  paw code and library
#-------------------------------------------------------------------------------
$(addsuffix .F90p, $(PAWLIST)) : %.F90p : $(BASEDIR)/src/%.f90 
	cp $< $@

$(addsuffix .F90p, $(LIBLIST)) : %.F90p : $(BASEDIR)/src/%.f90 
	cp $< $@

slatec.f: $(BASEDIR)/src/slatec.f 
	cp $<  $@

#-------------------------------------------------------------------------------
#  tools
#-------------------------------------------------------------------------------
$(addsuffix .F90p, $(notdir $(DIRTOOLS))): %.F90p: $(wildcard $(BASEDIR)/src/Tools/*/%.f90 )
	cp $(wildcard $(BASEDIR)/src/Tools/*/$*.f90) $@

#-------------------------------------------------------------------------------
#  scripts (tools)
#-------------------------------------------------------------------------------
$(SCRIPTS): % : $(addprefix $(BASEDIR)/src/Tools/Scripts/, %)
	cp $< $@

################################################################################
#
#  administration codes
#
#--  f90pp fortran preprocessor
#--  f90pp_tmplts.x can expand the self-invented method to use classes        --
#
################################################################################
#
#_____fortran-preprocessor______________________________________________________
export F90PP=etc/f90pp 
$(F90PP) : etc/f90pp.in etc/f90pp.sed etc/f90pp_tmplts.x etc/dollar_ok.sh
	sed -e "s|\@CPP\@|$(CPP)|g" $< > $@
	chmod +x $@

etc/f90pp_tmplts.x : etc/f90pp_tmplts.f90 etc/dollar_ok.sh
	etc/dollar_ok.sh < $< > etc/f90pp_tmplts_tmp.f90
	${FC} $(FFLAGS) -o $@ etc/f90pp_tmplts_tmp.f90

#-------------------------------------------------------------------------------
#--  the parmfilewriter embeds text into a fortran code,                     --
#--  which in turn is converted into an object file                           --
#-------------------------------------------------------------------------------
etc/parmfilewriter.x: etc/parmfilewriter.f90 $(F90PP)
	$(F90PP) $(CPPFLAGS) < $< > etc/parmfilewriter_tmp.f90
	$(FC) $(FFLAGS) -o $@ etc/parmfilewriter_tmp.f90

#-------------------------------------------------------------------------------
#--  embed the current parmfile in version_writeparmfile.o
#-------------------------------------------------------------------------------
etc/version_writeparmfile.F90p : etc/parms.in_use etc/parmfilewriter.x 
	cat $< | etc/parmfilewriter.x > $@ 

version_writeparmfile.f90 : etc/version_writeparmfile.F90p $(F90PP)
	$(F90PP) $(CPPFLAGS) < $< > $@

version_writeparmfile.o : version_writeparmfile.f90
	$(FC) -c $(FFLAGS) -o $@ $<

#-------------------------------------------------------------------------------
#   embed version information in
# the ld option format for sectcreate is -sectcreate <segname> <sectname> <file>
#-------------------------------------------------------------------------------
#
#______copy tool for extracting version information_____________________________
# etc/paw_versioninfo.sh : ${BASEDIR}/src/Tools/Scripts/paw_versioninfo.sh
# 	cp $< $@

#_____collect version information to be embedded________________________________
# if not under git control, the bash script paw_versioninfo.sh will
# fail to produce cppaw_version.info. In that case, the
# version information is copied from ${BASEDIR}/cppaw_version.info in
# the cppaw top directory. 
# 
# The minus sign in front of the line makes make to continue even if
# paw_versioninfo.sh throws an error
#
# "test -s file" evaluates true if the file is of zero size
#
cppaw_version.info : etc/paw_versioninfo.sh
	-bash etc/paw_versioninfo.sh > $@
	if [[ ! -s $@ && -e ${BASEDIR}/cppaw_version.info ]] ; then \
           cp ${BASEDIR}/cppaw_version.info $@ ; fi

#____paw_version_d.f90 contains version information via include file____________
#____include file paw_cppaw_version.info will be required for compilation
paw_version.o : cppaw_version.info

# paw_version_d.f90: $(BASEDIR)/src/paw_version.f90 cppaw_version.info \
#                                                   $(F90PP)
# 	$(F90PP) $(CPPFLAGS) < $< > $@

# do not compile yet because module files are still missing
# paw_version.o: paw_version_d.f90 
# 	$(FC) -c $(FFLAGS) -o $@ $<

#-------------------------------------------------------------------------------
# generate source blob __________________________________________________
# the ld option format for sectcreate is -sectcreate <segname> <sectname> <file>
#-------------------------------------------------------------------------------
# Object for source blob

# $^ stands for "all prerequisites
etc/paw_srcblob.tgz : etc/parms.in_use $(BASEDIR)/src 
	rm -f $@
	export TMP=$$(mktemp -d) ;\
	cp -r $(BASEDIR)/src $${TMP} ;\
	cp  etc/parmfile $${TMP}/ ;\
	tar -cz -f$@  -C$${TMP} $${TMP} ;\


#____embed the srcblob into an object file, that will be linked into the________
#____executable_________________________________________________________________
#     -sectcreate <segname> <sectname> <file>
#
#  $(error "text") is a Make-specific command
#
#  OS: operating system (Darwin is macOS)
export OS=$(shell uname -s)

paw_srcblob.o: etc/paw_srcblob.tgz
ifeq ($(OS),Linux) 
	ld -r -b binary -o paw_srcblob.o etc/paw_srcblob.tgz
else ifeq ($(OS),Darwin)
	touch etc/paw_srcblob_dummy.f90   
	${FC} -c $(FFLAGS) -o etc/paw_srcblob_dummy.o etc/paw_srcblob_dummy.f90
	ld -r -o paw_srcblob.o -sectcreate binary pawsrcblob_bin \
                                    etc/paw_srcblob.tgz etc/paw_srcblob_dummy.o
else
  $(error "error: Operating system $(OS) not recognized")
endif

################################################################################
#  Construct object files
#
#   1) preprocess fortran code 
#   2) construct individual make files with the dependency information via
#      module files (.mod)
#   3) combine individual make files to big.mk 
#   4) use big.mk to build all object files .o
################################################################################
# $(DFLIST) : %_d.f90 : $(BASEDIR)/src/%.f90 $(F90PP) $(BASEDIR)/src/*/%.f90 $(F90PP) 
# 	$(F90PP) $(CPPFLAGS) < $< > $@

$(info DFLIST=$DFLIST)

$(info DFTOOLS=$DFTOOLS)

#__ implicit rule for running fortran preprocessor______________________________
%.f90 : %.F90p $(F90PP)
	$(F90PP) $(CPPFLAGS) < $< > $@

#__implicit rule for constructing individual make snippets______________________
%.mk : %.f90
	$(BASEDIR)/src/Buildtools/moddep.sh -f $< -d ./ > $@

export OLIST=$(addsuffix .o, $(BIGLIST))

big.mk : $(addsuffix .mk, $(PAWLIST) $(LIBLIST) $(TOOLS))
	echo 'export SHELL=/bin/bash   '  > $@
	echo '.SUFFIXES:               ' >> $@
	echo 'export FC=$(FC)          ' >> $@
	echo 'export FFLAGS=$(FFLAGS)  ' >> $@
	echo '##                       ' >> $@
	echo 'default: $(OLIST)        ' >> $@
	echo '.PHONY : default         ' >> $@
	echo '##                       ' >> $@
	echo 'print:                   ' >> $@
#       __option -e allows interpretation of \t (=horizontal tab)_______________
	echo -e '\t echo FC    = $$(FC)    ' >> $@
	echo -e '\t echo FFLAGS= $$(FFLAGS)' >> $@
	echo '##                       ' >> $@
	cat $(OLIST:.o=.mk)              >> $@


$(OLIST) : objects

.PHONY: objects
objects :  $(addsuffix .F90p , $(BIGLIST)) \
           big.mk cppaw_version.info includes
	echo "doing big.mk....................................................."
	$(MAKE) -f big.mk
	echo "..................................................... big.mk done"
#
#____general rule for object files fortran 77___________________________________
#____use gmake string substitution $(var:suffix=replacement)
slatec.o: slatec.f 
	$(FC) -c $(FFLAGS:-fimplicit-none=) -o $@ $<

################################################################################
#  build executables
#    1) simulation code
#    2) tools
#    3) paw library libpaw.a
#    4) tests
################################################################################
# remove the tools to avoid having several competing main programs

#-------------------------------------------------------------------------------
#  construct cppaw executable
#-------------------------------------------------------------------------------
export ARGLIST=$(addsuffix .o, $(PAWLIST) $(LIBLIST) slatec) \
               paw_srcblob.o version_writeparmfile.o

paw.x : $(ARGLIST) objects
	${LD} ${LDFLAGS} -o paw.x ${ARGLIST} ${LIBS}

#-------------------------------------------------------------------------------
#  construct tools
#-------------------------------------------------------------------------------
$(addsuffix .x, $(TOOLS)) : %.x : %.o libpawfull.a
	${LD} $(LDFLAGS) -o$@ ${LIBS} -L./ -lpawfull $<  

#-------------------------------------------------------------------------------
#  construct paw library libpaw.a (or libppaw.a)
#  --  use "ppaw" instead of "paw" to identify parallel version
#-------------------------------------------------------------------------------
libpaw.a: $(addsuffix .o, $(LIBLIST)) version_writeparmfile.o paw_version.o
	$(AR) cru libpaw.a $(addsuffix .o, $(LIBLIST)) \
                           slatec.o version_writeparmfile.o

#-------------------------------------------------------------------------------
##  build full paw library and optionally exclude objects              ##
##  this target can be used to create a library of all objects         ##
##  additionally on can exclude objects using the EXCLUDE parameter    ##
##  for example: make libfull EXCLUDE="paw_classical.o paw_setups.o"   ##
##  The object paw.o will allways be excluded, because it contains a   ##
##  main program.                                                      ##
##  This library can then be linked to a main program, like libpaw.a   ##
#-------------------------------------------------------------------------------
EXCLUDE="paw.o $(addsuffix .o, $(TOOLS))"
libpawfull.a: ${OLIST} slatec.o \
              paw_srcblob.o version_writeparmfile.o paw_version.o
	$(AR) cru libpawfull.a $(OLIST) paw_srcblob.o \
                               slatec.o paw_mpelib.o version_writeparmfile.o
	echo EXCLUDE=${EXCLUDE}
	for EX in ${EXCLUDE}; do $(AR) -dv libpawfull.a $$EX; done
	ar -t libpawfull.a


