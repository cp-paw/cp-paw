#!/bin/bash
################################################################################
##                                                                            ##
##  parmfile for cppaw                                                        ##
##                                                                            ##
##  use in connection with ${BASEDIR}/src/Buildtools/paw_build.sh             ##
##  parmfile will be embedded into paw_build.sh with "source" command         ##
##                                                                            ##
##  The parameter SELECT is pre-defined                                       ##
##                                                                            ##
##                                                                            ##
##  for a comparison of the flags for various compilers, see
##  https://github.com/flang-compiler/f18-llvm-project/blob/not-main/flang/docs/OptionComparison.md
##
################################################################################

################################################################################
## variables to be set and their explanation
## do not touch this block. overwrite values below
################################################################################
#____________________________identifier for the implementation__________________
export SUFFIX=
#____________________________switch for parallel(true)/scalar(false) execution__
export PARALLELL="false"
#____________________________gnu make version 4.3 or later______________________
export MAKE=
#____________________________archiver___________________________________________
export AR=
#____________________________c-preprocessor_____________________________________
export CPP=
#____________________________fortran compiler___________________________________
export FC=
#____________________________linker (usually equal to compiler)_________________
export LD=
#____________________________flags for the preprocessor_________________________
#____________________________-D will be prepended_______________________________
#____________________________variable for parallel will be added________________
# CPPVAR_NOLIBXC (do not link LIBXC)
# CPPVAR_FEAST, CPPVAR_JADAMILU #
# CPPVAR_SLEPC  (#INCLUDE <FINCLUDE/SLEPCEPSDEF.H>)
# -C do not discard comments
# -P inhibit generation of linemarkers
# -traditional Try to imitate the behavior of pre-standard C preprocessors
# -nostdinc Do not search the standard system directories for header files. 
export CPPFLAGS=
export LDFLAGS=
#___________________________list of include and module files____________________
#___________________________required fftw3.f03, mpi_f08.mod, xc_f03_lib_m.mod___
export INCLUDES=
#___________________________list of libraries___________________________________
#___________________________fftw3, mpi, blas, lapack, mpi
export LIBS=
#___________________________base directory of the cppaw repository______________
export BASEDIR=
#___________________________directory for the building process__________________
#___________________________default: ./bin/Build_${SUFIX}
export BUILDDIR=
#___________________________installation directory______________________________
#___________________________default ./bin/${SUFFIX}_____________________________
export BINDIR=
#___________________________nstallation directory for the documentation_________
export DOCDIR=

################################################################################
## generic definitions
################################################################################
#-------------------------------------------------------------------------------
#--                          analyze system                                   --
#-------------------------------------------------------------------------------
#____operating system_______________________________________________________
OS=$(uname -s) # can be Linux, Darwin,...
#_____architecture (processor family)___________________________________________
ARCH=$(uname -m)   # can be arm64,
#-------------------------------------------------------------------------------
#--                          set generic values of parameters                 --
#-------------------------------------------------------------------------------
MAKE="$(which gmake)"

AR="$(which ar)"

CPP="$(which cpp)"

FC="$(which gfortran)"

LD="${FC}"

BASEDIR="$(pwd)"

BUILDDIR="$(pwd)/bin/Build_${SELECT}"

BINDIR="$(pwd)/bin/${SELECT}"

DOCDIR="$(pwd)/doc"

#-------------------------------------------------------------------------------
#  when pkgconfig is available, it is used to initialize the variables
#  for the libraries
#-------------------------------------------------------------------------------
case $SELECT in 
  *parallel*)
     echo parallel
     PARALLEL=true
     CPPFLAGS="${CPPFLAGS} -DCPPVARIABLE_PARALLEL"
     if [[ -z $(which mpifort) ]] ; then
       echo "error in $0: parallel compilation requires mpifort"
       echo "mpifort is not installed"
       exit 1
     fi
     # use the compiler compatible with MPI installation.
     # the compiler wrapper mpi-fort is not used to compile the code
     # but the flags are added explicitely into FFLAGS, LDFLAGS, INCLUDES.
     FC=$(mpifort -showme:command)
     LD=${FC}
     ;;
  *)
     PARALLEL=false
    ;;
esac

#-------------------------------------------------------------------------------
#  when pkgconfig is available, it is used to initialize the variables
#  for the libraries
#-------------------------------------------------------------------------------
if [[ -n $(which pkg-config) ]] ; then
  LIBS=""
  LDFLAGS=""
  INCUDES=""
  #-----------------------------------------------------------------------------
  #  add libraries: MPI BLAS LAPACK FFTW LIBXC 
  #-----------------------------------------------------------------------------
  #  do not use the compiler wrapper for MPI. We provide the parameters
  #  to the compiler directly. (relevant for the makefile used later)
  #-----------------------------------------------------------------------------
  #  BLAS and Lapack are contained in framework Acellerate in MacOS 
  #  mpi is attached when available. It will not be used for CPPVAR_PARALLEL"
  #-----------------------------------------------------------------------------
  LIST="fftw3 libxcf03"
#
  if [[ ${OS} = Darwin ]] ; then
    LDFLAGS="${LDFLAGS} -framework Accelerate"
  else
    LIST="${LIST} blas lapack"
  fi
#
  if [[ $PARALLEL = true ]] ; then
    if [[ -n $(pkg-config --list-all |grep -Eo ompi) ]] ; then
      LIST="${LIST} ompi-fort"
    elif [[ -n $(pkg-config --list-all |grep -Eo mpich) ]] ; then
      LIST="${LIST} mpich-fort"
    fi
  fi

  for X in ${LIST}; do
    if [[ $(pkg-config --exists $X; echo $?) = 0 ]]; then
      FFLAGS="${FFLAGS} $(pkg-config --cflags $X)"
      LIBS="${LIBS} $(pkg-config --libs $X)"
      case $X in
         *fftw3*)
           Y=$(pkg-config --variable=includedir $X)/fftw3.f03
           INCLUDES="${INCLUDES} $Y"
          ;; 
         *mpi*)
           FC=$(mpifort -showme:command)
           FC=$(which ${FC})     # get full path
           LD=${FC}
           Y=$(pkg-config --variable=includedir $X)/mpi_f08.mod
           INCLUDES="$INCLUDES $Y"
           ;;
         *libxc*)
           Y=$(pkg-config --variable=includedir $X)/xc_f03_lib_m.mod
           INCLUDES="$INCLUDES $Y"
           ;;
      esac
    fi   
  done
fi

################################################################################
## resolve selection 
################################################################################
case $SELECT in 
  dbg)
     SUFFIX="dbg"
     FFLAGS="${FFLAGS} -O3 -funroll-loops -fomit-frame-pointer -march=native \
             -fexternal-blas -g -std=f2008 -pedantic -fbacktrace -fdump-core \
             -fimplicit-none -fcheck=bounds,do,mem,pointer,recursion  \
             -ffpe-trap=invalid,zero,overflow \
             -ffpe-summary=invalid,zero,overflow \
             -Wall -Wextra -Wline-truncation  -Wuninitialized \
             -Wno-maybe-uninitialized"
    ;;

  fast)
    SUFFIX="fast"
    FFLAGS="${FFLAGS} -O3 -funroll-loops -fomit-frame-pointer -march=native \
             -fexternal-blas"
    ;;

  fast_parallel)
    SUFFIX="fast"
    PARALLEL="true"
    FFLAGS="-O3 -funroll-loops -fomit-frame-pointer -march=native \
             -fexternal-blas"
    ;;

  *) #-- anything else. 
    echo "invalid selection $SELECT specified by -s in paw_build.sh"
    exit 1
    ;;
esac
