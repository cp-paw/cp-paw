#!/bin/bash
###############################################################################
#
#          NAME: paw_scanlat
#
#         USAGE: paw_scanlat options 
#
#       OPTIONS: mandatory: p optional: hlubej0v 
#
#   DESCRIPTION: perform a sequence of paw calculations with different
#                lattice constants or updates data files with its results
#
#       OPTIONS:
#          -h    print this help message
#          -p    rootname of the project to be considered (mandatory)
#          -l    list of percent changes of the lattice constant
#                 (enter in apostrophes such as "98 100 102")
#                default: "96 97 98 99 100 101 102 103 104"
#          -u    updates result data files (no paw simulations)
#          -e    paw_command
#          -j nr. of paw_jobs allowed to run simultaneously
#          -0 dry-run (reconstruct *.dat files only)
#          -v verbose
#
#  prerequisites: nio.cntl 
#                 nio.strc 
#        (nio is to be replaced by the name of the substance )
#
#  performs set of calculations for different lattice constants.
#
#  nio.strc must contain exactly one line containing "LUNIT=" 
#  followed by the lattice constant in atomic units, or "LUNIT[AA]="
#  followed by the lattice constant in angstrom, followed by "!END".
#  this occurrance will be replaced by the varied values for the 
#  individual runs.
#
#  specify k-points in the structure file with !STRUCTURE!KPOINTS:DIV=
#  rather than using R=. Otherwise the k-point grid changes between 
#  different values of lattice constant and the restart file becomes 
#  unusable.
#
#  result       etot.dat 
#               gap.dat
#               murn.in
#
#  Example:
#       paw_scanlat -p nio -j3 -l "96 98 100 102 104" ./si2
#
#   REQUIREMENTS: paw_waittillempty, paw_get, paw_fast.x
#
#         AUTHOR: Peter E. Bloechl; peter.bloechl@tu-clausthal.de
#
#        CREATED: Sept. 2, 2014
#
################################################################################
#==============================================================================
# initialize variables and scan argument list
#==============================================================================
export USAGE="Usage of $0 \n"
USAGE="$USAGE \n"
USAGE="$USAGE \t paw_scanlat options\n"
USAGE="$USAGE \n"
USAGE="$USAGE Options:\n"
USAGE="$USAGE \t -p rootname of the project to be considered (mandatory)\n"
USAGE="$USAGE \t -l list of percent changes of the lattice constant\n"
USAGE="$USAGE \t    (enter in apostrophes \"...\")\n"
USAGE="$USAGE \t     \"96 97 98 99 100 101 102 103 104\"\n"
USAGE="$USAGE \t -u updates result data files (no paw simulations)\n"
USAGE="$USAGE \t -e paw command (default: paw_waittillempty -n 8; paw_fast.x)\n"
USAGE="$USAGE \t -j nr. of paw_jobs allowed to run simultaneously\n"
USAGE="$USAGE \t -0 dry-run (reconstruct *.dat files only)\n"
USAGE="$USAGE \t -v verbose\n"
USAGE="$USAGE \t -h print this help message \n"
USAGE="$USAGE \n"
USAGE="$USAGE preconditions: \n" 
USAGE="$USAGE \t projectname.cntl \n" 
USAGE="$USAGE \t projectname.strc \n" 
USAGE="$USAGE \n"
#
THISDIR=$(pwd)   # current directory
# PAWXDIR is the directory holding the paw executables
export PAWXDIR=$(which paw_fast.x); PAWXDIR=${PAWXDIR%paw_fast.x}
#-------------------------------------------------------------------------------
#  implement dry-run
#-------------------------------------------------------------------------------
function execute(){
    if [[ "$DRYRUN" != yes && "$DRYRUN" != 'no' ]] ; then
      echo "error in $0" >&2
      echo "illegal value '$DRYRUN' of DRYRUN" >&2
      echo "DRYRUN must be either 'yes' or 'no'" >&2
      exit 1
    fi
    if [[ "$VERBOSE" != yes && "$VERBOSE" != 'no' ]] ; then
      echo "error in $0" >&2
      echo "illegal value '$VERBOSE' of VERBOSE" >&2
      echo "VERBOSE must be either 'yes' or 'no'" >&2
      exit 1
    fi
    # || is "or" in [[...]], && is "and" in [[..]] 
    if [[ "${DRYRUN}" = "yes" || "${VERBOSE}" = "yes" ]] ; then
      echo "${@}"
    fi
    if [[ "${DRYRUN}" = "no" ]] ; then
      eval "$@"
      export PID=$!
    fi
}
   #
#-------------------------------------------------------------------------------
#  resolve argument list
#-------------------------------------------------------------------------------
ALATLIST="96 97 98 99 100 101 102 103 104"
DRYRUN=no
VERBOSE=no
UPDATE=no
NJOBS=3
while getopts :h0e:p:l:j:uv OPT ; do
  case $OPT in
    p)
      NAME=$OPTARG
      ;;
    l)
      ALATLIST=$OPTARG
      ;; 
    e)
      PAWCMD=$OPTARG
      ;;
    u)
      UPDATE=yes
      ;;
    j)
      NJOBS=$OPTARG
      ;;
    0)
      DRYRUN=yes
      ;;
    v)
      VERBOSE=yes
      ;;
    h)
      echo -e $USAGE
      ;;
    \?)   # unknown option (placed into OPTARG, if OPTSTRING starts with :)
      echo "error in $0" >&2
      echo "invalid option -$OPTARG" >&2
      echo "retrieve argument list with:" >&2
      echo "$0 -h" >&2
      exit 1
      ;;
    :)    # no argument passed to option requiring one
      echo "error in $0" >&2
      echo "option -$OPTARG requires an additional argument" >&2
      exit 1
      ;;  
  esac
done
shift $(($OPTIND - 1))
if [[ -e $1 ]] ; then echo "error in $0: argument present. none expected" >&2; fi
if [[ -z $NAME ]] ; then
  echo "error in $0: mandatory option -p missing" >&2
  exit 1
fi
#
# when PAWCMD has not been defined via arguments, set default
if [[ -z $PAWCMD ]] ; then
  PAWCMD="paw_waittillempty -n $NJOBS ; paw_fast"
fi
#
#   report setting of variables
#   
if [ $VERBOSE = yes ] ; then
  echo "root name of the project...................: ${NAME}"
  echo "list of percent changes of lattice constant: ${ALATLIST}"
  echo "paw_command................................: ${PAWCMD}"
  echo "dry-run....................................: ${DRYRUN}"
  echo "update.....................................: ${UPDATE}"
  echo "max. nr. of paw jobs running simultaneously: ${NJOBS}"
fi
#
#==============================================================================
# pick out the equilibrium lattice constant from the structure file
#==============================================================================
if [[ -n $(grep 'LUNIT\[AA\]=' $NAME.strc) ]]; then
  X=$(grep -i 'LUNIT\[AA\]=' $NAME.strc)  #pick the line containing LUNIT
  X=${X#*[Ll][Uu][Nn][Ii][Tt]\[[Aa][Aa]\]=}
  AA=$(echo "1. / 0.529177" | bc -l )   # conversion factor into atomic units
else
  X=$(grep 'LUNIT=' $NAME.strc)  #pick the line containing LUNIT
  X=${X#*[Ll][Uu][Nn][Ii][Tt]=}
  AA=$(echo "1." | bc -l )
fi
X=${X%%!END*}
ALAT0=$X
#
#==============================================================================
# loop crystal calculation through different lattic constants                ==
#==============================================================================
if [[ $UPDATE = no ]] ; then
  export PIDS=
  for X in $ALATLIST; do
    if [[ $VERBOSE = yes ]] ; then echo doing $X ; fi 
    #===========================================================================
    # construct structure control file from template by replacing alat
    #===========================================================================
    ALAT=$(echo "$X /100 * $ALAT0 " | bc -l)
    execute "sed \"/[Ll][Uu][Nn][Ii][Tt]/s/${ALAT0}/${ALAT} /g\" ${NAME}.strc >${NAME}_${X}.strc"
    #==========================================================================
    # run paw_fast.x and place data "gap.dat" and "etot.dat"
    #==========================================================================
    execute "cp ${NAME}.cntl ${NAME}_${X}.cntl"
    if [[ ! -e ${NAME}_${X}.rstrt ]] ; then
      if [[ -e ${NAME}.rstrt ]] ; then
        execute "cp ${NAME}.rstrt ${NAME}_${X}.rstrt"
      else
        echo "error in $0: source restart file ${NAME}.rstrt does not exist"
        exit 1
      fi
    fi
    export ROOT=${NAME}_${X}
    export PDIR=${ROOT%/*}   # project directory
    export PNAME=${ROOT##*/} # project name w/o Dir.
    BACK=$(pwd)
    execute "cd ${PDIR}"
    execute "${PAWCMD} ${NAME}_${X}.cntl 1>${NAME}_${X}.out 2>&1 &" 
    PIDS="$PIDS $PID"   # store the project id returned by 'execute'
    execute "cd ${BACK}"
  done
fi
#
#============================================================================
#==  wait until all submitted jobs ($PIDS) are finished
#============================================================================
export NACTIVE=1
while [ ${NACTIVE} -gt 0 ] ; do
  echo No.Jobs=$NACTIVE Date=`date` waiting....
  sleep  1s
  NACTIVE=0
  for X in ${PIDS} ; do
    if [[ -n  $(ps -p $X -o pid= ) ]] ; then  NACTIVE=$(( $NACTIVE + 1 )); fi
  done
done
#
#==============================================================================
# update data files
#==============================================================================
if [[ $UPDATE = yes ]] ; then
  if [[ -e etot.dat ]] ; then rm etot.dat; fi
  if [[ -e gap.dat ]]  ; then rm gap.dat; fi
  if [[ -e murn.in ]]  ; then rm murn.in; fi
  for X in $ALATLIST; do
    if [[ $VERBOSE = yes ]] ; then echo "collecting ${NAME}_$X" ; fi
#    echo ${X} $(paw_get -w gap -u ev -n ${NAME}_${X})  >>gap.dat
    echo ${X} $(paw_get -w etot -u H -n ${NAME}_${X}) >>etot.dat
    ALAT=$(echo "$X /100 * $ALAT0 " | bc -l)
    Y=$(echo "$ALAT * $AA" | bc -l)
    Y=$(echo "$Y * $Y * $Y " | bc -l)
    echo ${Y} $(paw_get -w etot -u H -n ${NAME}_${X}) >>murn.in
    #
    #  clean up
    # 
    if [[ "$DRYRUN" = "no" ]] ; then
      LIST="${NAME}_${X}_constr.report ${NAME}_${X}_r.tra ${NAME}_${X}.pdos \
            ${NAME}_${X}.strc_out "
      for Y in $LIST ; do
        if [[ $VERBOSE = yes ]] ; then echo cleaning $Y ; fi
        if [[ -e $Y ]] ; then rm $Y ; fi
      done
      for Y in ${NAME}_${X}_stpfor*.myxml; do
        if [[ -e $Y ]] ; then rm $Y ; fi
      done
    fi
  done
fi
exit 0
