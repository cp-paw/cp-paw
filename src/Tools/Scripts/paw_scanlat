#!/bin/bash
#  performs set of calculations for different lattice constants 
#  and atomic calculations for all files of ending with "_atom.strc"
#
#  requirement: nio.cntl 
#               nio.strc 
#               ni_atom.strc
#               o_atom.strc
#
#  nio is to be replaced by the name of the substance and 
#  ni and o must be replaced by the corresponding atom ids.
#
#  nio.strc must contain exactly one line containing "LUNIT=" 
#  followed by the lattice constant in atomic units, followed by "!END".
#  this occurrance will be replaced by the varied values for the 
#  individual runs.
#
#  result       etot.dat 
#               gap.dat
#
#==============================================================================
# initialize variables and scan argument list
#==============================================================================
export USAGE="Usage of $0 \n"
USAGE="$USAGE \n"
USAGE="$USAGE \t paw_scanlat options\n"
USAGE="$USAGE \n"
USAGE="$USAGE Options:\n"
USAGE="$USAGE \t -p rootname of the project to be considered (mandatory)\n"
USAGE="$USAGE \t -l list of percent changes of the lattice constant\
              (enter in apostrophes \"...\")\n"
USAGE="$USAGE \t -b directory containing the paw executables (binaries)\n"
USAGE="$USAGE \t -0 dry-run\n"
USAGE="$USAGE \t -h print this help message \n"
USAGE="$USAGE \n"
USAGE="$USAGE preconditions: \n" 
USAGE="$USAGE \t projectname.cntl \n" 
USAGE="$USAGE \t projectname.strc \n" 
USAGE="$USAGE \n"
#
THISDIR=`pwd`   # current directory
# PAWXDIR is the directory holding the paw executables
export PAWXDIR=$(which paw_fast.x); PAWXDIR=${PAWXDIR%paw_fast.x}
#
#-------------------------------------------------------------------------------
#  resolve argument list
#-------------------------------------------------------------------------------
EXECTBLE=paw_fast.x
ALATLIST="96 97 98 99 100 101 102 103 104"
DRYRUN=no
VERBOSE=no
while getopts :h0b:p:l:v OPT ; do
  case $OPT in
    p)
      NAME=$OPTARG
      ;;
    l)
      ALATLIST=$OPTARG
      ;; 
    e)
      EXECTBLE=$OPTARG
      ;;
    b)
      PAWXDIR=$OPTARG
      ;;
    0)
      DRYRUN=yes
      ;;
    v)
      VERBOSE=yes
      ;;
    h)
      echo -e $USAGE
      ;;
    \?)   # unknown option (placed into OPTARG, if OPTSTRING starts with :)
      echo "error in $0" >&2
      echo "invalid option -$OPTARG" >&2
      echo "retrieve argument list with:" >&2
      echo "$0 -h" >&2
      exit 1
      ;;
    :)    # no argument passed to option requiring one
      echo "error in $0" >&2
      echo "option -$OPTARG requires an additional argument" >&2
      exit 1
      ;;  
  esac
done
shift $(($OPTIND - 1))
if [ -n $1 ] ; then echo "error in $0: argument present. none expected" >&2; fi
if [ -z $NAME ] ; then
  echo "error in $0: mandatory option -p missing" >&2
  exit 1
fi
#
#   report setting of variables
#   
if [ $VERBOSE = yes ] ; then
  echo "root name of the project...................: ${NAME}"
  echo "list of percent changes of lattice constant: ${ALATLIST}"
  echo "executable.................................: $EXECTBLE"
  echo "Directory with holding executable..........: ${PAWXDIR}"
  echo "dry-run....................................: ${DRYRUN}"
fi
#
#
#==============================================================================
# pick out the equilibrium lattice constant from the structure file
#==============================================================================
X=`grep 'LUNIT=' $NAME.strc`  #pick the line containing LUNIT
X=${X#*LUNIT=}
X=${X%%!END*}
ALAT0=$X
#
#==============================================================================
# loop crystal calculation through different lattic constants                ==
#==============================================================================
if [ -e etot.dat ] ; then rm etot.dat; fi
if [ -e gap.dat ]  ; then rm gap.dat; fi
for X in $ALATLIST; do
 if [$VERBOSE = yes ] ; then echo doing $X ; fi
  #============================================================================
  # construct structure control file from template by replacing lattice constant
  #============================================================================
  ALAT=`echo "$X /100 * $ALAT0 " | bc -l`
  sed "s/${ALAT0}/${ALAT} /g" ${NAME}.strc >${NAME}_${X}.strc
  #============================================================================
  # run paw_fast.x and place data "gap.dat" and "etot.dat"
  #============================================================================
  cp ${NAME}.cntl ${NAME}_${X}.cntl
  if [ "$DRYRUN" = "no" ] ; then
    #if [ -e ${NAME}_${X}.prot ] ; then rm ${NAME}_${X}.prot; fi
    if [$VERBOSE = yes ] ; then
      echo "${PAWXDIR}/$EXECTBLE ${NAME}_${X}.cntl 1>${NAME}_${X}.out 2>&1"
    fi
    ${PAWXDIR}/$EXECTBLE ${NAME}_${X}.cntl 1>${NAME}_${X}.out 2>&1 
  else
    echo "rm ${NAME}_${X}.prot"
    echo "${PAWXDIR}/$EXECTBLE ${NAME}_${X}.cntl 1>${NAME}_${X}.out 2>&1"
  fi
  echo ${X} $(paw_get -gap -n ${NAME}_${X})  >>gap.dat
  echo ${X} $(paw_get -etot -n ${NAME}_${X}) >>etot.dat
  #
  #  clean up
  # 
  LIST="${NAME}_${X}_constr.report ${NAME}_${X}_r.tra ${NAME}_${X}.pdos \
        ${NAME}_${X}.strc_out "
  for Y in $LIST ; do
    if [ $VERBOSE = yes ] ; then echo cleaning $Y ; fi
    if [ -e $Y ] ; then rm $Y ; fi
  done
  rm ${NAME}_${X}_stpfor*.myxml
done
exit
