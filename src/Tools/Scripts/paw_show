#!/bin/bash
###################################################################
##                                                               ##
##  name: paw_show                                               ##
##                                                               ##
##  purpose: pulls out columns from the paw protocoll            ##
##                                                               ##
##  usage:                                                       ##
##    pawshow option rootname [outfile]                          ##
##                                                               ##
##  options:                                                     ##
##     -h       help                                             ##
##     -e       static total energy                              ##
##     -t       atomic temperature                               ##
##     -c       constant energy (constant of motion)             ##
##     -f       fictitios kinetic energy of the wave functions   ##
##     -a type: friction                                         ##
##         type=r   friction acting on nuclei                    ##
##         type=p   friction acting on wave functions            ##
##                                                               ##
##  dpendency:                                                   ##
##    uses xmgr as plotting routine                              ##
##                                                               ##
###################################################################
USAGE="
usage: pawshow option rootname [outfile]\n
1)rootname  is paw protocol file name without the .prot ending
2)option (exactly one must be given) can be one of the following
\t -h: give info about use
\t -u unit: unit selection (must preceed quantity selection!)
\t\t unit=ev|kj/mol/kcal/mol|h
\t -e: plot static total energy
\t -t: plot temperature in kelvin
\t -c: plot conserved energy
\t -f: plot fictitious kinetic wave function energy
\t -a: type: plot friction 
\t\t     type=p: phi
\t\t     type=r: atoms
3) optional argument outfile: redirects output into file outfile
\t if this argument is absent, output is shown with xmgrace
\n"
# use the following for qm-mm calculations:\n
# \t -qe: plot static total energy of the environmet\n
# \t -qc: plot conserved energy of the environment\n
# \t -qt: plot temperature in kelvin of the environment\n
# \t -tqt: both temperatures\n
# \t -cqc: both conserved energies\n
#===================================================================
#  resolve argument list                                          ==
#===================================================================
EUNIT=1.
AWKSTRING=""
while getopts :hetfca:u: OPT ; do
  case $OPT in 
    u) #unit
       case $OPTARG in
         ev) 
             EUNIT=$(echo "$EUNIT * 27.211" | bc -l)
             ;;
         kj/mol) 
             EUNIT=$(echo "$EUNIT * 0.0003808798" | bc -l)
             ;;
         kcal/mol) 
             EUNIT=$(echo "$EUNIT * 0.001593601" | bc -l)
             ;;
         h)  
             ;;
         *) echo "error in $0: argument $OPTARG not for -u recognized" >&2
            exit 1
            ;;
       esac
       ;;
    t) AWKSTRING="$AWKSTRING \" \" \$4 " ;; # temperature (Kelvin)
    f) AWKSTRING="$AWKSTRING \" \" \$5 " ;; # fict. kinetic energy
    e) AWKSTRING="$AWKSTRING \" \" \$6 * $EUNIT " ;; # static total energy
    c) AWKSTRING="$AWKSTRING \" \" \$7 * $EUNIT " ;; # conserved energy
    a) #friction
       case $OPTARG in
         p) AWKSTRING="$AWKSTRING \" \" \$8" ;; # wave functions
         r) AWKSTRING="$AWKSTRING \" \" \$9" ;; # atomic positions
         *) echo "error in $0: argument $OPTARG not recognized" >&2
            exit 1
            ;;
       esac
       ;;
    h) 
       echo -e "$USAGE"
       ;;
    \?) # unknown option
       echo "error in $0: invalid option -$OPTARG" >&2
       echo "retrieve argument list with:" >&2
       echo "$0 -h" >&2
       exit 1
       ;;
    :)    # no argument passed to option requiring one
       echo "error in $0" >&2
       echo "option -$OPTARG requires an additional argument" >&2
       exit 1
       ;;  
  esac
done
shift $(($OPTIND - 1))
#
ROOT=$1
if [[ -z $ROOT ]] ; then
  echo "error in $0: argument ROOT not specified" >&2
  exit 1
fi
OUT=$2
#
#===================================================================
#  make a temporary file
#===================================================================
# check if environment variable TMPDIR is set
if [[ -z ${TMPDIR} ]] ; then TMPDIR=/tmp ; fi
if [[ ! -d ${TMPDIR} ]] ; then
  echo "error in $0: temp directory does not exist"
  echo "TMPDIR=$TMPDIR"
  exit 1
fi
TMPFILE=$(mktemp ${TMPDIR}/pawshowfile.XXXXXX)
RC=$?
if [[ $RC -ne 0 ]]; then
  echo "error in $0: Can't create temp file, exiting..."
  exit 1
fi
#
#===================================================================
#  extract data from protocoll file                               ==
#===================================================================
AWKSTRING="{print \$3 $AWKSTRING}"
grep "!>" ${ROOT}.prot | sed 's/!>/!> /1' \
                       | sed 's/-/ -/g' \
                       | awk "$AWKSTRING" \
                       > ${TMPFILE}
#
#===================================================================
#  print or present via xmgrace
#===================================================================
if [[ -n $OUT ]] ; then
  cp ${TMPFILE} $OUT
else
  xmgrace -free -noask -nxy ${TMPFILE}
fi
rm ${TMPFILE}
exit 0




