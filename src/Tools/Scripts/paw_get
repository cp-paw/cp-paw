#!/bin/bash
############################################################################
#
#  command: paw_get 
#
#  instances: paw_get_energy|paw_get_gap|paw_get_homo|paw_get_lumo
#
#  extracts the last value for etot|gap|homo|lumo from the specified
#  protocoll file and prints either text or number
#
#  Remark: when changing this command change all instances!
#
############################################################################
#
#  set up help message $USAGE
#
export USAGE="\n"
USAGE="$USAGE Usage of $0:\n"
USAGE="$USAGE \t paw_get-energy options rootname\n"
USAGE="$USAGE extracts data from file rootname.prot\n"
USAGE="$USAGE Options \n"
USAGE="$USAGE \t -w whatid\n"
USAGE="$USAGE \t\t whatid=etot  \t prints total energy in Hartree (default)\n"
USAGE="$USAGE \t\t whatid=gap   \t prints fundamental band gap in eV\n"
USAGE="$USAGE \t\t whatid=efermi\t prints fermi level eV\n"
USAGE="$USAGE \t\t whatid=homo  \t prints energy of the highest occupied \
                                          state in eV\n"
USAGE="$USAGE \t\t whatid=lumo  \t prints energy of the lowest unoccupied \
                                          state in eV\n"
USAGE="$USAGE \t -n   prints the result as number (levels in eV, total \
                            energies in Hartree)\n"
USAGE="$USAGE \t -t   prints the result as text (default)\n"
USAGE="$USAGE \t -v   verbose\n"
USAGE="$USAGE \t -h   prints this help message\n"
#
#  resolve input arguments
#  $TN is "T" fort text output and "N" for number output
#
export TN=T
export WHATID="etot"
export VERBOSE=no
while getopts :hw:tnp:v OPT ; do
  case $OPT in 
    w)
      WHATID="$OPTARG"
      ;;
    n) 
      TN=N
      ;;
    t)
      TN=T
      ;;
    v)
      VERBOSE=yes
      ;;
    h)
      echo -e $USAGE
      ;;
    \?)   # unknown option (placed into OPTARG, if OPTSTRING starts with :)
      echo "error in $0" >&2
      echo "invalid option -$OPTARG" >&2
      echo "retrieve argument list with:" >&2
      echo "$0 -h" >&2
      exit 1
      ;;
    :)    # no argument passed to option requiring one
      echo "error in $0" >&2
      echo "option -$OPTARG requires an additional argument" >&2
      exit 1
      ;;  
  esac
done
shift $(($OPTIND - 1))
ROOT=$1
#
#   scan for allowed values of WHATID
#
case $WHATID in
  etot)
    WHAT="TOTAL ENERGY"
    ;;
  gap)
    WHAT="ABSOLUTE GAP"
    ;;
  homo)
    WHAT="HOMO-ENERGY" 
    ;;
  lumo)
    WHAT="LUMO-ENERGY" 
    ;;
  efermi)
    WHAT="CHEMICAL POTENTIAL" 
    ;;
  *)
    echo "error in $0: illegal argument $WHATID of option -w" >&2
    exit 1
    ;;
esac
#
# is rootname defined
#
if [ -z $ROOT ]; then
  echo error: missing argument. specify root name of the paw_project
  exit 1
fi
#
# report input variables
#
if [ $VERBOSE = yes ] ; then
  echo WHATID..................: $WHATID
  echo WHAT....................: $WHAT
  echo PROJECT NAME............: $ROOT
  echo VERBOSE.................: $VERBOSE
  echo text or numerical output: $TN
fi
#
# Does protocoll file exist?
#
if [ ! -e $ROOT.prot ]; then
  echo "error in $0: protocoll file does not exist" >&2
  echo "specified protocoll file: $ROOT.prot" >&2
  exit 1
fi
export RESULT=`grep "$WHAT" $ROOT.prot | tail -n1 | awk -F: '{print $2}' `
#
#  correction for mermin vs. non-mermin output
#
if [ -z  "$RESULT" ] ; then
  if test  "$WHAT" = "CHEMICAL POTENTIAL"  ; then 
    export WHAT1="HOMO-ENERGY" 
    export RESULT1=`grep "$WHAT1" $ROOT.prot | tail -n1 | awk -F: '{print $2}' `
    RESULT1=${RESULT1%EV*}
    export WHAT2="LUMO-ENERGY" 
    export RESULT2=`grep "$WHAT2" $ROOT.prot | tail -n1 | awk -F: '{print $2}' `
    RESULT2=${RESULT2%EV*}
    RESULT=$(echo " scale=5; ( $RESULT1 + $RESULT2 ) / 2 " | bc)
    RESULT="$RESULT EV"  
    if [ -z $RESULT1 ] ; then RESULT='';  fi
    if [ -z $RESULT2 ] ; then RESULT='';  fi
  elif test  "$WHAT" = "HOMO-ENERGY" ; then
    export WHAT1="CHEMICAL POTENTIAL" 
    export RESULT=`grep "$WHAT1" $ROOT.prot | tail -n1 | awk -F: '{print $2}' `
  elif test  "$WHAT" = "LUMO-ENERGY" ; then
    export WHAT1="CHEMICAL POTENTIAL" 
    export RESULT=`grep "$WHAT1" $ROOT.prot | tail -n1 | awk -F: '{print $2}' `
  fi
fi

#
#  test if result is non-empty
#
if [ -z  "$RESULT" ] ; then
  echo error in $0: no result found in $ROOT.prot
  exit 1
fi
#
#  switch between number and text output and edit result
#
case $TN in
  N) 
    RESULT=${RESULT%H*}
    RESULT=${RESULT%EV*}
    ;;
  *) 
    RESULT=`echo "$WHAT = $RESULT for $ROOT"`
    ;;
esac
#
#  report result
#
echo $RESULT
exit 0
