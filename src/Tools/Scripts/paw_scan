#!/bin/bash 
###############################################################################
#
#          NAME: paw_scan
#
#         USAGE: paw_scan1 options preroot
#
#       OPTIONS: -run, -eels, -dos, -dosplot, -wrapup, --dry-run
#
#   DESCRIPTION:
#
#   a series of files specified by -f 
#   is converted by the replacement rule specified by -r
#   and copied into their own directory. 
#   the executable specified by -x in directory specified by -b is executed
#   in each directory with the corresponding control file.
#   preroot contains the relative or absolute path of the projects
#   including the common part of the rootname. The complete rootname
#   will be constructed by appending the corresponding parameter
#   separated by an underscore. preroot must contain at least one slash.
#   Use ./string if run in the local directory.
#
#   REQUIREMENTS: doppaw, paw_resolve, waittillempty, paw_get
#                  paw_dos.x, paw_dosplot.x, gracebat
#
#         AUTHOR: Peter E. Bloechl; peter.bloechl@tu-clausthal.de
#
#        CREATED: Dec. 15, 2013
#
###############################################################################
#-------------------------------------------------------------------------------
# help message
#-------------------------------------------------------------------------------
export USAGE="Usage of $0 \n"
USAGE="$USAGE \n"
USAGE="$USAGE \tpaw_scan options SRCROOT\n"
USAGE="$USAGE \n"
USAGE="$USAGE Options:\n"
USAGE="$USAGE \t -h \t print this help message \n"
USAGE="$USAGE \t -r \"name value1 value2 ...\" replacement rule \n"
USAGE="$USAGE \t -w whatid \n"
USAGE="$USAGE \t\t whatid=eels make EELS data \n"
USAGE="$USAGE \t\t whatid=dos make Density of States \n"
USAGE="$USAGE \t\t whatid=dosplot make xmgrace batch file for Density \
                                  of States plots\n"
USAGE="$USAGE \t\t whatid=wrapup: make files with etot,homo,lumo,gap\n"
USAGE="$USAGE \t -n NN submit with $NN processes in parallel\n"
USAGE="$USAGE \t -m hostname: limit execution to the specified host\n"
USAGE="$USAGE \t -0: dry-run\n"
USAGE="$USAGE \t -b: directory containing the paw executables\n"
USAGE="$USAGE \n"
USAGE="$USAGE PREROOT is the common part of the root name for all projects.\n"
USAGE="$USAGE The root names of individual projects will be formed as\n "
USAGE="$USAGE ROOT=BASIS/PRENAME_NAME/PRENAME_NAME.\n"
USAGE="$USAGE where PRENAME is PREROOT stripped of the directory part\n"
USAGE="$USAGE and BASIS is the directory part of PREROOT.\n"
USAGE="$USAGE \n"
USAGE="$USAGE prepare the following files:\n"
USAGE="$USAGE BASIS/Samples/PRENAME.cntl_start\n"
USAGE="$USAGE BASIS/Samples/PRENAME.cntl_run\n"
USAGE="$USAGE BASIS/Samples/PRENAME.cntl_eels\n"
USAGE="$USAGE BASIS/Samples/PRENAME.strc_run\n"
USAGE="$USAGE BASIS/Samples/PRENAME.dcntl\n"
USAGE="$USAGE BASIS/Samples/dosplot.dpcntl\n"
USAGE="$USAGE BASIS/Samples/addeels.f90\n"
USAGE="$USAGE addeels.f90 is a fortran code that sums up the EELS data"
USAGE="$USAGE as desired.\n"
USAGE="$USAGE during start, the _X will be stripped from !ORBPOT_X.\n"
USAGE="$USAGE If there is a restart file BASIS/PRENAME.rstrt,\n"
USAGE="$USAGE it will be used before starting from scratch\n"
USAGE="$USAGE \n"
#-------------------------------------------------------------------------------
#  individual data
#-------------------------------------------------------------------------------
# name of the bin directory holding the executable ppaw_fast.x or paw_fast.x
# name do not allow any trailing blanks in PAWXDIR!
THISDIR=$(pwd)
export NNODES=0       # number of nodes / scalar with NNODES=0
export NCOREPERNODE=2  # number of cores per node (2)
export PAWXDIR=$(which paw_fast.x); PAWXDIR=${PAWXDIR%paw_fast.x}
export SELECTEDHOST=""
export DRYRUN=no
export VERBOSE=no
#-------------------------------------------------------------------------------
#  resolve argument list
#-------------------------------------------------------------------------------
while getopts :hv0w:r:b:x:n:m:f: OPT  ; do
  case $OPT in
    r)
      RULE="$OPTARG"
      PAR1NAME=""
      PAR1VALS=""
      for X in $RULE ; do
        if [ -z $PAR1NAME ] ; then
          PAR1NAME=${X}
        else
          PAR1VALS="$PAR1VALS $X"
        fi
      done
      ;;
    w)   # run|eels|dos|wrapup|dosplot) 
      TODO=$OPTARG
      ;;
    f)
      FILES="$FILES $OPTARG"
      ;;
    n)
      NNODES=$OPTARG
      ;;
    m)
      SELECTEDHOST=$OPTARG
      ;;
    b)
      PAWXDIR=$OPTARG
      ;;
    0)
      DRYRUN=yes
      ;;
    v)
      VERBOSE=yes
      ;;
    h)
      echo -e $USAGE
      ;;
    \?)   # unknown option (placed into OPTARG, if OPTSTRING starts with :)
      echo "error in $0" >&2
      echo "invalid option -$OPTARG" >&2
      echo "retrieve argument list with:" >&2
      echo "$0 -h" >&2
      exit 1
      ;;
    :)    # no argument passed to option requiring one
      echo "error in $0" >&2
      echo "option -$OPTARG requires an additional argument" >&2
      exit 1
      ;;  
  esac
done
shift $(($OPTIND - 1))
SRCROOT=$1
#  Directory containing all subprojects relative to THISDIR
#BASIS=${SRCROOT%/*} 
#SRCNAME=${PREROOT##*/}   # e.g. pmo,cmo,pcmo etc
#===================================================================
# check arguments
#===================================================================
if [ -z $TODO ] ; then 
  echo "error in $0: option -w not specified" >&2
  exit 1
fi
#
case $TODO in 
  run)
   ;;
  *)
    echo "error in $0: illegal argument $WHATID of option -w" >&2
    exit 1
    ;;
esac
#
if [ -z $PAR1NAME ] ; then 
  echo  "error in $0: missing or incomplete argument -r" >&2
  echo  "rule=$RULE" >&2
  echo  "PAR1NAME=$PAR1NAME" >&2
  echo  "PAR1VALS=$PAR1VALS" >&2
  exit
fi
if [ -z $TODO ] ; then 
  echo -e "error in $0: missing argument -w"
  exit
fi
if [ -z $SRCROOT ] ; then 
  echo "error in $0: missing argument SRCROOT" >&2
  exit
fi
# run only on selected host
if [ -n $SELECTEDHOST ] ; then 
  if [ ${HOSTNAME%%.*} != $SELECTEDHOST ] ; then
    if [ $DRYRUN = no ] ; then
      echo "error in $0: not on $SELECTEDHOST" >&2
      echo "actual host name: ${HOSTNAME%%.*}" >&2
      exit 1
    fi
  fi
fi
#
case $TODO in
  fast|run)
    EXECTBLE=paw_fast.x
    CNTL=cntl
    ;;
  dos)
    EXECTBLE=paw_dos.x
    CNTL=dcntl
    ;;
  *) 
    echo "error in $0: illegal value $TODO for TODO" >&1
    exit 1
    ;;
esac
EXECTBLE=$PAWXDIR/$EXECTBLE
#-------------------------------------------------------------------------------
#    report arguments
#-------------------------------------------------------------------------------
SRCNAME=${SRCROOT##*/}
SRCDIR=${SRCROOT%/*}
if [ $VERBOSE = yes ] ; then
  echo ========================================================
  echo "TODO........: $TODO"
  echo "SRCROOT.....: $SRCROOT"
  echo "SRCNAME.....: $SRCNAME"
  echo "SRCDIR......: $SRCDIR"
  echo "FILES.......: $FILES"
  echo "PAR1NAME....: $PAR1NAME"
  echo "PAR1VALS....: $PAR1VALS"
  echo "executable..: $EXECTBLE"
  echo "control file: $CNTL"
  echo "HOSTNAME....: $HOSTNAME"
  echo "========================================================"
fi
#
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#    initialize: make directories and copy files
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
for PAR1VAL in $PAR1VALS; do
  TARGETNAME=${SRCNAME}'_'${PAR1VAL}
  TARGETDIR=${SRCDIR}/${TARGETNAME}
  TARGETROOT=${TARGETDIR}/$TARGETNAME
  if [ $VERBOSE = yes ] ; then
    echo "========================================================"
    echo "parval.......: ${PAR1VAL}"
    echo "targetname...: ${TARGETNAME}"
    echo "targetroot...: ${TARGETROOT}"
    echo "targetdir....: ${TARGETDIR}"
  fi
  #
  # create target directory
  #
  if [ ! -d $TARGETDIR ] ; then mkdir $TARGETDIR; fi
  #
  #
  for EXT in $FILES; do
     SOURCE=${SRCROOT}.$EXT
     TARGET=${TARGETROOT}.$EXT
     if [ ! -e ${SOURCE} ]; then 
       echo "error in $0: missing file ${SOURCE}" >&2; exit 1
     fi
     #
     # copy if target does not exist or is older than source
     #
     if [ ! -e ${TARGET}  -o  ${TARGET} -ot ${SOURCE} ] ; then
       echo copying file into $TARGET
       paw_resolve -r ${PAR1NAME}=$PAR1VAL \
                   -r NAME=$NAME ${SOURCE} > ${TARGET}
       RC=$?
       if [ $RC -ne 0 ] ; then
         echo "error in $0: paw_resolve failed to expand ${SOURCE}" >&2
         exit 1
       fi
     fi
  done
  #
  #   copy restart file
  #
  SOURCE=${SOURCEROOT}.rstrt  
  TARGET=${TARGETROOT}.rstrt  
  if [ ! -e ${TARGET} ]; then  # copy only if target does not exist
    if [ -e ${SOURCE} ] ; then # copy only if source exists
      echo copying file into ${TARGET}
      cp ${SOURCE} ${TARGET}
      echo 'restart file copied...' `date`
    fi
  fi
  #
  # EXECUTE
  #
  if [ $VERBOSE = yes ] ; then 
    echo "cd $TARGETDIR"
    echo "$EXECTBLE $CNTL 1>out 2>&1"
    echo "cd $THISDIR"
  fi
  if [ $DRYRUN = no ] ; then 
    cd $TARGETDIR
    waittillempty
    $EXECTBLE ${TARGETNAME}.$CNTL 1>out 2>&1 &
    cd $THISDIR
  fi
done
exit 0
