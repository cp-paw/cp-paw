!     ..................................................................
!     ******************************************************************
!     **  WRITTEN BY JOHANNES SCHIMPL AND CLEMENS FOERST IN 2002      **
!     ******************************************************************
      PROGRAM STRC2XYZ
      USE LINKEDLIST_MODULE
      USE STRINGS_MODULE
      IMPLICIT NONE
      TYPE(LL_TYPE)               :: LL_STRC
      INTEGER(4)                  :: NFIL,I,NAT
      LOGICAL                     :: TSTRCOUT=.FALSE.
      REAL(8)                     :: ANGSTROM
      CHARACTER(128)              :: ROOTNAME     ! COMMON ROOT OF THE FILENAMES
      CHARACTER(128)              :: OBJECTNAME
      LOGICAL                     :: TCHK
      REAL(8)                     :: RUNIT        ! LENGTH UNIT ON STRUCTURE FILE
      REAL(8)                     :: RBAS(3,3)    ! LATTICE VECTORS
      CHARACTER(32),ALLOCATABLE   :: NAME(:)      ! ATOM NAMES
      REAL(8),      ALLOCATABLE   :: R(:,:)       ! ATOMIC POSITIONS
      REAL(8),      ALLOCATABLE   :: Q(:)         ! CHARGES
      CHARACTER(32),ALLOCATABLE   :: MMNAME(:)      ! ATOM NAMES
      REAL(8),      ALLOCATABLE   :: MMR(:,:)       ! ATOMIC POSITIONS FOR MM PART OF QM-MM
      REAL(8),      ALLOCATABLE   :: MMQ(:)       ! ATOMIC CHARGES MM PART OF QM-MM
      REAL(8),      ALLOCATABLE   :: RSH(:,:)       ! ATOMIC POSITIONS FOR SHADOW PART OF QM-MM
      INTEGER(4),   ALLOCATABLE   :: NEIGH(:,:)   ! NEIGHBOR LIST
      LOGICAL(4)                  :: TQMMM
      REAL(8)                     :: SVAR,DIST
      INTEGER(4)                  :: IAT,IAT1,JAT,DIR(3)
      CHARACTER(32)               :: STRING
      INTEGER(4)                  :: IARGC,MX,MY,MZ,IX,IY,IZ,IARG

      LOGICAL(4)                  :: TFORMAT=.TRUE.
      LOGICAL(4)                  :: TSHIFT=.FALSE. !DOES NOT WORK
      REAL(8),     ALLOCATABLE    :: R_NEW(:,:)
      REAL(8)                     :: SHIFTDIR(3)
!     ******************************************************************
      EXTERNAL IARGC

      STOP 'THIS VERSION SHOULD NOT BE USED ANY MORE, SEE /FIJI/JSCHIMPL/FORTRAN/STRC'

      CALL LINKEDLIST$NEW(LL_STRC)
!
!     ==================================================================
!     == GET FILE NAME ROOT FROM THE ARGUMENT LIST AND CONSTRUCT      ==
!     == FILE NAMES                                                   ==
!     ==================================================================
      CALL GETARG(1,ROOTNAME)
      IF(ROOTNAME(1:1).EQ.'-') THEN
        IF(+ROOTNAME(2:2).EQ.+'O') THEN
          TSTRCOUT=.TRUE.
        ELSE
          WRITE(0,'("STRC2XYZ CONVERTS THE STRUCTURE FILE OF THE PAW-INPUT (STRC) TO AN XYZ FILE")')
          WRITE(0,*)
          WRITE(0,'("USAGE: STRC2XYZ [OPTION] ROOTNAME [MX MY MZ]")')
          WRITE(0,*)
          WRITE(0,'("  OPTION: -O : USE STRC_OUT FOR GENERATING THE XYZ FILE")')
          WRITE(0,'("  MX,MY,MZ: MULTIPLY THE UNIT CELL INTO DIRECTIONS X,Y AND Z")')
          STOP
        END IF
        CALL GETARG(2,ROOTNAME)
      END IF
!CLEMENS
      IF (IARGC().GT.2) THEN
        I=0
        IF (TSTRCOUT) I=1
        CALL GETARG(2+I,STRING)
        READ(STRING,'(I4)') MX
        IF (MX.LT.1) MX=1
        CALL GETARG(3+I,STRING)
        READ(STRING,'(I4)') MY
        IF (MY.LT.1) MY=1
        CALL GETARG(4+I,STRING)
	READ(STRING,'(I4)') MZ
	IF (MZ.LT.1) MZ=1
        WRITE(*,"(' UNIT CELL WILL BE REPEATIED INTO DIRECTIONS X,Y,Z: ',3I3,' TIMES')") &
             MX,MY,MZ
     ELSE
	MX=1
	MY=1
	MZ=1
      END IF
!END CLEMENS

      IF(LEN(TRIM(ROOTNAME)).EQ.0) THEN
         ROOTNAME=-'CASE'
      END IF
      I=INDEX(ROOTNAME,'/',BACK=.TRUE.)
      OBJECTNAME=ROOTNAME(I+1:)
      CALL FILEHANDLER$SETROOT(ROOTNAME)
      IF(TSTRCOUT) THEN
         PRINT*,'USING THE .STRC_OUT FILE'
         CALL FILEHANDLER$SETFILE('STRC',.TRUE.,-'.STRC_OUT')
      ELSE
         PRINT*,'USING THE STRC FILE'
         CALL FILEHANDLER$SETFILE('STRC',.TRUE.,-'.STRC')
      END IF
      CALL FILEHANDLER$SETSPECIFICATION('STRC','STATUS','OLD')
      CALL FILEHANDLER$SETSPECIFICATION('STRC','POSITION','REWIND')
      CALL FILEHANDLER$SETSPECIFICATION('STRC','ACTION','READ')
      CALL FILEHANDLER$SETSPECIFICATION('STRC','FORM','FORMATTED')
      CALL FILEHANDLER$SETFILE('XYZ',.TRUE.,-'.XYZ')
      CALL FILEHANDLER$SETSPECIFICATION('XYZ','STATUS','UNKNOWN')
      CALL FILEHANDLER$SETSPECIFICATION('XYZ','POSITION','REWIND')
      CALL FILEHANDLER$SETSPECIFICATION('XYZ','ACTION','WRITE')
      CALL FILEHANDLER$SETSPECIFICATION('XYZ','FORM','FORMATTED')
!
!     ==================================================================
!     == READ STRUCTURE FILE                                          ==
!     ==================================================================
      CALL FILEHANDLER$UNIT('STRC',NFIL)
      CALL LINKEDLIST$READ(LL_STRC,NFIL)
!
!     ==================================================================
!     == GET CONVERSION FACOTOR                                       ==
!     ==================================================================
      CALL CONSTANTS('ANGSTROM',ANGSTROM)
      CALL LINKEDLIST$SELECT(LL_STRC,'~')
      CALL LINKEDLIST$SELECT(LL_STRC,'STRUCTURE')
      CALL LINKEDLIST$SELECT(LL_STRC,'GENERIC')
      CALL LINKEDLIST$GET(LL_STRC,'LUNIT',1,RUNIT)
!
!     ==================================================================
!     == GET LATTICE VECTORS                                          ==
!     ==================================================================
      CALL LINKEDLIST$SELECT(LL_STRC,'~')
      CALL LINKEDLIST$SELECT(LL_STRC,'STRUCTURE')
      CALL LINKEDLIST$SELECT(LL_STRC,'LATTICE')
      CALL LINKEDLIST$GET(LL_STRC,'T',1,RBAS)
      RBAS=RBAS*RUNIT
!
!     ==================================================================
!     ==  READ ATOM DATA FROM STRC FILE                               ==
!     ==================================================================
      CALL LINKEDLIST$SELECT(LL_STRC,'~')
      CALL LINKEDLIST$SELECT(LL_STRC,'STRUCTURE')
      CALL LINKEDLIST$NLISTS(LL_STRC,'ATOM',NAT)
      ALLOCATE(NAME(NAT))
      ALLOCATE(R(3,NAT))
      ALLOCATE(NEIGH(8,NAT))
      NEIGH=0
      DO IAT=1,NAT
        CALL LINKEDLIST$SELECT(LL_STRC,'ATOM',IAT)
        CALL LINKEDLIST$GET(LL_STRC,'R',1,R(:,IAT))
        R(:,IAT)=R(:,IAT)*RUNIT
        CALL LINKEDLIST$GET(LL_STRC,'NAME',1,NAME(IAT))
        CALL LINKEDLIST$SELECT(LL_STRC,'..')
      ENDDO
!
!     ==================================================================
!     == CONVERT DATA TO ANGSTROM                                     ==
!     ==================================================================
      RBAS=RBAS/ANGSTROM
      R=R/ANGSTROM

!
!     ==================================================================
!     == CHECK THE DISTANCE BETWEEN ATOMS IN ONE UNIT-CELL            ==
!     == CHECK THE NAMES OF THE ATOMS                                 ==
!     ==================================================================
      DO IAT=1,NAT
         DO JAT=IAT+1,NAT
            SVAR=SQRT(SUM((R(:,IAT)-R(:,JAT))**2))
            IF(SVAR.LT.0.5D0) WRITE(*,"('WARNING: ATOM  ',A,'  AND  ',A, '  ARE" &
     &            //"TOO CLOSE. DISTANCE: ',F10.5,' ANG.')") & 
                 TRIM(NAME(IAT)),TRIM(NAME(JAT)),SVAR
            IF(TRIM(NAME(IAT)).EQ.TRIM(NAME(JAT))) WRITE(*,"('WARNING: THE ATOM" & 
     &           //"NAME ',A,' IS USED FOR TWO ATOMS, WICH IS NOT ALLOWED!')")& 
                 TRIM(NAME(IAT))
         END DO
      END DO
      CALL NEXTDIST(NAT,R,RBAS,0,DIST,IAT,JAT,DIR)
      IF(IAT.EQ.-2) PRINT*,'THIS IS DUE TO STRANGE COMPILER BEHAVIOUR!'
      WRITE(*,"('CLOSEST ATOMS BETWEEN THE PERIODIC IMAGES ARE ATOMS ',A,' AND ',A," &
     &     //"' INTO DIRECTION ',3I3,' WITH DISTANCE: ',F8.3,' ANG')")&
           TRIM(NAME(IAT)),TRIM(NAME(JAT)),DIR(1:3),DIST
!
!     ==================================================================
!     == TRANSLATE ATOMS TO LARGEST DISTANCE - DOES NOT WORK          ==
!     ==================================================================
      ALLOCATE(R_NEW(3,NAT))
      R_NEW=R
      IF(TSHIFT) THEN
         SHIFTDIR=-MATMUL(RBAS,REAL(DIR(1:3)))+R(:,IAT)-R(:,JAT)
         DIST=SQRT(SUM(SHIFTDIR**2))
         PRINT*,'DIST= ',DIST,' ANG'
         SHIFTDIR=SHIFTDIR/DIST
         DO IAT=1,NAT
            R_NEW(:,IAT)=R_NEW(:,IAT)+0.2*SHIFTDIR
         END DO

         CALL NEXTDIST(NAT,R_NEW,RBAS,0,DIST,IAT,JAT,DIR)
         IF(IAT.EQ.-2) PRINT*,'THIS IS DUE TO STRANGE COMPILER BEHAVIOUR!'
         WRITE(*,"('CLOSEST ATOMS BETWEEN THE PERIODIC IMAGES ARE ATOMS ',A,' AND ',A,"&
     &        //"' INTO DIRECTION ',3I3,' WITH DISTANCE: ',F8.3,' ANG')") &
              TRIM(NAME(IAT)),TRIM(NAME(JAT)),DIR(1:3),DIST

         STOP
      END IF
!
!     ==================================================================
!     == WRITE FORMATTED BLOCK WITH ATOM POSITIONS                    ==
!     ==================================================================
      IF(TFORMAT) THEN
         DO IAT=1,NAT
            WRITE(*,'(A,A,T22,A,3F13.7,A)') "!ATOM NAME='"//TRIM(NAME(IAT)),&
                 "'"," R=",R_NEW(:,IAT)," !END"
         END DO
      END IF
      DEALLOCATE(R_NEW)
!
!     ==================================================================
!     == WRITE XYZ FILE                                               ==
!     ==================================================================
      CALL FILEHANDLER$UNIT('XYZ',NFIL)
      WRITE(NFIL,*)NAT*MX*MY*MZ
      WRITE(NFIL,FMT='(A30)')ROOTNAME
      DO IX=0,MX-1
         DO IY=0,MY-1
            DO IZ=0,MZ-1
               DO IAT=1,NAT
                  IF(NAME(IAT)(2:2).EQ.'_') NAME(IAT)(2:2)=' '
                  WRITE(NFIL,FMT='(A2,2X,3(F10.5,1X))')NAME(IAT),R(:,IAT)+ &
                       &      IX*RBAS(:,1)+IY*RBAS(:,2)+IZ*RBAS(:,3)
               ENDDO
            END DO
         END DO
      END DO
      
      CALL FILEHANDLER$FILENAME('XYZ',OBJECTNAME)
!      WRITE(*,FMT='("MOLECULAR OUTPUT PRODUCED")')
      WRITE(*,FMT='("FILE WRITTEN: ",A)') TRIM(ADJUSTL(OBJECTNAME))
      CALL FILEHANDLER$CLOSEALL
 !     WRITE(*,FMT='("======= TASK FINISHED ========")')
      END PROGRAM STRC2XYZ

!
!     ..................................................................
      SUBROUTINE NEXTDIST(NAT,R,RBAS,DIRIN,DIST,AT1,AT2,DIROUT)
!     ******************************************************************
!     ** CALCULATES THE CLOSEST DISTANCE BETWEEN ATOMS OF 2 PERIODIC
!     ** IMAGES AND GIVE BACK THE NUMBERS OF THESE 2 ATOMS, THE DISTANCE
!     ** AND THE DIRECTION (NUMBER OF LATICE VECTOR OF THE CLOSEST 
!     ** DISTANCE
!     ******************************************************************
      IMPLICIT NONE
      INTEGER(4),INTENT(IN) :: NAT
      REAL(8)   ,INTENT(IN) :: R(3,NAT)
      REAL(8)   ,INTENT(IN) :: RBAS(3,3)
      INTEGER(4),INTENT(IN) :: DIRIN      
      REAL(8)   ,INTENT(OUT):: DIST
      INTEGER(4),INTENT(OUT):: AT1,AT2,DIROUT(3) 
      INTEGER(4)            :: I,IAT1,IAT2,FROM(3),TO(3),A1,A2,A3
      REAL(8)               :: BESTDIST,SVAR
      IF (DIRIN.EQ.0) THEN
         FROM=1
         TO=-1
      ELSE
         FROM=0
         TO=0
         FROM(DIRIN)=1
         TO(DIRIN)=1
      END IF
      DIST=5000000.D0
      DO A1=FROM(1),TO(1),-1
         DO A2=FROM(2),TO(2),-1
            DO A3=FROM(3),TO(3),-1
               IF (A1.EQ.0.AND.A2.EQ.0.AND.A3.EQ.0) CYCLE
               DO IAT1=1,NAT
                  DO IAT2=1,NAT
                     SVAR=SQRT((R(1,IAT1)-(R(1,IAT2)+A1*RBAS(1,1)+A2*RBAS(1,2)+A3*RBAS(1,3) ))**2+ &
                          (R(2,IAT1)-(R(2,IAT2)+A1*RBAS(2,1)+A2*RBAS(2,2)+A3*RBAS(2,3) ))**2+ &
                          (R(3,IAT1)-(R(3,IAT2)+A1*RBAS(3,1)+A2*RBAS(3,2)+A3*RBAS(3,3) ))**2)
                     IF (SVAR.LT.DIST) THEN
                        DIST=SVAR
                        DIROUT(1)=A1
                        DIROUT(2)=A2
                        DIROUT(3)=A3
                        AT1=IAT1
                        AT2=IAT2
                     END IF
                  END DO
               END DO
            END DO
         END DO
      END DO
    END SUBROUTINE NEXTDIST

