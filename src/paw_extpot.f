!
!     .................................................................. 
      SUBROUTINE EXPOT
!     **                                                              **
!     **                                                              **
!     **                                                              **
!     **                                                              **
!     **                                                              **
      IMPLICIT INTEGER ($)
      IMPLICIT DOUBLE PRECISION (A-H,P-Z)
      LOGICAL TEXPOT,TEXPOT_,TFIRST
!     == POINTER ARRAYS
      POINTER ($R0,R0),($RMASS,RMASS),($FORCE,FORCE),($DWORK,DWORK)
      DIMENSION R0(3,NAT),RMASS(NAT),FORCE(3,NAT),DWORK(3,NAT)
      CHARACTER*32 STRING
!     == SAVED DATA
      SAVE
!     == TEMPORARY DATA
      DATA TFIRST/.TRUE./
      RETURN
!
!     ******************************************************************
!     **  SET EXTERNAL POTENTIAL ON OR OFF                            **
!     ******************************************************************
      ENTRY EXPOT$INITIALIZE(TEXPOT_,$EXPOTLIST_)
      CALL ENERGYLIST$SET('EXTERNAL POTENTIAL',0.D0)
      IF (TEXPOT_) THEN
       TEXPOT=.TRUE.
       $EXPOTLIST=0
       CALL LINKED1LIST$SET($EXPOTLIST,'LINKEDLISTNAME',5,'EXPOT')
       $EXPOTLIST_=$EXPOTLIST
      ENDIF
      RETURN
!     ******************************************************************
!     **  REPORT EXTERNAL POTENTIAL PARAMETERS                        **
!     ******************************************************************
      ENTRY EXPOT$REPORT
       IF (TEXPOT) THEN
        CALL FILEHANDLER$UNIT('PROT',NFILO)
        CALL LINKED1LIST$SELECT($EXPOTLIST,'~')
        CALL LINKED1LIST$GET($EXPOTLIST,'NEXPOT',4,NEXPOT)
        WRITE(NFILO,*)
        WRITE(NFILO,FMT='("EXTERNAL POTENTIAL:")')
        WRITE(NFILO,FMT='("===================")')
        WRITE(NFILO,FMT='("TOTAL NUMBER OF EXTERNAL POTENTIALS:",I4)')
     & NEXPOT
        CALL LINKED1LIST$SELECT($EXPOTLIST,'EXPOT')
        STRING='COGSEP'
        CALL LINKED1LIST$NUMBER($EXPOTLIST,STRING,NUM)
        DO I=1,NUM
         CALL LINKED1LIST$SELECT($EXPOTLIST,'~')
         CALL LINKED1LIST$SELECT($EXPOTLIST,'EXPOT')
         CALL LINKED1LIST$SELECTITH($EXPOTLIST,'COGSEP',I)
         WRITE(NFILO,FMT='("(",I4,")",
     &    " CENTER OF GRAVITY SEPARATION POTENTIAL:")')I
         CALL LINKED1LIST$GET($EXPOTLIST,'GROUP1',32,STRING)
         WRITE(NFILO,FMT='("FIRST GROUP  :",A32)')STRING
         CALL LINKED1LIST$GET($EXPOTLIST,'GROUP2',32,STRING)
         WRITE(NFILO,FMT='("SECOND GROUP :",A32)')STRING
         CALL LINKED1LIST$GET($EXPOTLIST,'WELLSTART',8,WELLSTART)
         CALL LINKED1LIST$GET($EXPOTLIST,'WELLEND',8,WELLEND)
         WRITE(NFILO,FMT='("ZERO POTENTIAL FROM   ",D10.5," TO   ",
     &   D10.5)')WELLSTART,WELLEND
         CALL LINKED1LIST$GET($EXPOTLIST,'POWER2',8,POWER2)
         WRITE(NFILO,FMT='("COEFFICIENT OF QUADRATIC TERM:",
     &   D10.5)')POWER2
        ENDDO
        WRITE(NFILO,*)
        CALL LINKED1LIST$SELECT($EXPOTLIST,'~')
        CALL LINKED1LIST$SELECT($EXPOTLIST,'EXPOT')
        STRING='TORSION'
        CALL LINKED1LIST$NUMBER($EXPOTLIST,STRING,NUM)
        DO I=1,NUM
         CALL LINKED1LIST$SELECT($EXPOTLIST,'~')
         CALL LINKED1LIST$SELECT($EXPOTLIST,'EXPOT')
         CALL LINKED1LIST$SELECTITH($EXPOTLIST,'TORSION',I)
         WRITE(NFILO,FMT='("(",I4,")",
     &    " TORSION ANGLE POTENTIAL:")')I
         CALL LINKED1LIST$GET($EXPOTLIST,'ATOM1',32,STRING)
         WRITE(NFILO,FMT='("ATOM (1):",A32)')STRING
         CALL LINKED1LIST$GET($EXPOTLIST,'ATOM2',32,STRING)
         WRITE(NFILO,FMT='("ATOM (2):",A32)')STRING
         CALL LINKED1LIST$GET($EXPOTLIST,'ATOM3',32,STRING)
         WRITE(NFILO,FMT='("ATOM (3):",A32)')STRING
         CALL LINKED1LIST$GET($EXPOTLIST,'ATOM4',32,STRING)
         WRITE(NFILO,FMT='("ATOM (4):",A32)')STRING
         CALL LINKED1LIST$GET($EXPOTLIST,'WELLSTART',8,WELLSTART)
         CALL LINKED1LIST$GET($EXPOTLIST,'WELLEND',8,WELLEND)
         WRITE(NFILO,FMT='("ZERO POTENTIAL FROM   ",D10.5," TO   ",
     &   D10.5)')WELLSTART,WELLEND
         CALL LINKED1LIST$GET($EXPOTLIST,'POWER2',8,POWER2)
         WRITE(NFILO,FMT='("COEFFICIENT OF QUADRATIC TERM:",
     &   D10.5)')POWER2
        ENDDO
        WRITE(NFILO,*)
       ENDIF
      RETURN
!     ******************************************************************
!     **  CALCULATE FORCE AND ENERGY ASSOCIATED WITH EXPOT            **
!     ******************************************************************
      ENTRY EXPOT$FORCE
      IF (.NOT.TEXPOT) RETURN
      IF (TFIRST) THEN
       TFIRST=.FALSE.
       CALL ATOMLIST$NATOM(NAT)
       CALL ATOMLIST$GETPOINTER('R(0)',8*3,NAT,$R0)
       CALL ATOMLIST$GETPOINTER('FORCE',8*3,NAT,$FORCE)
       CALL ATOMLIST$GETPOINTER('MASS',8,NAT,$RMASS)
      ENDIF
      CALL STACK$ALLOCATE(8,$DWORK,3*NAT)
      CALL EXPOT_FORCE($EXPOTLIST,NAT,R0,RMASS,POT,DWORK)
!      PRINT*,'POTENTIAL IN EXPOT$FORCE',POT
!      CALL ENERGYLIST$RETURN('TOTAL ENERGY',ETOT)
!      PRINT*,'TOTAL ENERGY BEFORE ADD',ETOT
      CALL ENERGYLIST$ADD('TOTAL ENERGY',POT)
      CALL ENERGYLIST$SET('EXTERNAL POTENTIAL',POT)
!      CALL ENERGYLIST$RETURN('TOTAL ENERGY',ETOT)
!      CALL FILEHANDLER$UNIT('PROT',NFILO)
!      CALL ENERGYLIST$PRINT(NFILO)
!      PRINT*,'TOTAL ENERGY AFTER ADD',ETOT
!      PRINT*,'FORCES FROM EXPOT'
!      DO I=1,NAT
!       WRITE(*,*)(DWORK(J,I),J=1,3)
!      ENDDO
      DO I=1,NAT
       DO J=1,3
        FORCE(J,I)=FORCE(J,I)+DWORK(J,I)
       ENDDO
      ENDDO
      CALL STACK$FREE($DWORK)
      RETURN
!
      END
!
!
!
      SUBROUTINE EXPOT_FORCE($EXPOTLIST,NAT,R0,RMASS,POT,FORCE)
      IMPLICIT DOUBLE PRECISION (A-H,P-Z)
      IMPLICIT INTEGER($)
      CHARACTER*32 STRING
      LOGICAL TMEMBER
      POINTER ($IMEMBER,IMEMBER),($TMEMBER,TMEMBER),($DI,DI),
     & ($DIDJ,DIDJ),($IAT,IAT),($X,X)
      DIMENSION FORCE(3,NAT),R0(3,NAT),IMEMBER(NAT),TMEMBER(NAT),
     & DI(3*NAT),DIDJ(3*NAT,3*NAT),IAT(NAT),X(3*NAT)
!
      DO I=1,NAT
       DO J=1,3
        FORCE(J,I)=0.D0
       ENDDO
      ENDDO
      CALL LINKED1LIST$SELECT($EXPOTLIST,'~')
      CALL LINKED1LIST$GET($EXPOTLIST,'NEXPOT',4,NEXPOT)
      CALL LINKED1LIST$GET($EXPOTLIST,'NCOGSEP',4,NCOGSEP)
      CALL LINKED1LIST$GET($EXPOTLIST,'NTORSION',4,NTORSION)
      IF (NCOGSEP .GT. 0) THEN
       CALL STACK$ALLOCATE(4,$IMEMBER,NAT)
       CALL STACK$ALLOCATE(4,$TMEMBER,NAT)
       CALL STACK$ALLOCATE(8,$DI,3*NAT)
       CALL STACK$ALLOCATE(8,$DIDJ,9*NAT*NAT)
       DO ICOG=1,NCOGSEP
!       ==================================================================
!       == DETERMINE MEMBERS                                            ==
!       ==================================================================
        CALL LINKED1LIST$SELECT($EXPOTLIST,'~')
        CALL LINKED1LIST$SELECT($EXPOTLIST,'EXPOT')
        CALL LINKED1LIST$SELECTITH($EXPOTLIST,'COGSEP',ICOG)
        CALL LINKED1LIST$GET($EXPOTLIST,'GROUP1',32,STRING)
        CALL GROUPLIST$MEMBERS(STRING,NAT,TMEMBER)
        DO I=1,NAT
         IMEMBER(I)=0
         IF (TMEMBER(I)) IMEMBER(I)=1
        ENDDO
        CALL LINKED1LIST$GET($EXPOTLIST,'GROUP2',32,STRING)
        CALL GROUPLIST$MEMBERS(STRING,NAT,TMEMBER)
        DO I=1,NAT
         IF (TMEMBER(I)) IMEMBER(I)=2
        ENDDO
! --- GET HARD WALL PARAMETERS FROM LIST
        CALL LINKED1LIST$GET($EXPOTLIST,'WELLSTART',8,WELLSTART)
        CALL LINKED1LIST$GET($EXPOTLIST,'WELLEND',8,WELLEND)
        CALL LINKED1LIST$GET($EXPOTLIST,'POWER2',8,POWER2)
! --- GET D COGSEP / DX FOR CHAIN RULE
        CALL CONSTRAINTS_COGSEPDERIVS(NAT,R0,RMASS,IMEMBER,VALUE,
     & DI,DIDJ)
        PRINT*,'COGSEP IN EXPOT$FORCE',VALUE
! --- CALCULATE POTENTIAL
        IWELL=0
        IF (VALUE .LT. WELLSTART) THEN
         WELL=WELLSTART
         IWELL=-1
        ELSE IF (VALUE .GT. WELLEND) THEN
         WELL=WELLEND
         IWELL=1
        ENDIF
        IF (IWELL .EQ. 0) THEN
         POT=0.D0
        ELSE
         POT=(VALUE-WELL)**2.D0*POWER2
        ENDIF
! --- CALCULATE FORCES
        IF (IWELL .NE. 0) THEN
         IC=0
         DO I=1,NAT
          DO J=1,3
           IC=IC+1
           FORCE(J,I)=FORCE(J,I)-(VALUE-WELL)*2.D0*POWER2*
     &      DI(IC)
          ENDDO
         ENDDO
        ENDIF
!
       ENDDO
       CALL STACK$FREE($DI)
       CALL STACK$FREE($DIDJ)
       CALL STACK$FREE($IMEMBER)
       CALL STACK$FREE($TMEMBER)
      ENDIF
!
      IF (NTORSION .GT. 0) THEN
       CALL STACK$ALLOCATE(8,$DI,3*NAT)
       CALL STACK$ALLOCATE(8,$DIDJ,9*NAT*NAT)
       CALL STACK$ALLOCATE(4,$IAT,NAT)
       CALL STACK$ALLOCATE(8,$X,3*NAT)
       DO ITOR=1,NTORSION
!       ==================================================================
!       == DETERMINE MEMBERS                                            ==
!       ==================================================================
        CALL LINKED1LIST$SELECT($EXPOTLIST,'~')
        CALL LINKED1LIST$SELECT($EXPOTLIST,'EXPOT')
        CALL LINKED1LIST$SELECTITH($EXPOTLIST,'TORSION',ITOR)
        CALL LINKED1LIST$GET($EXPOTLIST,'ATOM1',32,STRING)
        CALL ATOMLIST$INDEX(STRING,IAT(1))
        CALL LINKED1LIST$GET($EXPOTLIST,'ATOM2',32,STRING)
        CALL ATOMLIST$INDEX(STRING,IAT(2))
        CALL LINKED1LIST$GET($EXPOTLIST,'ATOM3',32,STRING)
        CALL ATOMLIST$INDEX(STRING,IAT(3))
        CALL LINKED1LIST$GET($EXPOTLIST,'ATOM4',32,STRING)
        CALL ATOMLIST$INDEX(STRING,IAT(4))
! --- GET HARD WALL PARAMETERS FROM LIST
        CALL LINKED1LIST$GET($EXPOTLIST,'WELLSTART',8,WELLSTART)
        CALL LINKED1LIST$GET($EXPOTLIST,'WELLEND',8,WELLEND)
        CALL LINKED1LIST$GET($EXPOTLIST,'POWER2',8,POWER2)
! --- GET D TORSION / DX FOR CHAIN RULE
! ---!!!!REMEMBER THAT SINCE DIDJ IS NOT PROPERLY DIMENSIONED,
! --- IT WILL CONTAIN PARTLY BULLSHIT, BUT IT DOESN'T MATTER 
! --- SINCE THE INFORMATION IS NOT USED ANYWAY
! --- TRANSFER R0 TO X ARRAY TO MAKE HANDLING AND PASSING EASIER
        IC=0
        DO I=1,10,3
         IC=IC+1
         DO J=0,2
          X(I+J)=R0(J+1,IAT(IC))
         ENDDO
        ENDDO
        CALL CONSTRAINTS_TORSIONDERIVS(X,VALUE,DI,DIDJ,ICHK)
        PRINT*,'TORSION IN EXPOT$FORCE',VALUE
! --- CALCULATE POTENTIAL
        IWELL=0
        IF (VALUE .LT. WELLSTART) THEN
         WELL=WELLSTART
         IWELL=-1
        ELSE IF (VALUE .GT. WELLEND) THEN
         WELL=WELLEND
         IWELL=1
        ENDIF
        IF (IWELL .EQ. 0) THEN
         POT=0.D0
        ELSE
         POT=(VALUE-WELL)**2.D0*POWER2
        ENDIF
! --- CALCULATE FORCES
        IF (IWELL .NE. 0) THEN
         IC=0
         DO I=1,4
          DO J=1,3
           IC=IC+1
           FORCE(J,IAT(I))=FORCE(J,IAT(I))-(VALUE-WELL)*2.D0*POWER2*
     &      DI(IC)
          ENDDO
         ENDDO
        ENDIF
!
       ENDDO
       CALL STACK$FREE($X)
       CALL STACK$FREE($DI)
       CALL STACK$FREE($DIDJ)
       CALL STACK$FREE($IAT)
      ENDIF
!
      RETURN
      END

