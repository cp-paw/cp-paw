dnl Process this file with autoconf to produce a configure script.
# This line checks if the Src-directory is in the actual path
# This prevents users to call the configure script from somewhere else
AC_INIT(src)
#
# block of user adaptable variables
#
FFTWROOT="fftw-2.1.3"     # user adaptable
MPICHROOT="mpich-1.2.1"   # user adaptable
LIBRARIES="lib"           # user adaptable
f90ARCH="intel_amd"       # user adaptable 
f90OPTIMIZE="-B100 -O"    # user adaptable
f90DEBUG="-g -Rs"         # user adaptable
fortARCH="alpha"          # user adaptable
fortOPTIMIZE="-O3"        # user adaptable as well as next line
fortDEBUG="-g3 -ladebug -C -assume gfullpath -check overflow -check underflow"
xlf90ARCH="ibm"           # user adaptable as well as next 2 lines
xlf90OPTIMIZE="-O3 -Q+clebsch -qfloat=rsqrt:hssngl:rsqrt -qmaxmem=-1 -qarch=ppc"
xlf90DEBUG="-g -C -qfullpath -qflttrap=zerodivide:invalid:enable -qsigtrap -qinitauto=FF"
NONEDIR="none"            # user adaptable
NONEBIN="paw.x"           # user adaptable
FASTDIR="fast"            # user adaptable
FASTBIN="paw_fast.x"      # user adaptable
DEBUGDIR="debug"          # user adaptable
DEBUGBIN="paw_dbg.x"      # user adaptable
PARALLELDIR="parallel"    # user adaptable
PARALLELBIN="ppaw_fast.x" # user adaptable
TOOLCOMP="fast"           # user adaptable
SRCREL="src"              # user adaptable 
#
# subdirectory tree of PAW distribution
#
PAWDIR=`pwd`
SRCDIR="$PAWDIR/$SRCREL" 
OBJDIR="$PAWDIR/bin"      # to be specified later (compiler-dependent)
BINDIR="$PAWDIR/bin"      # to be specified later (compiler-dependent) 
TOOLDIR="$SRCDIR/Tools"   
#
# Check for Fortran90 Compiler
#
AC_CHECK_PROGS(COMPILER, f90 fort xlf90,no)
if test "$COMPILER" = "no"; then 
   AC_MSG_ERROR(no valid compiler (f90,fort,xlf90) found)
fi	
#
# define COMPILE and LINK VARIABLES
#
# Absoft f90
if test "$COMPILER" = "f90"; then
   LINK=$COMPILER
   LLIBS="-lU77"
   COMPILE="$COMPILER -c -YEXT_NAMES=LCS -YEXT_SFX=_"
   COMPILE77="$COMPILE"
   CPPVAR="$CPPVAR -DCPPVARIABLE_ABS -DCPPVAR_U77"
   ARCH=$f90ARCH
   FEXT=f90
   OPTIMIZE="$f90OPTIMIZE" 
   DEBUG="$f90DEBUG"      
fi
# Compaq fort
if test "$COMPILER" = "fort"; then
   LINK=$COMPILER
   COMPILE="$COMPILER -c"
   COMPILE77="$COMPILE"
   CPPVAR="$CPPVAR -DCPPVARIABLE_DEC"
   ARCH=$fortARCH
   FEXT=f90
   OPTIMIZE="$fortOPTIMIZE"
   DEBUG="$fortDEBUG"
fi
# IBM xlf90
if test "$COMPILER" = "xlf90"; then
   LINK="$COMPILER -bmaxdata:0x70000000 -bloadmap:loadmap -qextchk"
   COMPILE="$COMPILER -qlanglvl=90STD -c -qhalt=e -qextchk"
   COMPILE77="$COMPILE"
   CPPVAR="$CPPVAR -DCPPVARIABLE_XLF"
   ARCH=$xlf90ARCH
   FEXT=f
   OPTIMIZE="$xlf90OPTIMIZE"
   DEBUG="$xlf90DEBUG"
fi
OBJDIR="$OBJDIR/$ARCH/Objects"
PAWX="$BINDIR/$ARCH"
#
# Check for GNU make utility
#
AC_CHECK_PROGS(MAKE, gmake make,no)
if test "$MAKE" = "no"; then
   AC_MSG_ERROR(GNU make utility is not installed)
fi
#
# Check for the GNU C-Compatible Compiler Preprocessor
#
AC_CHECK_PROG(CPP,cpp,cpp,no)
if test "$CPP" = "no"; then
   AC_MSG_ERROR(GNU C-Compatible Compiler Preprocessor is not installed)
fi
#
# process command line arguments
#
AC_ARG_WITH(libs,Use external numerical libraries,
            USELIBS=$withval,USELIBS=yes)
AC_ARG_WITH(fftwdir,root directory of fftw distribution,
            FFTWDIR=$withval,FFTWDIR=notset)
AC_ARG_WITH(mpichdir,root directory of mpich distribution,
            MPICHDIR=$withval,MPICHDIR=notset)
AC_ARG_WITH(atlasdir,root directory of ATLAS distribution,
            ATLASDIR=$withval,ATLASDIR=notset)
AC_ARG_WITH(atlasarch,architecture for wich ATLAS blas was compiled,
            ATLASARCH=$withval,ATLASARCH=notset)
#
# use external libraries?
#
if test "$USELIBS" = "no"; then
  #
  # no external libraries according to command line argument
  #
  LLINK="$LLINK -L$OBJDIR"
  LLIBS="-lblas -llapack"
  CPPVAR="$CPPVAR -DCPPVAR_FFTPACK"
  AC_MSG_RESULT(----------------------------------)
  AC_MSG_RESULT(according to command line argument)
  AC_MSG_RESULT(no external libraries are used    )
  AC_MSG_RESULT(----------------------------------)
  
                           else
  #
  # Determine external libraries for Absoft f90
  #
  if test "$COMPILER" = "f90"; then
    #
    # The FFTW-routines
    #
    # check for command line argument
    if test "$FFTWDIR" = "notset"; then
      # if FFTWDIR not set by command line argument
      AC_MSG_RESULT(---------------------------------)
      AC_MSG_RESULT(take default path for FFTW as no )
      AC_MSG_RESULT(command line argument is given)
      AC_MSG_RESULT(---------------------------------)
      AC_CHECK_FILES($PAWDIR/$LIBRARIES/$FFTWROOT \
                     $PAWDIR/$LIBRARIES/$FFTWROOT/fftw/.libs/libfftw.a, 
                     FFTWDIR="$PAWDIR/$LIBRARIES/$FFTWROOT", 
                     FFTWDIR=notset)
  		                    else
      # if FFTWDIR set by command line argument				   
      AC_CHECK_FILES($FFTWDIR/ \
                     $FFTWDIR/fftw/.libs/libfftw.a,
                     FFTWDIR="$FFTWDIR", 
       	             FFTWDIR=notset)
    fi			
    # if no FFTW-routines found - switch back to FFTPack
    # otherwise set variables
    if test "$FFTWDIR" = "notset"; then
      AC_MSG_WARN(-----------------------)
      AC_MSG_WARN(FFTW-library not found!)
      AC_MSG_WARN(using FFTPack instead  )
      AC_MSG_WARN(-----------------------)
      CPPVAR="$CPPVAR -DCPPVAR_FFTPACK"
                                   else
      LLINK="$LLINK -L$FFTWDIR/fftw/.libs/"				     
      LLIBS="$LLIBS -lfftw"
      CPPVAR="$CPPVAR -DCPPVAR_FFTW"
    fi  
    #
    # The ATLAS BLAS routines
    #
    if test "$ATLASDIR" = "notset"; then
      # if ATLASDIR not set by command line argument
      if test "$ATLASARCH" = "notset"; then
        # if ATLASARCH not set by command line argument
	# the first in 
        ATLASARCH=`ls $PAWDIR/$LIBRARIES/ATLAS/lib/ \
                   | cut -d' ' -f1 | head -1`
	AC_MSG_RESULT(-------------------------------------------------)	   
	AC_MSG_RESULT(as no command line argument is given)
	AC_MSG_RESULT({$ATLASARCH} was chosen as architecture for ATLAS)	   
	AC_MSG_RESULT(if this is not the right choice, rerun )	   
	AC_MSG_RESULT(reconfigure and use --with-atlasarch=... argument)	   
	AC_MSG_RESULT(-------------------------------------------------)	   
      fi
      AC_MSG_RESULT(---------------------------------)
      AC_MSG_RESULT(take default path for ATLAS as no)
      AC_MSG_RESULT(command line argument is given)
      AC_MSG_RESULT(---------------------------------)
      AC_CHECK_FILES($PAWDIR/$LIBRARIES/ATLAS \
                     $PAWDIR/$LIBRARIES/ATLAS/lib/$ATLASARCH/libf77blas.a\
                     $PAWDIR/$LIBRARIES/ATLAS/lib/$ATLASARCH/libatlas.a, 
                     ATLASDIR="$PAWDIR/$LIBRARIES/ATLAS", 
                     ATLASDIR=notset)
               	                    else
     # if ATLASDIR set by command line argument				   
     if test "$ATLASARCH" = "notset"; then
       # if ATLASARCH not set by command line argument
       # the first in 
       ATLASARCH=`ls $PAWDIR/$LIBRARIES/ATLAS/lib/ \
                  | cut -d' ' -f1 | head -1`
       AC_MSG_RESULT(-------------------------------------------------)	   
       AC_MSG_RESULT(as no command line argument is given)
       AC_MSG_RESULT({$ATLASARCH} was chosen as architecture for ATLAS)	   
       AC_MSG_RESULT(if this is not the right choice, rerun )	   
       AC_MSG_RESULT(reconfigure and use --with-atlasarch=... argument)	   
       AC_MSG_RESULT(-------------------------------------------------)	   
     fi
     AC_CHECK_FILES($ATLASDIR/ \
                    $ATLASDIR/lib/$ATLASARCH/libf77blas.a\
                    $ATLASDIR/lib/$ATLASARCH/libatlas.a,
                    ATLASDIR="$ATLASDIR", 
        	    ATLASDIR=notset)
    fi			
    # if no ATLAS-library found - switch back to internal blas
    # otherwise set variables
    if test "$ATLASDIR" = "notset"; then
      AC_MSG_WARN(---------------------------)
      AC_MSG_WARN(ATLAS-library not found!)
      AC_MSG_WARN(using internal blas instead)
      AC_MSG_WARN(---------------------------)
      LLIBS="$LLIBS -llapack -lblas"
                                   else
      LLINK="$LLINK -L$ATLASDIR/lib/$ATLASARCH"				     
      LLIBS="$LLIBS -llapack -lf77blas -latlas"
    fi  
  fi  
  # 
  # Determine external libraries for IBM xlf90
  #
  if test  "$COMPILER" = "xlf90"; then
    # THE ESSL 
    AC_HAVE_LIBRARY(essl,ESSL=found,ESSL=no)
    if test "$ESSL" = "no"; then
      AC_MSG_WARN(---------------------------)
      AC_MSG_WARN(ESSL library not found)
      AC_MSG_WARN(using internal blas instead)
      AC_MSG_WARN(---------------------------)
      LLIBS="$LLIBS -lblas -llapack"
      CPPVAR="$CPPVAR -DCPPVAR_FFTPACK"
      
                            else
      LLIBS="$LLIBS -lessl"			    
    fi   
  fi

  # 
  # Determine external library for Compaq fort
  #
  if test  "$COMPILER" = "fort"; then
    # THE CXML
    AC_HAVE_LIBRARY(cxml,CXML=found,CXML=no)
    if test "$CXML" = "no"; then
      AC_MSG_WARN(---------------------------)
      AC_MSG_WARN(CXML library not found)
      AC_MSG_WARN(using internal blas instead)
      AC_MSG_WARN(---------------------------)
      LLIBS="$LLIBS -lblas -llapack"
      CPPVAR="$CPPVAR -DCPPVAR_FFTPACK"
                            else
      LLIBS="$LLIBS -lcxml"	 		    
    fi   
  fi
fi

#
# Check for MPICH
#

if test "$MPICHDIR" = "notset"; then
  # if MPICHDIR not set by command line argument
  AC_MSG_RESULT(---------------------------------)
  AC_MSG_RESULT(take default path for MPICH as no)
  AC_MSG_RESULT(command line argument is given)
  AC_MSG_RESULT(---------------------------------)
  AC_CHECK_FILES($PAWDIR/$LIBRARIES/$MPICHROOT \
                 $PAWDIR/$LIBRARIES/$MPICHROOT/lib/libmpich.a\
                 $PAWDIR/$LIBRARIES/$MPICHROOT/lib/libfmpich.a,
                 MPICHDIR="$PAWDIR/$LIBRARIES/$MPICHROOT", 
                 MPICHDIR=notset)
                  	        else
  # if MPICHDIR set by command line argument				   
  AC_CHECK_FILES($MPICHDIR/ \
                 $MPICHDIR/lib/libmpich.a\
                 $MPICHDIR/lib/libfmpich.a,
                 MPICHDIR="$MPICHDIR", 
         	 MPICHDIR=notset)
fi			
# if no MPICH-library found -> no parallel compilation possible
# otherwise set variables
if test "$MPICHDIR" = "notset"; then
  AC_MSG_WARN(--------------------------------)
  AC_MSG_WARN(MPICH-library not found!)
  AC_MSG_WARN(no parallel compilation possible)
  AC_MSG_WARN(--------------------------------)
  MPICH=no
                                else
  LLINKPARALLEL="-L$MPICHDIR/lib"				     
  LLIBSPARALLEL="-lmpich -lfmpich"
  MPICH=yes
fi  
#
AC_SUBST(PAWDIR)
AC_SUBST(COMPILE)
AC_SUBST(COMPILE77)
AC_SUBST(LINK)
AC_SUBST(LLINK)
AC_SUBST(LLINKPARALLEL)
AC_SUBST(LLIBSPARALLEL)
AC_SUBST(LLIBS)
AC_SUBST(OBJDIR)
AC_SUBST(SRCDIR)
AC_SUBST(BINDIR)
AC_SUBST(TOOLDIR)
AC_SUBST(NONEDIR)
AC_SUBST(FASTDIR)
AC_SUBST(PARALLELDIR)
AC_SUBST(DEBUGDIR)
AC_SUBST(TOOLCOMP)
AC_SUBST(PAWX)
AC_SUBST(CPPVAR)
AC_SUBST(FEXT)
AC_SUBST(ARCH)
AC_SUBST(CPP)
AC_SUBST(f90ARCH)
AC_SUBST(fortARCH)
AC_SUBST(xlf90ARCH)
AC_OUTPUT(Makefile:$SRCREL/Makefile.in $BINDIR/$ARCH/f90pp:$SRCREL/F90PP/f90pp.in)
chmod +x $BINDIR/$ARCH/f90pp
#
# substiuting to get final Makefile.none
#
AC_MSG_RESULT(creating Makefile.none)
sed -e "s%\(OBJDIR.*=.*\)%\1/$NONEDIR%" \
    -e "s%\(PAWX.*=.*\)%\1/$NONEBIN%"\
    -e 's%varPARALLEL%F%'\
    -e 's%varOPTRM%rm%'\
    Makefile > Makefile.${NONEDIR}
#
# subsituting to get Makefile.fast
#
AC_MSG_RESULT(creating Makefile.fast)
sed -e "s%\(COMPILE.*=.*\)%\1 $OPTIMIZE %"\
    -e "s%\(OBJDIR.*=.*\)%\1/$FASTDIR%"\
    -e "s%\(PAWX.*=.*\)%\1/$FASTBIN%"\
    -e 's%varPARALLEL%F%'\
    -e 's%varOPTRM%rm%'\
    Makefile > Makefile.${FASTDIR}
#
# subsituting to get Makefile.parallel
#
if test "$MPICH" = "yes"; then
  AC_MSG_RESULT(creating Makefile.parallel)
  sed -e "s%\(COMPILE.*=.*\)%\1 $OPTIMIZE %"\
      -e "s%\(OBJDIR.*=.*\)%\1/$PARALLELDIR%"\
      -e "s%\(PAWX.*=.*\)%\1/$PARALLELBIN%"\
      -e 's%varPARALLEL%T%'\
      -e 's%varOPTRM%rm%'\
      Makefile > Makefile.${PARALLELDIR}
fi    
#
# subsituting to get Makefile.debug
#
AC_MSG_RESULT(creating Makefile.debug)
sed -e "s%\(COMPILE.*=.*\)%\1 $DEBUG %"\
    -e "s%\(OBJDIR.*=.*\)%\1/$DEBUGDIR%"\
    -e "s%\(PAWX.*=.*\)%\1/$DEBUGBIN%"\
    -e 's%varPARALLEL%F%'\
    -e 's%varOPTRM%file%'\
    Makefile > Makefile.${DEBUGDIR}
#
# creating subdirectories
#
AC_MSG_RESULT(creating subdirectories and copying include files)
mkdir -p  ${BINDIR} ${BINDIR}/${ARCH} 
list="$NONEDIR $FASTDIR $DEBUGDIR $PARALLELDIR"
for i in $list; do
  mkdir -p ${OBJDIR}/${i}
    if test "$FFTWDIR" != "notset"; then
      cp ${FFTWDIR}/fortran/fftw_f77.i ${OBJDIR}/${i}/FFTW_F77.I
    fi
done
if test "$MPICH" = "yes"; then
  cp ${MPICHDIR}/include/mpif.h ${OBJDIR}/parallel/MPIF90.H
fi 
AC_MSG_RESULT(configuration completed successfully!)

