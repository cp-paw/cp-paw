#!/bin/ksh
##!/bin/bash
#################################################################
##                                                             ##
##  Name: paw_compile                                          ##
##                                                             ##
##  purpose:  create an executable of the PAW simulation code  ##
##    and the PAW library                                      ##
##                                                             ##
##  dependecies: (uses gmake, a GNU tool)                      ##
##     xlf                                                     ##
##     cpp                                                     ##
##                                                             ##
##  command line options:                                      ##
##     are obtained using the command "paw_compile ?"          ##
##             paw_compile ?                                   ##
##                                                             ##
##  remarks:                                                   ##
##  1.the environment variable "PAWDIR" must be defined before ##
##    executing paw_compile                                    ##
##                                                             ##
#################################################################
#CPP="/usr/ccs/lib/cpp -P"   # use cpp auf ibm
CPP="/usr/bin/cpp -P"       # use cpp auf linux
#CPP="/lib/cpp -P"          # use cpp auf alpha
#  gnu make 
#GNUMAKE=/zurich/6k/contrib/bin/gmake  # 
GNUMAKE=/usr/bin/gmake       # use make auf linux
#  uses all module dependencies in the module file
FFTWDIR=${PAWDIR}/Libraries/Packages/fftw-2.1.3/
#
ATLASDIR=${PAWDIR}/Libraries/Packages/ATLAS/lib/Linux_PIII/ 
#
MPIDIR=${PAWDIR}/Libraries/Packages/mpich-1.2.1/
#################################################################
##  set compiler flags                                         ##
#################################################################
# -I  directory holding inlcude and module files
# -c  create object file only
# -qmoddir specify directory where module files are written
# -qhalt compilation stops at errors higher than
# -qlanglvl=90STD checks for deviation from Fortran90 standard
# -qextchk checks interfaces
# -qinitauto=ff initializes all variables with Not-a-number
# -g            create debug information
# -qfullpath    
# -qstrict
# -O3           optimizations done
#
######################################################################
## DEFINE COMPILER OPTIONS FOR DIFFERENT COMPILERS                  ##
##   THERE ARE THREE BASIC MODES: DEBUG, NORMAL AND FAST            ##
##   AND A SWITCH FOR PARALLEL COMPUTATION                          ##
######################################################################
##  IBM FORTRAN COMPILER XLF
XLF_COMPILE_N="xlf90 -qlanglvl=90STD -c -qhalt=e -qextchk -lessl"
XLF_COMPILE_G="${XLF_COMPILE_N} -g -C -qfullpath -qflttrap=zerodivide:invalid:enable -qsigtrap -qinitauto=FF" 
XLF_COMPILE_O="${XLF_COMPILE_N} -O3 -Q+clebsch -qfloat=rsqrt:hssngl:rsqrt -qmaxmem=-1 -qarch=ppc" 
XLF_COMPILE_OP="${XLF_COMPILE_O} -F:mpxlf90" 
XLF_COMPILE_NP="${XLF_COMPILE_N} -F:mpxlf90" 
XLF_COMPILE_GP="${XLF_COMPILE_G} -F:mpxlf90" 
XLF_LINK="xlf90 -bmaxdata:0x70000000 -bloadmap:loadmap -qextchk -lessl" 
## dec alpha compiler
ALP_COMPILE_N="fort -c  -automatic -assume source_include"
ALP_COMPILE_N="${ALP_COMPILE_N} -convert ibm"
ALP_COMPILE_G="${ALP_COMPILE_N} -g3 -ladebug -C -assume gfullpath -check overflow -check underflow"
ALP_COMPILE_O="${ALP_COMPILE_N} -O3  -math_library fast -inline speed" 
ALP_COMPILE_N="${ALP_COMPILE_N} -math_library accurate"
ALP_LINK="fort -bmaxdata:0x70000000 -bloadmap:loadmap -qextchk " 
## Absoft compiler for linux
ABS_COMPILE_N="f90 -c -YEXT_NAMES=LCS -YEXT_SFX=_"
#ABS_COMPILE_G="${ABS_COMPILE_N} -g -Rb -Rs " 
ABS_COMPILE_G="${ABS_COMPILE_N} -g -Rs" 
ABS_COMPILE_O="${ABS_COMPILE_N} -B100 -O " 
ABS_COMPILE_OP="${ABS_COMPILE_O}"
ABS_COMPILE_NP="${ABS_COMPILE_N}"
ABS_COMPILE_GP="${ABS_COMPILE_G}"
ABS_LINK="f90" 
## Portland group compiler PGI
PGI_COMPILE_N="pgf90 -c"
PGI_COMPILE_G="${PGI_COMPILE_N} -g " 
PGI_COMPILE_O="${PGI_COMPILE_N} -O " 
PGI_COMPILE_OP="${PGI_COMPILE_O}"
PGI_COMPILE_NP="${PGI_COMPILE_N}"
PGI_COMPILE_GP="${PGI_COMPILE_G}"
PGI_LINK="pgf90" 
#
#################################################################
##  define help information                                    ##
#################################################################
USAGE='\n
Usage: "paw_compile options"\n
Options can be any combination of the following\n
\t  ?\t\t    give info about use\n
\t -h\t\t    give info about use\n
\t -h+\t\t    give more detailed info about use\n
\t -g\t\t    compile for debugging\n
\t -n\t\t    safe (not optimized) compilation\n
\t -np\t\t   safe (not optimized) compilationfor parallel execution\n
\t -o\t\t    fast (optimized) compilation\n
\t -op\t\t   fast (optimized) compilation for parallel execution \n
\t -new\t\t  use all dependences\n
\t -arch string\t select compiler architecture (xlf/dec/abs/pgi)\n
\t -x string\t  specify non-default file name for executable'
INFO="\n
REMARKS:\n
- the option -t can have the following values \n
\t   n\t\t (default) safe compilation (no optimization) \n
\t   np\t\t safe compilation for parallel execution \n
\t   g\t\t compile for debugging\n
\t   o\t\t compile with optimization\n
\t   op\t\t compile with optimization for parallel execution\n
- default executable names are \n
\t   $EXEDIR/paw.x\t\t for option -t \n  
\t   $EXEDIR/paw_dbg.x\t for option -t g\n  
\t   $EXEDIR/paw_fast.x\t for option -t o\n  
\t   $EXEDIR/ppaw.x\t for option -t p\n
\t   $EXEDIR/ppaw_fast.x\t for option -t op\n
- use -new if the compilation does not find module files\n"
#################################################################
##  analyze command-line options                               ##
#################################################################
# Save all arguments.
typeset -i NOPTIONS="$#"
set -A OPTIONS -- "$@"
echo Hello! this is paw_compile
echo You selected the the options: $@
echo The PAW directory is $PAWDIR
PATH=.:$PATH
#
# Check options.
#
while (( $# )); do
  case "$1" in
  ?|-h)             # display arguments of  paw_compile
     echo ${USAGE}
     exit 0
    ;;
  -h+)              # display arguments of  paw_compile
     echo ${USAGE}
     echo ${INFO}
     exit 0
    ;;
  -new)             # use all dependences (use for first compilation)
     ALLDEP=T     
     shift
    ;;
  -x|-x*)           # define the name of the executable (optional)
     shift
     PAWX=${1#-x}     
     if [ -z "${PAWX}" ] ; then shift ; PAWX=$1 ; fi
     shift
    ;;
  -arch|-arch*)     # define compiler
     ARCH=${1#-arch} 
     if [ -z "${ARCH}" ] ; then shift ; ARCH=$1 ; fi
     case $ARCH in 
        xlf|dec|abs|pgi) ;;
        "") echo "\n option -arch requires an argument";echo ${USAGE};exit 1;;
        *) echo "\n unknown argument $ARCH for option -arch";echo ${USAGE}; exit 1 ;;
     esac
     shift
    ;;
  -n)               # normal compilation
     OPT=N
     shift
    ;;
  -np)              # normal compilation, parallel
     OPT=NP
     shift
    ;;
  -g)               # compilation for debugging
     OPT=G
     shift
    ;;
  -o)               # compilation with full optimization
     OPT=O
     shift
    ;;
  -op|-po|-p)         # compilation with full optimization, parallel
     OPT=OP
     shift
    ;;
  --)
    shift
    break
    ;;
  *)
    echo "\n Unknown option $1."
    echo ${USAGE}
    exit 1
    ;;
  esac
done
#
#################################################################
##  define defaults                                            ##
#################################################################
if [ -z "${ALLDEP}" ]   ; then ALLDEP=F   ; fi
if [ -z "${OPT}" ]      ; then OPT=O      ; fi
if [ -z "${ARCH}" ]     ; then ARCH=xlf   ; fi
PARALLEL=F
#    PAWDIR    directory containing the make file paw.mk 
#              and the shell script standardf90
#    EXEDIR directory for executable (.x) files 
EXEDIR=${PAWDIR}/X/
#    OBJDIR directory for object (.o) files 
OBJDIR=${PAWDIR}/Objects/
#    SRCDIR  directory containing the source code (.f90) files
SRCDIR=${PAWDIR}/Source/
#  F90PP is a shell script that removes the dollar signs
#  in the subroutine names in a subroutine or call statement
#  in order to conform with the standard fortran convention
F90PP=${PAWDIR}/F90PP/f90pp 
#
#################################################################
##  scan options                                               ##
#################################################################
case "$ARCH" in
  #========================================================================
  #== IBM Compiler XLF                                                   ==
  #========================================================================
  xlf)  
    FEXT=f
    case "$OPT" in
      G)
        OBJDIR=${OBJDIR}dbg/
        PAWX=${EXEDIR}paw_dbg.x
        F90PP="${F90PP} -archxlf -DCPPVARIABLE_XLF"
        COMPILE=${XLF_COMPILE_G}
        LINK=${XLF_LINK}
        OPTRM="file " 
      ;;
      N)
        OBJDIR=${OBJDIR}none/
        PAWX=${EXEDIR}paw.x
        F90PP="${F90PP} -archxlf -DCPPVARIABLE_XLF"
        COMPILE=$XLF_COMPILE_N
        LINK=${XLF_LINK}
        OPTRM="rm " 
      ;;
      NP)
        OBJDIR=${OBJDIR}none/
        PAWX=${EXEDIR}ppaw.x
        F90PP="${F90PP} -archxlf -DCPPVARIABLE_XLF -DCPPVARABLE_PARALLEL"
        COMPILE=$XLF_COMPILE_NP
        LINK=${XLF_LINK}
        OPTRM="rm " 
        PARALLEL=T
      ;;
      O)
        OBJDIR=${OBJDIR}fast/
        PAWX=${EXEDIR}paw_fast.x
        F90PP="${F90PP} -archxlf -DCPPVARIABLE_XLF"
        COMPILE=$XLF_COMPILE_O
        LINK=${XLF_LINK}
        OPTRM="file " 
      ;;
      OP)
        OBJDIR=${OBJDIR}fast/
        PAWX=${EXEDIR}ppaw_fast.x
        F90PP="${F90PP} -archxlf -DCPPVARIABLE_XLF -DCPPVARABLE_PARALLEL"
        COMPILE=$XLF_COMPILE_OP
        LINK=${XLF_LINK}
        OPTRM="rm " 
        PARALLEL=T
      ;;
      *)
       echo "OPT=$OPT not recognized"
       exit 1
      ;;
    esac
    COMPILE="${COMPILE} -I${OBJDIR} -I${SRCDIR} -qmoddir=${OBJDIR} -L${OBJDIR}"
    LINK="${LINK} -I${OBJDIR} -L${OBJDIR}"
    LLIBS="-lessl"
    COMPILE77="xlf${COMPILE#xlf90 -qlanglvl=90STD}"
    ;;
  #========================================================================
  #==  dec alpha compiler                                                ==
  #========================================================================
  dec)
    FEXT=f90
    case "$OPT" in
      G)
        OBJDIR=${OBJDIR}dbg/
        PAWX=${EXEDIR}paw_dbg.x
        F90PP="${F90PP} -archdec -DCPPVARABLE_DEC"
        COMPILE=${ALP_COMPILE_G}
        LINK=${ALP_LINK}
        OPTRM="file "
      ;;
      N)
        OBJDIR=${OBJDIR}none/
        PAWX=${EXEDIR}paw.x
        F90PP="${F90PP} -archdec -DCPPVARABLE_DEC"
        COMPILE=$ALP_COMPILE_N
        LINK=${ALP_LINK}
        OPTRM="rm " 
      ;;
      NP)
        OBJDIR=${OBJDIR}none/
        PAWX=${EXEDIR}ppaw.x
        F90PP="${F90PP} -archdec -DCPPVARABLE_DEC  -DCPPVARABLE_PARALLEL"
        COMPILE=$ALP_COMPILE_NP
        LINK=${ALP_LINK}
        OPTRM="rm " 
        PARALLEL=T
      ;;
      O)
        OBJDIR=${OBJDIR}fast/
        PAWX=${EXEDIR}paw_fast.x
        F90PP="${F90PP} -archdec -DCPPVARABLE_DEC"
        COMPILE=$ALP_COMPILE_O
        LINK=${ALP_LINK}
        OPTRM="rm " 
      ;;
      OP)
        OBJDIR=${OBJDIR}fast/
        PAWX=${EXEDIR}ppaw_fast.x
        F90PP="${F90PP} -archdec -DCPPVARABLE_DEC  -DCPPVARABLE_PARALLEL"
        COMPILE=$ALP_COMPILE_OP
        LINK=${ALP_LINK}
        OPTRM="rm " 
        PARALLEL=T
      ;;
      *)
       echo "OPT=$OPT not recognized"
       exit 1
      ;;
    esac
    COMPILE="${COMPILE} -L${OBJDIR} -module ${OBJDIR} -I${OBJDIR}"
    LINK="${LINK} -I${OBJDIR} -L${OBJDIR}"
    LLIBS="-lblas -llapack"
    COMPILE77="${COMPILE}"
    ;;
  #========================================================================
  #==  absoft compiler for linux                                         ==
  #========================================================================
  abs)
    FEXT=f90
    case "$OPT" in
      G)
        OBJDIR=${OBJDIR}dbg/
        PAWX=${EXEDIR}paw_dbg.x
        F90PP="${F90PP} -archabs -DCPPVARABLE_DEC"
        COMPILE=${ABS_COMPILE_G}
        LINK=${ABS_LINK}
        OPTRM="file "
      ;;
      N)
        OBJDIR=${OBJDIR}none/
        PAWX=${EXEDIR}paw.x
        F90PP="${F90PP} -archabs -DCPPVARABLE_DEC"
        COMPILE=$ABS_COMPILE_N
        LINK=${ABS_LINK}
        OPTRM="rm " 
      ;;
      NP)
        OBJDIR=${OBJDIR}none/
        PAWX=${EXEDIR}ppaw.x
        F90PP="${F90PP} -archdec -DCPPVARABLE_DEC  -DCPPVARABLE_PARALLEL"
        COMPILE=$ABS_COMPILE_NP
	LLIBS="$LLIBS -L${MPIDIR}/lib/ -lmpich -lfmpich "
        LINK=${ABS_LINK}
        OPTRM="rm " 
        PARALLEL=T
      ;;
      O)
        OBJDIR=${OBJDIR}fast/
        PAWX=${EXEDIR}paw_fast.x
        F90PP="${F90PP} -archdec -DCPPVARABLE_DEC"
        COMPILE=$ABS_COMPILE_O
        LINK=${ABS_LINK}
        OPTRM="rm " 
      ;;
      OP)
        OBJDIR=${OBJDIR}fast/
        PAWX=${EXEDIR}ppaw_fast.x
        F90PP="${F90PP} -archdec -DCPPVARABLE_DEC -DCPPVARABLE_PARALLEL"
        COMPILE=$ABS_COMPILE_OP
	LLIBS="$LLIBS -L${MPIDIR}/lib/ -lmpich -lfmpich "
        LINK=${ABS_LINK}
        OPTRM="rm " 
        PARALLEL=T
      ;;
      *)
       echo "OPT=$OPT not recognized"
       exit 1
      ;;
    esac
    COMPILE="${COMPILE} -L${OBJDIR}  -I${OBJDIR} -p${OBJDIR} "
    LINK="${LINK} -I${OBJDIR} -L${OBJDIR} -L${FFTWDIR}/fftw/.libs "
    LINK="${LINK} -L${ATLASDIR}"
#   xerbla.o is a c-code required for atlas blas routine   
    LLIBS="$LLIBS -llapack -lU77 -lf77blas  -latlas  -lfftw xerbla.o"
#   LLIBS="$LLIBS -lblas -llapack -lfftw -lU77" # for source blas routines
    COMPILE77="${COMPILE}"
    cp ${FFTWDIR}/fortran/fftw_f77.i ${OBJDIR}/FFTW_F77.I
    cp ${MPIDIR}/include/mpif.h ${OBJDIR}/MPIF90.H
    cp ${PAWDIR}/Libraries/Packages/xerbla.o ${OBJDIR}/
    ;;
  #========================================================================
  #==  Portland group compiler                                           ==
  #========================================================================
  pgi)
    FEXT=f90
    case "$OPT" in
      G)
        OBJDIR=${OBJDIR}dbg/
        PAWX=${EXEDIR}paw_dbg.x
        F90PP="${F90PP} -archpgi -D#PGI"
        COMPILE=${ABS_COMPILE_G}
        LINK=${ABS_LINK}
        OPTRM="file "
      ;;
      N)
        OBJDIR=${OBJDIR}none/
        PAWX=${EXEDIR}paw.x
        F90PP="${F90PP} -archpgi -D#PGI"
        COMPILE=$ABS_COMPILE_N
        LINK=${ABS_LINK}
        OPTRM="rm " 
      ;;
      NP)
        OBJDIR=${OBJDIR}none/
        PAWX=${EXEDIR}ppaw.x
        F90PP="${F90PP} -archpgi -DCPPVARABLE_DEC  -DCPPVARABLE_PARALLEL"
        COMPILE=$ABS_COMPILE_NP
        LINK=${ABS_LINK}
        OPTRM="rm " 
        PARALLEL=T
      ;;
      O)
        OBJDIR=${OBJDIR}fast/
        PAWX=${EXEDIR}paw_fast.x
        F90PP="${F90PP} -archpgi -DCPPVARABLE_DEC"
        COMPILE=$ABS_COMPILE_O
        LINK=${ABS_LINK}
        OPTRM="rm " 
      ;;
      OP)
        OBJDIR=${OBJDIR}fast/
        PAWX=${EXEDIR}ppaw_fast.x
        F90PP="${F90PP} -archpgi -DCPPVARABLE_DEC  -DCPPVARABLE_PARALLEL"
        COMPILE=$ABS_COMPILE_OP
        LINK=${ABS_LINK}
        OPTRM="rm " 
        PARALLEL=T
      ;;
      *)
       echo "OPT=$OPT not recognized"
       exit 1
      ;;
    esac
    COMPILE="${COMPILE} -L${OBJDIR} -module ${OBJDIR} -I${OBJDIR}"
    LINK="${LINK} -I${OBJDIR} -L${OBJDIR}"
    LLIBS="-lblas -llapack"
    COMPILE77="${COMPILE}"
    ;;
  #========================================================================
  #==  compiler not recognized                                           ==
  #========================================================================
  *)
    echo "ARCH=$ARCH not recognized"
    exit 1
    ;;
esac
#################################################################
##  report settings and compile                                ##
#################################################################
#=====  report  ==========================================
echo The source code is held in $SRCDIR
echo Object and module files are held in $OBJDIR
echo The name of the executable is $PAWX
echo ......making executable........
#=====  compile  =========================================
export SRCDIR OBJDIR PAWX F90PP COMPILE COMPILE77 FEXT LINK ALLDEP OPTRM LLIBS PARALLEL
typeset -i RC
${GNUMAKE} -f ${PAWDIR}/paw.mk ${PAWDIR}F90PP/f90pp_tmplts.x 
${GNUMAKE} -f ${PAWDIR}/paw.mk ${PAWX} ; RC=$?
#################################################################
##  error handling  and close down                             ##
#################################################################
if [ $RC -ne 0 ] ; then 
   echo "compilation failed! error in make!" 
   exit 1 
else
   echo "compilation finished - no errors detected  ..."
fi  
return 0














