%!PS-Adobe-3.0
%%Title: paw_dmft.f90
%%For: Peter Bloechl
%%Creator: a2ps version 4.14
%%CreationDate: Thu Feb 13 22:31:58 2014
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 32
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!........1.........2.........3.........4.........5.........6.........7.........8) c n
(MODULE) K
( ) p
(DMFT_MODULE) L n
(!*******************************************************************************) c n
(!** IPROOFCHI\(NCHI\) IS A POINTER THAT SELECTS A PARTICULAR LOCAL ORBITAL      **) N
(!**                                                                           **) N
(!**  DESCRIPTION OF VARIABLES                                                 **) N
(!**    GLOCLAUR1,1,2 EXPANSION OF SPIN-AVERAGED GLOC IN 1/\(CI*HBAR*OMEGA\)     **) N
(!**                                                                           **) N
(!*******************************************************************************) N
(TYPE) K
( DENMAT_TYPE   ) p
(! CONSIDERS ALL ORBITALS ON THIS SITE) c n
(INTEGER) K
(\(4\)          :: LNX              ) p
(!#\(RADIAL PARTIAL WAVES\)) c n
(INTEGER) K
(\(4\),) p
(POINTER) K
(  :: LOX\(:\) => NULL\(\) ) p
(!\(LNX\)) c n
(INTEGER) K
(\(4\),) p
(POINTER) K
(  :: LMN\(:\) => NULL\(\) ) p
(!\(NLOC\) MAPS LOCAL ORBITALS ) c n
(                                        ) p
(!ONTO PROJECTOR ARRAY) c n
(INTEGER) K
(\(4\)          :: LMNX) p n
(COMPLEX) K
(\(8\),) p
(POINTER) K
(  :: RHO\(:,:,:\) => NULL\(\) ) p
(! DENSITY MATRIX) c n
(COMPLEX) K
(\(8\),) p
(POINTER) K
(  :: H\(:,:,:\)   => NULL\(\) ) p
(! HAMILTONIAN FROM DOUBLE COUNTING) c n
(END) K
( ) p
(TYPE) K
( DENMAT_TYPE) p n
(TYPE) K
( NATORB_TYPE                             ) p
(! NATURAL ORBITALS) c n
(COMPLEX) K
(\(8\),) p
(POINTER) K
(  :: CHIPHI\(:,:\) => NULL\(\) ) p
(!\(2*NLOC,2*NLOC\) <CHI|NATORB>) c n
(COMPLEX) K
(\(8\),) p
(POINTER) K
(  :: PIPHI\(:,:\)  => NULL\(\) ) p
(!\(2*NLOC,2*NLOC\) <PI|NATORB>) c n
(END) K
( ) p
(TYPE) K
( NATORB_TYPE) p n
(TYPE) K
( ATOMSET_TYPE) p n
(  ) S
(INTEGER) K
(\(4\)           :: NLOC) p n
(  ) S
(INTEGER) K
(\(4\)           :: ICHI1) p n
(  ) S
(INTEGER) K
(\(4\)           :: ICHI2) p n
(  ) S
(REAL) K
(\(8\)              :: LHFWEIGHT) p n
(  ) S
(REAL) K
(\(8\)   ,) p
(POINTER) K
(   :: U\(:,:,:,:\)        => NULL\(\) ) p
(!\(NLOC,NLOC,NLOC,NLOC\) ) c n
(  ) p
(REAL) K
(\(8\)   ,) p
(POINTER) K
(   :: DEDU\(:,:,:,:\)     => NULL\(\) ) p
(!\(NLOC,NLOC,NLOC,NLOC\) ) c n
(  ) p
(COMPLEX) K
(\(8\),) p
(POINTER) K
(   :: GLOC\(:,:,:,:\)     => NULL\(\) ) p
(!\(NLOC,NLOC,NDIMD,NOMEGA\)) c n
(  ) p
(COMPLEX) K
(\(8\),) p
(POINTER) K
(   :: GLOCLAUR\(:,:,:,:\) => NULL\(\) ) p
(!\(NLOC,NLOC,NDIMD,3\)) c n
(  ) p
(COMPLEX) K
(\(8\),) p
(POINTER) K
(   :: SLOC\(:,:,:,:\)     => NULL\(\) ) p
(!\(NLOC,NLOC,NDIMD,NOMEGA\)) c n
(  ) p
(COMPLEX) K
(\(8\),) p
(POINTER) K
(   :: SLOCLAUR\(:,:,:,:\) => NULL\(\) ) p
(!\(NLOC,NLOC,NDIMD,3\)) c n
(  ) p
(COMPLEX) K
(\(8\),) p
(POINTER) K
(   :: RHO\(:,:,:\)        => NULL\(\) ) p
(!LOCAL DENSITY MATRIX) c n
(  ) p
(COMPLEX) K
(\(8\),) p
(POINTER) K
(   :: SMAT\(:,:,:\)       => NULL\(\) ) p
(!OVERLAP OF LOCAL ORBITALS) c n
(  ) p
(TYPE) K
(\(DENMAT_TYPE\)    :: DENMAT) p n
(  ) S
(TYPE) K
(\(NATORB_TYPE\)    :: NATORB) p n
(END) K
( ) p
(TYPE) K
( ATOMSET_TYPE) p n
(TYPE) K
( KSET_TYPE) p n
(  ) S
(REAL) K
(\(8\)            :: WKPT) p n
(  ) S
(LOGICAL) K
(\(4\)         :: TADDMINUSK    ) p
(!ADD  THE TERM FOR -K) c n
(  ) p
(COMPLEX) K
(\(8\),) p
(POINTER) K
( :: PIPSI\(:,:,:,:\)) p
(!\(NDIM,NCHI,NB,NSPIN\)) c n
(  ) p
(COMPLEX) K
(\(8\),) p
(POINTER) K
( :: RHO\(:,:,:\)    ) p
(!\(NCHI,NCHI,NDIMD\)) c n
(  ) p
(COMPLEX) K
(\(8\),) p
(POINTER) K
( :: H0\(:,:,:\)     ) p
(!\(NCHI,NCHI,NDIMD\)) c n
(  ) p
(COMPLEX) K
(\(8\),) p
(POINTER) K
( :: HRHO\(:,:,:\)   ) p
(!\(NCHI,NCHI,NDIMD\)) c n
(  ) p
(COMPLEX) K
(\(8\),) p
(POINTER) K
( :: SINV\(:,:,:\)   ) p
(!\(NCHI,NCHI,NDIMD\)) c n
(  ) p
(COMPLEX) K
(\(8\),) p
(POINTER) K
( :: SMAT\(:,:,:\)   ) p
(!\(NCHI,NCHI,NDIMD\)) c n
(END) K
( ) p
(TYPE) K
( KSET_TYPE) p n
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(   :: TON=.TRUE.) p n
(LOGICAL) K
(\(4\),) p
(SAVE) K
(        :: TINI=.FALSE.) p n
(REAL) K
(\(8\)   ,) p
(PARAMETER) K
(   :: AMIX=1.D-1) p n
(INTEGER) K
(\(4\)             :: NOMEGA) p n
(INTEGER) K
(\(4\)             :: NCHI          ) p
(! #\(CORRELATED ORBITALS\)) c n
(INTEGER) K
(\(4\)             :: NB            ) p
(! #\(BAND STATES PER K-POINT\)) c n
(INTEGER) K
(\(4\)             :: NKPTL         ) p
(! #\(KPOINTS ON THIS TASK\)) c n
(INTEGER) K
(\(4\)             :: NSPIN         ) p
(! #\(SPIN COMPONENTS\)) c n
(INTEGER) K
(\(4\)             :: NDIM          ) p
(! #\(SPINOR COMPONENTS\)) c n
(INTEGER) K
(\(4\)             :: NDIMD         ) p
(! CAN BE 1,2,4) c n
(INTEGER) K
(\(4\)             :: NAT           ) p
(! #\(ATOMS\)) c n
(REAL) K
(\(8\)   ,) p
(ALLOCATABLE) K
( :: OMEGA\(:\)      ) p
(! MATSUBARA FREQUENCIES) c n
(INTEGER) K
(\(4\),) p
(ALLOCATABLE) K
( :: IPROOFCHI\(:\)  ) p
(!\(NCHI\) MAP ICHI TO IPRO) c n
(REAL) K
(\(8\)                :: KBT           ) p
(! TEMPERATURE \(K_B*T\)) c n
(paw_dmft.f90) (Page 1/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(REAL) K
(\(8\)   ,) p
(PARAMETER) K
(   :: MU=0.D0       ) p
(! CHEMICAL POTENTIAL) c n
(!== KSET =======================================================================) N
(TYPE) K
(\(KSET_TYPE\)   ,) p
(ALLOCATABLE) K
( :: KSET\(:\)  ) p
(!\(NKPTL\)) c n
(TYPE) K
(\(ATOMSET_TYPE\),) p
(ALLOCATABLE) K
( :: ATOMSET\(:\)  ) p
(!\(NAT\)) c n
(END) K
( ) p
(MODULE) K
( ) p
(DMFT_MODULE) L n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) c n
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_INI) L
(\(\)) p n
(!     **************************************************************************) c n
(      ) p
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
(: TINI,NDIM,NDIMD,NSPIN,NKPTL,NB,NAT,NCHI &) p n
(     &                       ,NOMEGA,KBT,MU,OMEGA,IPROOFCHI &) N
(     &                       ,KSET,ATOMSET) N
(      ) S
(USE) K
( ) p
(WAVES_MODULE,) l
( ) p
(ONLY) K
( : KMAP,NDIM_W=>NDIM,NKPTL_W=>NKPTL,NSPIN_W=>NSPIN) p n
(      ) S
(USE) K
( ) p
(LMTO_MODULE,) l
( ) p
(ONLY) K
(: HYBRIDSETTING,HFWEIGHT) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(REAL) K
(\(8\)                :: PI) p n
(      ) S
(INTEGER) K
(\(4\)             :: NTASKS_K,THISTASK_K) p n
(      ) S
(INTEGER) K
(\(4\)             :: NTASKS_M,THISTASK_M) p n
(      ) S
(INTEGER) K
(\(4\)             :: NKPT) p n
(      ) S
(INTEGER) K
(\(4\)             :: LNX) p n
(      ) S
(INTEGER) K
(\(4\)             :: LMNX) p n
(      ) S
(INTEGER) K
(\(4\)             :: NLOC) p n
(      ) S
(INTEGER) K
(\(4\)             :: L) p n
(      ) S
(INTEGER) K
(\(4\)             :: NU,ISP,IAT,LN,IM,IKPTL,IKPT,ICHI,IPRO,I) p n
(      ) S
(INTEGER) K
(\(4\)             :: LMN) p n
(      ) S
(INTEGER) K
(\(4\)             :: I1,I2 ) p
(! BOUNDS ON CHI-ARRAY FOR EACH ATOM) c n
(      ) p
(REAL) K
(\(8\)   ,) p
(ALLOCATABLE) K
( :: WKPT\(:\) ) p
(!\(NKPT\) K-POINT WEIGHTS) c n
(      ) p
(INTEGER) K
(\(4\),) p
(ALLOCATABLE) K
( :: LOX\(:\)  ) p
(!\(LNX\)) c n
(      ) p
(LOGICAL) K
(\(4\),) p
(ALLOCATABLE) K
( :: TORB\(:\) ) p
(!\(LNX\)) c n
(!     **************************************************************************) N
(      ) p
(IF) K
(\(TINI\) ) p
(RETURN) K n
(      TINI=.TRUE.) p n
(      PI=4.D0*) S
(ATAN) K
(\(1.D0\)) p n
(      ) S
(CALL) K
( ) p
(MPE$QUERY) l
(\(') p
(K) str
(',NTASKS_K,THISTASK_K\)) p n
(      ) S
(CALL) K
( ) p
(MPE$QUERY) l
(\(') p
(MONOMER) str
(',NTASKS_M,THISTASK_M\)) p n
(!) c n
(!     ==========================================================================) N
(!     == HARDWIRED VARIABLES                                                  ==) N
(!     ==========================================================================) N
(      NOMEGA=50) p n
(!) c n
(!     ==========================================================================) N
(!     == INHERIT KBT FROM OCCUPATIONS OBJECT                                  ==) N
(!     ==   \(SPECIFIED IN !CONTROL!MERMIN:T[K]\)                                ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(DYNOCC$GETR8) l
(\(') p
(TEMP) str
(',KBT\)) p n
(      ) S
(IF) K
(\(KBT) p
(.LT.) K
(1.D-5\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(TEMPERATURE MUST BE FINITE) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(SET !CONTROL!MERMIN:T[K]) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$R8VAL) l
(\(') p
(KBT) str
(',KBT\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_INI) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(PRINT) S
(*,') p
(KBT=) str
(',KBT,') p
( KBT[EV]=) str
(',KBT*27.211D0) p n
(!!$KBT=0.333D0*27.211D0) c n
(!!$PRINT*,'KBT=',KBT,' KBT[EV]=',KBT*27.211D0) N
(!) N
(!     ==========================================================================) N
(!     == COLLECT PERMANENT DATA                                               ==) N
(!     ==========================================================================) N
(      NDIM=NDIM_W   ) p
(! IMPORT NDIM FROM WAVES_MODULE INTO DMFT MODULE) c n
(      NSPIN=NSPIN_W ) p
(! IMPORT NSPIN FROM WAVES_MODULE INTO DMFT MODULE) c n
(      ) p
(IF) K
(\(NDIM) p
(.EQ.) K
(1) p
(.AND.) K
(NSPIN) p
(.EQ.) K
(1\) ) p
(THEN) K n
(        NDIMD=1) p n
(paw_dmft.f90) (Page 2/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (1/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(ELSE) K
( ) p
(IF) K
(\(NDIM) p
(.EQ.) K
(1) p
(.AND.) K
(NSPIN) p
(.EQ.) K
(2\) ) p
(THEN) K n
(        NDIMD=2) p n
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIM) p
(.EQ.) K
(2) p
(.AND.) K
(NSPIN) p
(.EQ.) K
(1\) ) p
(THEN) K n
(        NDIMD=4) p n
(      ) S
(ELSE) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT SPIN VARABLED INHERITED FROM PAW_WAVES.) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(\(NDIM,NSPIN\) MAY BE \(1,1\), \(1,2\) OR \(2,1\)) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NDIM) str
(',NDIM\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NSPIN) str
(',NSPIN\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_INI) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(      NKPTL=NKPTL_W ) p
(! IMPORT NKPTL FROM WAVES_MODULE INTO DMFT MODULE) c n
(      ) p
(CALL) K
( ) p
(DYNOCC$GETI4) l
(\(') p
(NB) str
(',NB\)) p n
(!) c n
(!     ==========================================================================) N
(!     ==  CALCULATE MATSUBARA FREQUENCIES                                     ==) N
(!     ==========================================================================) N
(      ) p
(ALLOCATE) K
(\(OMEGA\(NOMEGA\)\)) p n
(      ) S
(DO) K
( NU=1,NOMEGA) p n
(        OMEGA\(NU\)=) S
(REAL) K
(\(2*NU-1,) p
(KIND) K
(=8\)*PI*KBT) p n
(      ) S
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     == SELECT CORRELATED ORBITALS \(->NCHI, ATOMSET\)                         ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(ATOMLIST$NATOM) l
(\(NAT\)) p n
(      ) S
(ALLOCATE) K
(\(ATOMSET\(NAT\)\)) p n
(      ATOMSET\(:\)%ICHI1=1) N
(      ATOMSET\(:\)%ICHI2=0) N
(!) c n
(!     == GET NCHI AND BOUNDS ON ATOMSET ========================================) N
(      NCHI=0) p n
(      ) S
(DO) K
( IAT=1,NAT) p n
(        ) S
(CALL) K
( ) p
(ATOMLIST$GETI4) l
(\(') p
(ISPECIES) str
(',IAT,ISP\)) p n
(        ) S
(CALL) K
( ) p
(SETUP$ISELECT) l
(\(ISP\)) p n
(        ) S
(CALL) K
( ) p
(SETUP$GETI4) l
(\(') p
(LNX) str
(',LNX\)) p n
(        ) S
(ALLOCATE) K
(\(LOX\(LNX\)\)) p n
(        ) S
(ALLOCATE) K
(\(TORB\(LNX\)\)) p n
(        ) S
(CALL) K
( ) p
(SETUP$GETI4A) l
(\(') p
(LOX) str
(',LNX,LOX\)) p n
(        ) S
(CALL) K
( ) p
(SETUP$GETL4A) l
(\(') p
(TORB) str
(',LNX,TORB\)) p n
(        ) S
(CALL) K
( ) p
(SETUP$UNSELECT) l
(\(\)) p n
(        I1=NCHI+1   ) S
(! FIRST ICHI FOR THIS ATOM) c n
(        ) p
(DO) K
( LN=1,LNX) p n
(          L=LOX\(LN\)) N
(          ) S
(IF) K
(\(TORB\(LN\)\) ) p
(THEN) K n
(            NCHI=NCHI+2*L+1) p n
(          ) S
(END) K
( ) p
(IF) K n
(        ) p
(ENDDO) K n
(        I2=NCHI) p n
(PRINT) K
(*,') p
(TORB ) str
(',IAT,TORB) p n
(!) c n
(!       == SAVE BOUNDS TO ATOMSET ==============================================) N
(        NLOC=I2-I1+1) p n
(        ATOMSET\(IAT\)%NLOC=NLOC) N
(        ATOMSET\(IAT\)%ICHI1=I1) N
(        ATOMSET\(IAT\)%ICHI2=I2) N
(!) c n
(!       == NOW DETERMINE SUBSTRUCTURE DENMAT ==================================) N
(        ATOMSET\(IAT\)%DENMAT%LNX=LNX) p n
(        ) S
(ALLOCATE) K
(\(ATOMSET\(IAT\)%DENMAT%LOX\(LNX\)\)) p n
(        ATOMSET\(IAT\)%DENMAT%LOX=LOX) N
(paw_dmft.f90) (Page 3/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        LMNX=) p
(SUM) K
(\(2*LOX+1\)) p n
(        ATOMSET\(IAT\)%DENMAT%LMNX=LMNX) N
(        NLOC=ATOMSET\(IAT\)%NLOC) N
(        ) S
(ALLOCATE) K
(\(ATOMSET\(IAT\)%DENMAT%LMN\(NLOC\)\)) p n
(        LMN=0) N
(        I=0) N
(        ) S
(DO) K
( LN=1,LNX) p n
(          L=LOX\(LN\)) N
(          ) S
(IF) K
(\(TORB\(LN\)\) ) p
(THEN) K n
(            ) p
(DO) K
( IM=1,2*L+1) p n
(              I=I+1) N
(              LMN=LMN+1) N
(              ATOMSET\(IAT\)%DENMAT%LMN\(I\)=LMN) N
(            ) S
(ENDDO) K n
(          ) p
(ELSE) K n
(            LMN=LMN+2*L+1) p n
(          ) S
(END) K
( ) p
(IF) K n
(        ) p
(ENDDO) K n
(!) c n
(!       ========================================================================) N
(!       == INHERIT SCREENING FACTOR  FROM LMTO_MODULE                         ==) N
(!       ========================================================================) N
(        ) p
(IF) K
(\(HYBRIDSETTING\(ISP\)%LHFWEIGHT) p
(.GE.) K
(0.D0\) ) p
(THEN) K n
(          ATOMSET\(IAT\)%LHFWEIGHT=HYBRIDSETTING\(ISP\)%LHFWEIGHT) p n
(        ) S
(ELSE) K n
(          ATOMSET\(IAT\)%LHFWEIGHT=HFWEIGHT) p n
(        ) S
(END) K
( ) p
(IF) K n
(PRINT) S
(*,') p
(IAT=) str
(',IAT,') p
( LOCAL HFWEIGHT=) str
(',ATOMSET\(IAT\)%LHFWEIGHT) p n
(!) c n
(!       == ALLOCATE ATOMSET SUBARRAYS ==========================================) N
(        ) p
(ALLOCATE) K
(\(ATOMSET\(IAT\)%U\(NLOC,NLOC,NLOC,NLOC\)\)) p n
(        ) S
(ALLOCATE) K
(\(ATOMSET\(IAT\)%DEDU\(NLOC,NLOC,NLOC,NLOC\)\)) p n
(        ) S
(ALLOCATE) K
(\(ATOMSET\(IAT\)%GLOC\(NLOC,NLOC,NDIMD,NOMEGA\)\)) p n
(        ) S
(ALLOCATE) K
(\(ATOMSET\(IAT\)%GLOCLAUR\(NLOC,NLOC,NDIMD,3\)\)) p n
(        ) S
(ALLOCATE) K
(\(ATOMSET\(IAT\)%SLOC\(NLOC,NLOC,NDIMD,NOMEGA\)\)) p n
(        ) S
(ALLOCATE) K
(\(ATOMSET\(IAT\)%SLOCLAUR\(NLOC,NLOC,NDIMD,3\)\)) p n
(        ) S
(ALLOCATE) K
(\(ATOMSET\(IAT\)%SMAT\(LMNX,LMNX,NDIMD\)\)) p n
(        ) S
(ALLOCATE) K
(\(ATOMSET\(IAT\)%DENMAT%RHO\(LMNX,LMNX,NDIMD\)\)) p n
(        ) S
(ALLOCATE) K
(\(ATOMSET\(IAT\)%DENMAT%H\(LMNX,LMNX,NDIMD\)\)) p n
(        ATOMSET\(IAT\)%U=0.D0) N
(        ATOMSET\(IAT\)%GLOC=\(0.D0,0.D0\)) N
(        ATOMSET\(IAT\)%GLOCLAUR=\(0.D0,0.D0\)) N
(        ATOMSET\(IAT\)%SLOC=\(0.D0,0.D0\)) N
(        ATOMSET\(IAT\)%SLOCLAUR=\(0.D0,0.D0\)) N
(        ATOMSET\(IAT\)%SMAT=\(0.D0,0.D0\)) N
(        ATOMSET\(IAT\)%DENMAT%RHO =\(0.D0,0.D0\)) N
(        ATOMSET\(IAT\)%DENMAT%H   =\(0.D0,0.D0\)) N
(!) c n
(        ) p
(DEALLOCATE) K
(\(LOX\)) p n
(        ) S
(DEALLOCATE) K
(\(TORB\)) p n
(      ) S
(ENDDO) K n
(PRINT) S
(*,') p
(NCHI ) str
(',NCHI) p n
(!) c n
(!     ==========================================================================) N
(!     == ACCUMULATE IPROOFCHI                                                 ==) N
(!     ==========================================================================) N
(      ) p
(ALLOCATE) K
(\(IPROOFCHI\(NCHI\)\)) p n
(      ICHI=0) N
(      IPRO=0) N
(      ) S
(DO) K
( IAT=1,NAT) p n
(        ) S
(CALL) K
( ) p
(ATOMLIST$GETI4) l
(\(') p
(ISPECIES) str
(',IAT,ISP\)) p n
(        ) S
(CALL) K
( ) p
(SETUP$ISELECT) l
(\(ISP\)) p n
(paw_dmft.f90) (Page 4/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (2/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(CALL) K
( ) p
(SETUP$GETI4) l
(\(') p
(LNX) str
(',LNX\)) p n
(        ) S
(ALLOCATE) K
(\(LOX\(LNX\)\)) p n
(        ) S
(ALLOCATE) K
(\(TORB\(LNX\)\)) p n
(        ) S
(CALL) K
( ) p
(SETUP$GETI4A) l
(\(') p
(LOX) str
(',LNX,LOX\)) p n
(        ) S
(CALL) K
( ) p
(SETUP$GETL4A) l
(\(') p
(TORB) str
(',LNX,TORB\)) p n
(        ) S
(DO) K
( LN=1,LNX) p n
(          L=LOX\(LN\)) N
(          ) S
(IF) K
(\(TORB\(LN\)\) ) p
(THEN) K n
(            ) p
(DO) K
( IM=1,2*L+1) p n
(              ICHI=ICHI+1) N
(              IPRO=IPRO+1) N
(              IPROOFCHI\(ICHI\)=IPRO) N
(            ) S
(ENDDO) K n
(          ) p
(ELSE) K n
(            IPRO=IPRO+2*L+1) p n
(          ) S
(END) K
( ) p
(IF) K n
(        ) p
(ENDDO) K n
(        ) p
(DEALLOCATE) K
(\(LOX\)) p n
(        ) S
(DEALLOCATE) K
(\(TORB\)) p n
(        ) S
(CALL) K
( ) p
(SETUP$UNSELECT) l
(\(\)) p n
(      ) S
(ENDDO) K n
(PRINT) S
(*,') p
(IPROOFCHI ) str
(',IPROOFCHI) p n
(!) c n
(!     ==========================================================================) N
(!     == COLLECT K-POINT WEIGHTS                                              ==) N
(!     ==========================================================================) N
(      ) p
(ALLOCATE) K
(\(KSET\(NKPTL\)\)) p n
(      ) S
(DO) K
( IKPTL=1,NKPTL) p n
(        ) S
(ALLOCATE) K
(\(KSET\(IKPTL\)%PIPSI\(NDIM,NCHI,NB,NSPIN\)\)) p n
(        ) S
(ALLOCATE) K
(\(KSET\(IKPTL\)%RHO\(NCHI,NCHI,NDIMD\)\)) p n
(        ) S
(ALLOCATE) K
(\(KSET\(IKPTL\)%H0\(NCHI,NCHI,NDIMD\)\)) p n
(        ) S
(ALLOCATE) K
(\(KSET\(IKPTL\)%HRHO\(NCHI,NCHI,NDIMD\)\)) p n
(        ) S
(ALLOCATE) K
(\(KSET\(IKPTL\)%SINV\(NCHI,NCHI,NDIMD\)\)) p n
(        ) S
(ALLOCATE) K
(\(KSET\(IKPTL\)%SMAT\(NCHI,NCHI,NDIMD\)\)) p n
(        KSET\(IKPTL\)%WKPT=0.D0) N
(        KSET\(IKPTL\)%PIPSI=\(0.D0,0.D0\)) N
(        KSET\(IKPTL\)%RHO=\(0.D0,0.D0\)) N
(        KSET\(IKPTL\)%HRHO=\(0.D0,0.D0\)) N
(        KSET\(IKPTL\)%H0=\(0.D0,0.D0\)) N
(        KSET\(IKPTL\)%SINV=\(0.D0,0.D0\)) N
(        KSET\(IKPTL\)%SMAT=\(0.D0,0.D0\)) N
(      ) S
(ENDDO) K n
(! ) c n
(!     == COLLECT K-POINT WEIGHTS ===============================================) N
(      ) p
(CALL) K
( ) p
(DYNOCC$GETI4) l
(\(') p
(NKPT) str
(',NKPT\)) p n
(      ) S
(ALLOCATE) K
(\(WKPT\(NKPT\)\)) p n
(      ) S
(CALL) K
( ) p
(DYNOCC$GETR8A) l
(\(') p
(WKPT) str
(',NKPT,WKPT\)) p n
(      IKPTL=0) N
(      ) S
(DO) K
( IKPT=1,NKPT) p n
(        ) S
(IF) K
(\(KMAP\(IKPT\)) p
(.EQ.) K
(THISTASK_M\) ) p
(THEN) K n
(          IKPTL=IKPTL+1) p n
(          ) S
(IF) K
(\(IKPTL) p
(.GT.) K
(NKPTL\) ) p
(THEN) K n
(            ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(KMAP INCONSISTENT WITH NKPTL FROM PAW_WAVES) str
('\)) p n
(            ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NKPTL) str
(',NKPTL\)) p n
(            ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_INI) str
('\)) p n
(          ) S
(END) K
( ) p
(IF) K n
(          KSET\(IKPTL\)%WKPT=WKPT\(IKPT\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(      ) p
(ENDDO) K n
(      ) p
(IF) K
(\(IKPTL) p
(.NE.) K
(NKPTL\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(KMAP INCONSISTENT WITH NKPTL FROM PAW_WAVES) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NKPTL) str
(',NKPTL\)) p n
(paw_dmft.f90) (Page 5/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(IKPTL) str
(',IKPTL\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_INI) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT$GREEN) L
(\(\)) p n
(!     **************************************************************************) c n
(!     ** CALCULATES THE LOCAL INTERACTING GREENS FUNCTION                     **) N
(!     **                                                                      **) N
(!     ** PIPSI <PI_A|PSI_N> IS THE PRE-FACTOR OF LOCAL ORBITAL |CHI_A> IN     **) N
(!     **       THE LOCAL ORBITAL EXPANSION OF |PSI_N>                         **) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
(: TON) p n
(      ) S
(USE) K
( ) p
(MPE_MODULE) l n
(      ) p
(USE) K
( ) p
(STRINGS_MODULE) l n
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(REAL) K
(\(8\)                :: ETOT) p n
(      ) S
(REAL) K
(\(8\)                :: SVAR) p n
(      ) S
(INTEGER) K
(\(4\)             :: ITER) p n
(!     **************************************************************************) c n
(      ) p
(IF) K
(\() p
(.NOT.) K
(TON\) ) p
(RETURN) K n
(                              ) p
(CALL) K
( ) p
(TRACE$PUSH) l
(\(') p
(DMFT$GREEN) str
('\)) p n
(WRITE) K
(\(*,) p
(FMT) K
(=') p
(\(82\("="\),T20," ENTERING DMFT$GREEN "\)) str
('\)) p n
(      ) S
(CALL) K
( ) p
(DMFT_INI) l
(\(\)) p n
(!) c n
(!     ==========================================================================) N
(!     ==  COLLECT DFT HAMILTONIAN                                             ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(DMFT_COLLECTHAMILTONIAN) l
(\(\)  ) p n
(      ) S
(CALL) K
( ) p
(DMFT_COLLECTFULLDENMAT) l
(\(\)  ) p n
(!) c n
(!     ==========================================================================) N
(!     ==  OBTAIN BARE U-TENSOR FROM LMTO OBJECT.                              ==) N
(!     ==     SHAPE OF ORBITALS ARE DEFINED BY NPRO AND ATOMIC STRUCTRE        ==) N
(!     ==     ORBITALS ARE SELECTED BY TORB.                                   ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(DMFT_UTENSOR) l
(\(\) ) p n
(!) c n
(!     ==========================================================================) N
(!     ==  OVERLAP MATRIX IN K-SPACE                                           ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(DMFT_SMAT) l
(\(\)) p n
(!) c n
(!     ==========================================================================) N
(!     ==  CONSTRUCT LOCAL NATURAL ORBITALS                                    ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(DMFT_NATORB) l
(\(\)) p n
(!) c n
(!     ==========================================================================) N
(!     ==  CONSTRUCT NON-INTERACTING HAMILTONIAN THAT PRODUCES THE CORRECT     ==) N
(!     ==  ONE-PARTICLE DENSITY MATRIX                                         ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(DMFT_HRHO) l
(\(\)) p n
(      ) S
(CALL) K
( ) p
(DMFT_CONSTRAINTS) l
(\(') p
(HRHO) str
('\)) p n
(!) c n
(!     ==========================================================================) N
(!     == ITERATION TO ENFORCE CONSTRAINTS                                     ==) N
(!     ==========================================================================) N
(      ) p
(DO) K
( ITER=1,3) p n
(WRITE) K
(\(*,) p
(FMT) K
(=') p
(\(82\("="\),T20," ITERATION ",I5\)) str
('\)ITER) p n
(paw_dmft.f90) (Page 6/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (3/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(CALL) K
( ) p
(DMFT_GLOC_WITHATOMSET) l
(\(\) ) p n
(!) c n
(!       ========================================================================) N
(!       ==  CALL THE SOLVER                                                   ==) N
(!       ========================================================================) N
(        ) p
(CALL) K
( ) p
(DMFT_SOLVER) l
(\(ETOT\) ) p n
(PRINT) K
(*,') p
(ETOT AFTER DMFT_SOLVER ) str
(',ETOT) p n
(!) c n
(!       ========================================================================) N
(!       ==  CONSTRAINTS                                                       ==) N
(!       ========================================================================) N
(        ) p
(CALL) K
( ) p
(DMFT_CONSTRAINTS) l
(\(') p
(H0) str
('\)) p n
(!        CALL DMFT_CONSTRAINTS_WITHKSET\('H0'\)) c n
(        ) p
(PRINT) K
(*,') p
(ITERATION COMPLETED ) str
(',ITER) p n
(      ) S
(ENDDO) K
( ) p
(! END OF LOOP OVER ITERATIONS TO ENFORCE CONSTRAINT) c n
(!) N
(!     ==========================================================================) N
(!     ==  CALCULATE MISSING TOTAL ENERGY CONTRIBUTION                         ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(DMFT_DETOT) l
(\(SVAR\)) p n
(      ETOT=ETOT+SVAR      ) N
(      ) S
(CALL) K
( ) p
(ENERGYLIST$SET) l
(\(') p
(DMFT INTERFACE) str
(',ETOT\)) p n
(      ) S
(CALL) K
( ) p
(ENERGYLIST$ADD) l
(\(') p
(LOCAL CORRELATION) str
(',ETOT\)) p n
(      ) S
(CALL) K
( ) p
(ENERGYLIST$ADD) l
(\(') p
(TOTAL ENERGY) str
(',ETOT\)) p n
(!) c n
(!     ==========================================================================) N
(!     ==  ADD HAMILTONIAN THIS%HTBC                                           ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(DMFT_ADDTOHPSI) l
(\(\)) p n
(WRITE) K
(\(*,) p
(FMT) K
(=') p
(\(82\("="\),T20," LEAVING DMFT$GREEN "\)) str
('\)) p n
(                                       ) S
(CALL) K
( ) p
(TRACE$POP) l
(\(\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_SMAT) L
(\(\)) p n
(!     **************************************************************************) c n
(!     **  DETERMINE OVERLAP MATRIX SMAT\(NCHI,NCHI,ISPIN\) OF LOCAL ORBITALS,   **) N
(!     **  THE K-DEPENDENT INVERSE SINV\(NCHI,NCHI,IKPT,ISPIN\)                  **) N
(!     **                                                                      **) N
(!     **   SINV\(K\) =SUM_N <PI|PSI\(N,K\)><PSI\(N,K\)|PI>                          **) N
(!     **   WHERE THE PI ARE PROJECTOR FUNCTIONS AND CHI ARE ORBITALS          **) N
(!     **                                                                      **) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
(: NCHI,NKPTL,NSPIN,NDIM,NDIMD,KSET) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(COMPLEX) K
(\(8\),) p
(PARAMETER) K
(  :: CI=\(0.D0,1.D0\)  ) p
(! SQRT\(-1\)) c n
(      ) p
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(  :: TTEST=.FALSE.) p n
(      ) S
(INTEGER) K
(\(4\)            :: IKPT,ISPIN,IDIM1,IDIM2,IDIMD) p n
(!     **************************************************************************) c n
(!) N
(!     ==========================================================================) N
(!     == CALCULATE INVERSE OVERLAP MATRIX                                     ==) N
(!     ==   SINV\(A,S1,B,S2,K\)=SUM_N <PI\(A,S1\)|PSI\(N,K\)><PSI\(N,K\)|PI\(B,S2\)>     ==) N
(!     ==                                                                      ==) N
(!     ==   NON-SPIN POLARIZED:                                                ==) N
(!     ==     SINV\(S1,S2\)=1/2*[ SINV\(1\)*\(1,0/0,1\) ]                            ==) N
(!     ==   COLLINEAR SPIN-POLARIZED                                           ==) N
(!     ==     SINV\(S1,S2\)=1/2*[ SINV\(1\)*\(1,0/0,1\)+SINV\(2\)*\(1,0/0,-1\) ]         ==) N
(!     ==   NON-COLLINEAR SPIN-POLARIZED                                       ==) N
(!     ==     SINV\(S1,S2\)=1/2*[ SINV\(1\)*\(1,0/0,1\)+SINV\(2\)*\(0,1/1,0\)            ==) N
(!     ==                      +SINV\(3\)*\(0,-I/I,0\)+SINV\(2\)*\(1,0/0,-1\) ]        ==) N
(paw_dmft.f90) (Page 7/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!     ==   WHERE                                                              ==) c n
(!     ==     SINV\(1\)=SINV\(1,1\)+  SINV\(2,2\)                                    ==) N
(!     ==     SINV\(2\)=SINV\(1,2\)+I*SINV\(2,1\)                                    ==) N
(!     ==     SINV\(3\)=SINV\(1,2\)-I*SINV\(2,1\)                                    ==) N
(!     ==     SINV\(4\)=SINV\(1,1\)-  SINV\(2,2\)  !FOR NSPIN=2 THIS IS SIMV\(2\)      ==) N
(!     ==                                                                      ==) N
(!     ==========================================================================) N
(      ) p
(DO) K
( IKPT=1,NKPTL) p n
(        KSET\(IKPT\)%SINV\(:,:,:\)=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( ISPIN=1,NSPIN) p n
(          ) S
(DO) K
( IDIM2=1,NDIM) p n
(            ) S
(DO) K
( IDIM1=1,NDIM) p n
(!             == NON-COLLINEAR               IDIMD=\(1\)) c n
(!             == COLLINEAR SPIN-POLARIED     IDIMD=\(1,2\)) N
(!             == NON-COLLINEAR SPIN-POLARIED IDIMD=\(1,2,3,4\)) N
(              IDIMD=IDIM1+NDIM*\(IDIM2-1\)+ISPIN-1) p n
(              KSET\(IKPT\)%SINV\(:,:,IDIMD\) &) N
(     &                     =) S
(MATMUL) K
(\(KSET\(IKPT\)%PIPSI\(IDIM1,:,:,ISPIN\) &) p n
(     &                     ,) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(KSET\(IKPT\)%PIPSI\(IDIM2,:,:,ISPIN\)\)\)\)) p n
(              ) N
(            ) S
(ENDDO) K n
(          ) p
(ENDDO) K n
(        ) p
(ENDDO) K n
(        ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,KSET\(IKPT\)%SINV\)) p n
(      ) S
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     == OVERLAP MATRIX                                                       ==) N
(!     ==========================================================================) N
(      ) p
(DO) K
( IKPT=1,NKPTL) p n
(        ) S
(CALL) K
( ) p
(SPINOR$INVERT) l
(\(NDIMD,NCHI,KSET\(IKPT\)%SINV,KSET\(IKPT\)%SMAT\)) p n
(      ) S
(ENDDO) K n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_NATORB) L
(\(\)) p n
(!     **************************************************************************) c n
(!     ** NATURAL ORBITALS IN A TWO COMPONENT PAULI-SPINOR REPRESENTATION      **) N
(!     **  USES KSET%RHO AND KSET%SINV ) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
( : NAT,NKPTL,NDIMD,ATOMSET,KSET) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(LOGICAL) K
(\(4\)             :: NATORB=.TRUE.) p n
(      ) S
(INTEGER) K
(\(4\)             :: NLOC) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: RHO\(:,:,:\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: SINV\(:,:,:\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: RHOB\(:,:\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: SINVB\(:,:\)) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(ALLOCATABLE) K
( :: X\(:\)) p n
(      ) S
(REAL) K
(\(8\)                :: SVAR) p n
(      ) S
(INTEGER) K
(\(4\)             :: I1,I2) p n
(      ) S
(INTEGER) K
(\(4\)             :: IAT,ISPIN,IKPT,I) p n
(!     **************************************************************************) c n
(      ) p
(DO) K
( IAT=1,NAT) p n
(        NLOC=ATOMSET\(IAT\)%NLOC) N
(        ) S
(IF) K
(\(NLOC) p
(.LE.) K
(0\) ) p
(CYCLE) K n
(!) c n
(!       ========================================================================) N
(!       == ALLOCATE ARRAYS                                                    ==) N
(!       ========================================================================) N
(        ) p
(IF) K
(\() p
(.NOT.ASSOCIATED) K
(\(ATOMSET\(IAT\)%NATORB%CHIPHI\)\) ) p
(THEN) K n
(paw_dmft.f90) (Page 8/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (4/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          ) p
(ALLOCATE) K
(\(ATOMSET\(IAT\)%NATORB%CHIPHI\(2*NLOC,2*NLOC\)\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(        ) p
(IF) K
(\() p
(.NOT.ASSOCIATED) K
(\(ATOMSET\(IAT\)%NATORB%PIPHI\)\) ) p
(THEN) K n
(          ) p
(ALLOCATE) K
(\(ATOMSET\(IAT\)%NATORB%PIPHI\(2*NLOC,2*NLOC\)\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(!) c n
(!       ========================================================================) N
(!       == OBTAIN LOCAL DENSITY MATRIX AND INVERSE OVERLAP FROM KSET          ==) N
(!       ========================================================================) N
(        ) p
(ALLOCATE) K
(\(RHO\(NLOC,NLOC,NDIMD\)\)) p n
(        ) S
(ALLOCATE) K
(\(SINV\(NLOC,NLOC,NDIMD\)\)) p n
(        RHO\(:,:,:\)=\(0.D0,0.D0\)) N
(        SINV\(:,:,:\)=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( IKPT=1,NKPTL) p n
(          I1=ATOMSET\(IAT\)%ICHI1) N
(          I2=ATOMSET\(IAT\)%ICHI2) N
(          SVAR=KSET\(IKPT\)%WKPT) N
(          RHO =RHO +SVAR*KSET\(IKPT\)%RHO\(I1:I2,I1:I2,:\)) N
(          SINV=SINV+SVAR*KSET\(IKPT\)%SINV\(I1:I2,I1:I2,:\)) N
(        ) S
(ENDDO) K n
(!) c n
(!       ========================================================================) N
(!       == CONVERT TO UP-DOWN REPRESENTATION                                  ==) N
(!       ========================================================================) N
(        ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NLOC,NDIMD,RHO\) ) p n
(        ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NLOC,NDIMD,SINV\) ) p n
(!) c n
(!       ========================================================================) N
(!       == DETERMINE OCCUPATIONS AND EIGENVALUES                              ==) N
(!       ========================================================================) N
(        ATOMSET\(IAT\)%NATORB%CHIPHI=\(0.D0,0.D0\)) p n
(        ATOMSET\(IAT\)%NATORB%PIPHI=\(0.D0,0.D0\)) N
(        ) S
(IF) K
(\(NDIMD) p
(.LE.) K
(2\) ) p
(THEN) K n
(          ) p
(ALLOCATE) K
(\(X\(NLOC\)\)) p n
(          ) S
(DO) K
( ISPIN=1,NDIMD) p n
(            I1=1+NLOC*\(ISPIN-1\)) N
(            I2=NLOC*ISPIN) N
(            ) S
(IF) K
(\(NATORB\) ) p
(THEN) K n
(!             == A*U=B*U*X  WITH U^DAGGER*S*U=1 ================================) c n
(!             == X IS THE OCCUPATION ===========================================) N
(              ) p
(CALL) K
( ) p
(LIB$GENERALEIGENVALUEC8) l
(\(NLOC,RHO\(:,:,ISPIN\),SINV\(:,:,ISPIN\)) p n
( &) N
(      &                              ,X,ATOMSET\(IAT\)%NATORB%CHIPHI\(I1:I2,I1:I2\)\)) N
(              ATOMSET\(IAT\)%NATORB%PIPHI\(I1:I2,I1:I2\) &) N
(      &         =) S
(MATMUL) K
(\(SINV\(:,:,ISPIN\),ATOMSET\(IAT\)%NATORB%CHIPHI\(I1:I2,I1:I2\)\)) p n
(            ) S
(ELSE) K n
(!CALL SPINOR_PRINTMATRIX\(6,'XXX',1,5,2,NLOC,SINV\)) c n
(!             == EIGENSTATES OF SINV ===========================================) N
(              ) p
(CALL) K
( ) p
(LIB$DIAGC8) l
(\(NLOC,SINV\(:,:,ISPIN\),X &) p n
(      &                                ,ATOMSET\(IAT\)%NATORB%CHIPHI\(I1:I2,I1:I2\)\)) N
(              ATOMSET\(IAT\)%NATORB%PIPHI\(I1:I2,I1:I2\) &) N
(      &                                 =ATOMSET\(IAT\)%NATORB%CHIPHI\(I1:I2,I1:I2\)) N
(              ) S
(DO) K
( I=I1,I2) p n
(                SVAR=) S
(SQRT) K
(\(X\(I-I1+1\)\)) p n
(                ATOMSET\(IAT\)%NATORB%PIPHI\(I1:I2,I\) &) N
(      &                                 =ATOMSET\(IAT\)%NATORB%PIPHI\(I1:I2,I\)*SVAR) N
(                ATOMSET\(IAT\)%NATORB%CHIPHI\(I1:I2,I\) &) N
(      &                                =ATOMSET\(IAT\)%NATORB%CHIPHI\(I1:I2,I\)/SVAR) N
(              ) S
(ENDDO) K n
(            ) p
(END) K
( ) p
(IF) K n
(          ) p
(ENDDO) K n
(          ) p
(DEALLOCATE) K
(\(X\)) p n
(paw_dmft.f90) (Page 9/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!         == COMPLETE SECOND SPIN DIRECTION FOR NON-SPIN-POLARIZED CASE ========) c n
(          ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(1\) ) p
(THEN) K n
(            I1=NLOC+1) p n
(            I2=2*NLOC) N
(            ATOMSET\(IAT\)%NATORB%CHIPHI\(I1:I2,I1:I2\) &) N
(      &                               =ATOMSET\(IAT\)%NATORB%CHIPHI\(1:NLOC,1:NLOC\)) N
(            ATOMSET\(IAT\)%NATORB%PIPHI\(I1:I2,I1:I2\) &) N
(      &                               =ATOMSET\(IAT\)%NATORB%PIPHI\(1:NLOC,1:NLOC\)) N
(          ) S
(END) K
( ) p
(IF) K n
(        ) p
(ELSE) K
( ) p n
(          ) S
(ALLOCATE) K
(\(RHOB\(2*NLOC,2*NLOC\)\)) p n
(          ) S
(ALLOCATE) K
(\(SINVB\(2*NLOC,2*NLOC\)\)) p n
(          ) S
(ALLOCATE) K
(\(X\(2*NLOC\)\)) p n
(          RHOB\(  :NLOC,  :NLOC\)=RHO\(:,:,1\)) N
(          RHOB\(NLOC+1:,  :NLOC\)=RHO\(:,:,2\)) N
(          RHOB\(  :NLOC,NLOC+1:\)=RHO\(:,:,3\)) N
(          RHOB\(NLOC+1:,NLOC+1:\)=RHO\(:,:,4\)) N
(          SINVB\(  :NLOC,  :NLOC\)=SINV\(:,:,1\)) N
(          SINVB\(NLOC+1:,  :NLOC\)=SINV\(:,:,2\)) N
(          SINVB\(  :NLOC,NLOC+1:\)=SINV\(:,:,3\)) N
(          SINVB\(NLOC+1:,NLOC+1:\)=SINV\(:,:,4\)) N
(          ) S
(IF) K
(\(NATORB\) ) p
(THEN) K n
(!           == A*U=B*U*F  WITH U^DAGGER*S*U=1 ==================================) c n
(            ) p
(CALL) K
( ) p
(LIB$GENERALEIGENVALUEC8) l
(\(2*NLOC,RHOB,SINVB &) p n
(      &                                           ,X,ATOMSET\(IAT\)%NATORB%CHIPHI\)) N
(            ATOMSET\(IAT\)%NATORB%PIPHI=) S
(MATMUL) K
(\(SINVB,ATOMSET\(IAT\)%NATORB%CHIPHI\)) p n
(          ) S
(ELSE) K n
(!           == EIGENSTATES OF SINV ===========================================) c n
(            ) p
(CALL) K
( ) p
(LIB$DIAGC8) l
(\(2*NLOC,SINVB,X,ATOMSET\(IAT\)%NATORB%CHIPHI\)) p n
(            ATOMSET\(IAT\)%NATORB%PIPHI=ATOMSET\(IAT\)%NATORB%CHIPHI) N
(            ) S
(DO) K
( I=1,2*NLOC) p n
(              ATOMSET\(IAT\)%NATORB%PIPHI\(I,I1:I2\) &) N
(      &                               =ATOMSET\(IAT\)%NATORB%PIPHI\(I,:\)*) S
(SQRT) K
(\(X\(I\)\)) p n
(              ATOMSET\(IAT\)%NATORB%CHIPHI\(I1:I2,I\) &) N
(      &                              =ATOMSET\(IAT\)%NATORB%CHIPHI\(:,I\)/) S
(SQRT) K
(\(X\(I\)\)) p n
(            ) S
(ENDDO) K n
(          ) p
(END) K
( ) p
(IF) K n
(          ) p
(DEALLOCATE) K
(\(X\)) p n
(          ) S
(DEALLOCATE) K
(\(RHOB\)) p n
(          ) S
(DEALLOCATE) K
(\(SINVB\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(        ) p
(DEALLOCATE) K
(\(RHO\)) p n
(        ) S
(DEALLOCATE) K
(\(SINV\)) p n
(      ) S
(ENDDO) K
( ) p
(! END OF LOOP OVER ATOMS) c n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_COLLECTHAMILTONIAN) L
(\(\)) p n
(!     **************************************************************************) c n
(!     ** COLLECTS THE HAMILTONIAN AND STORES IT ON THE MODULE                 **) N
(!     **                                                                      **) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
(: TON,NCHI,NB,NKPTL,NSPIN,NDIM,NDIMD,IPROOFCHI &) p n
(     &                      ,NAT,KSET,ATOMSET) N
(      ) S
(USE) K
( ) p
(MPE_MODULE) l n
(      ) p
(USE) K
( ) p
(WAVES_MODULE,) l
( ) p
(ONLY) K
( : GSET,THIS,WAVES_SELECTWV) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(COMPLEX) K
(\(8\),) p
(PARAMETER) K
(   :: CI=\(0.D0,1.D0\)  ) p
(! SQRT\(-1\)) c n
(      ) p
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(   :: TTEST=.FALSE.) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: RHO\(:,:,:\) ) p
(!\(NCHI,NCHI,NDIMD\)) c n
(      ) p
(INTEGER) K
(\(4\)             :: NBH     ) p
(!#\(SUPER STATES\)) c n
(paw_dmft.f90) (Page 10/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (5/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(INTEGER) K
(\(4\)             :: IKPT,ISPIN,IBH,ICHI,IPRO,IB,J,IAT,IDIM1,IDIM2) p n
(      ) S
(INTEGER) K
(\(4\)             :: IDIMD) p n
(      ) S
(INTEGER) K
(\(4\)             :: I1,I2) p n
(      ) S
(REAL) K
(\(8\)                :: F\(NB,NKPTL,NSPIN\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: MAT\(NCHI,NCHI\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: CSVAR) p n
(!     **************************************************************************) c n
(      ) p
(IF) K
(\() p
(.NOT.) K
(TON\) ) p
(RETURN) K n
(                                      ) p
(CALL) K
( ) p
(TRACE$PUSH) l
(\(') p
(DMFT_COLLECTHAMILTONIA) str n
(N) S
('\)) p n
(!) c n
(!     ==========================================================================) N
(!     ==  EXTRACT <PSI|PSI>) N
(!     ==========================================================================) N
(      ) p
(DO) K
( IKPT=1,NKPTL) p n
(        ) S
(DO) K
( ISPIN=1,NSPIN) p n
(          ) S
(CALL) K
( ) p
(WAVES_SELECTWV) l
(\(IKPT,ISPIN\)) p n
(          ) S
(CALL) K
( ) p
(PLANEWAVE$SELECT) l
(\(GSET%ID\)      ) p n
(          ) S
(IF) K
(\(THIS%NB) p
(.NE.) K
(NB\) ) p
(THEN) K n
(            ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT NUMBER OF STATES IN WAVES AND DYNOCC) str
(') p n
(\)) N
(            ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NB IN DYNOCC) str
(',NB\)) p n
(            ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NB IN WAVES ) str
(',THIS%NB\)) p n
(            ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_COLLECTHAMILTONIAN) str
('\)) p n
(          ) S
(END) K
( ) p
(IF) K n
(          NBH=THIS%NBH) p n
(!) c n
(!         ======================================================================) N
(!         ==  DETERMINE ORBITAL PROJECTIONS                                   ==) N
(!         ======================================================================) N
(!         == SPECIFY IF SECOND K-POINT IS OBTAINED FROM TIME-INVERSION.) N
(!         == NON-COLLINEAR: NO, BECAUSE THERE IS NO TIME INVERSION SYMMETRY) N
(!         == TINV: NO, K-POINT FALLS ONTO ITSELF UNDER TIME-INVERSION SYMMETRY.) N
(          KSET\(IKPT\)%TADDMINUSK=\(NDIMD) p
(.NE.) K
(4\)) p
(.AND.) K
(\() p
(.NOT.) K
(GSET%TINV\)) p n
(!) c n
(          ) p
(DO) K
( ICHI=1,NCHI) p n
(            IPRO=IPROOFCHI\(ICHI\)) N
(            ) S
(DO) K
( IBH=1,NBH) p n
(              ) S
(IF) K
(\(NBH) p
(.NE.) K
(NB\) ) p
(THEN) K n
(                KSET\(IKPT\)%PIPSI\(:,ICHI,2*IBH-1,ISPIN\) &) p n
(     &                                              = ) S
(REAL) K
(\(THIS%TBC\(:,IBH,IPRO\)\)) p n
(                KSET\(IKPT\)%PIPSI\(:,ICHI,2*IBH  ,ISPIN\)& ) N
(     &                                              =) S
(AIMAG) K
(\(THIS%TBC\(:,IBH,IPRO\)\)) p n
(              ) S
(ELSE) K n
(                KSET\(IKPT\)%PIPSI\(:,ICHI,IBH,ISPIN\)=THIS%TBC\(:,IBH,IPRO\)) p n
(              ) S
(END) K
( ) p
(IF) K n
(            ) p
(ENDDO) K n
(          ) p
(ENDDO) K n
(        ) p
(ENDDO) K n
(      ) p
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     ==                                                                      ==) N
(!     ==   RHO\(A,S1,B,S2,K\)=SUM_N <PI\(A,S1\)|PSI\(N,K\)>F_N <PSI\(N,K\)|PI\(B,S2\)>  ==) N
(!     ==                                                                      ==) N
(!     ==   NON-SPIN POLARIZED:                                                ==) N
(!     ==     RHO\(S1,S2\)=1/2*[ RHO\(1\)*\(1,0/0,1\) ]                              ==) N
(!     ==   COLLINEAR SPIN-POLARIZED                                           ==) N
(!     ==     RHO\(S1,S2\)=1/2*[ RHO\(1\)*\(1,0/0,1\)+RHO\(2\)*\(1,0/0,-1\) ]            ==) N
(!     ==   NON-COLLINEAR SPIN-POLARIZED                                       ==) N
(!     ==     RHO\(S1,S2\)=1/2*[ RHO\(1\)*\(1,0/0,1\)+RHO\(2\)*\(0,1/1,0\)               ==) N
(!     ==                      +RHO\(3\)*\(0,-I/I,0\)+RHO\(2\)*\(1,0/0,-1\) ]          ==) N
(paw_dmft.f90) (Page 11/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!     ==   WHERE                                                              ==) c n
(!     ==     RHO\(1\)=   RHO\(1,1\)+RHO\(2,2\)                                      ==) N
(!     ==     RHO\(2\)=   RHO\(2,1\)+RHO\(1,2\)                                      ==) N
(!     ==     RHO\(3\)=-I\(RHO\(2,1\)-RHO\(1,2\)\)                                     ==) N
(!     ==     RHO\(4\)=   RHO\(1,1\)-RHO\(2,2\)  !FOR NSPIN=2 THIS IS SIMV\(2\)        ==) N
(!     ==                                                                      ==) N
(!     ==  CAUTION! MATRICES ARE ARRANGED IN A FORTRAN-STYLE NOTATION WITH THE ==) N
(!     ==     FIRST INDEX RUNNING FIRST. THE NOTATION \(A,B/C,D\) HOWEVER IS A   ==) N
(!     ==     LATEX STYLE NOTATION WITH THE SECOND INDEX RUNNING FIRST!        ==) N
(!     ==                                                                      ==) N
(!     ==========================================================================) N
(!     ==  NDIM=1,NSPIN=1  NDIMD=1: \(T\)                                        ==) N
(!     ==  NDIM=1,NSPIN=2  NDIMD=2: \(T,Z\)                                      ==) N
(!     ==  NDIM=2,NSPIN=1  NDIMD=4: \(T,X,Y,Z\)                                  ==) N
(!     ==========================================================================) N
(!) N
(!     ==  COLLECT OCCUPATIONS W/O K-POINT WEIGHT ===============================) N
(      ) p
(CALL) K
( ) p
(DMFT_COLLECTOCCUPATIONS) l
(\(NKPTL,NSPIN,NB,F\)) p n
(!) c n
(!     == SUM UP DENSITY MATRIX =================================================) N
(      ) p
(DO) K
( IKPT=1,NKPTL) p n
(        KSET\(IKPT\)%RHO=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( ISPIN=1,NSPIN) p n
(          ) S
(DO) K
( IDIM1=1,NDIM) p n
(            ) S
(DO) K
( IDIM2=1,NDIM) p n
(              MAT\(:,:\)=\(0.D0,0.D0\)) N
(              ) S
(DO) K
( IB=1,NB) p n
(                ) S
(DO) K
( J=1,NCHI) p n
(                  CSVAR=F\(IB,IKPT,ISPIN\) &) N
(       &               *) S
(CONJG) K
(\(KSET\(IKPT\)%PIPSI\(IDIM2,J,IB,ISPIN\)\)) p n
(                  MAT\(:,J\)=MAT\(:,J\) &) N
(       &                  +KSET\(IKPT\)%PIPSI\(IDIM1,:,IB,ISPIN\)*CSVAR) N
(                ) S
(ENDDO) K n
(              ) p
(ENDDO) K n
(!) c n
(!             ==================================================================) N
(!             == DISTRIBUTE DENSITY MATRIX ONTO VARIOUS SPIN COMPONENTS       ==) N
(!             == USING THE UP-DOWN NOTATION \(1=UU,2=DU,3=UD,4=DD\)             ==) N
(!             == NSPIN=1,2: IDIM1=IDIM2=NDIM=1 =>IDIMD=ISPIN                  ==) N
(!             == NSPIN=1,NDIM=2,ISPIN=1: \(1,2,3,4\)                            ==) N
(!             ==================================================================) N
(              IDIMD=IDIM1+NDIM*\(IDIM2-1\)+ISPIN-1) p n
(              KSET\(IKPT\)%RHO\(:,:,IDIMD\)=MAT) N
(            ) S
(ENDDO) K n
(          ) p
(ENDDO) K n
(        ) p
(ENDDO) K n
(!) c n
(!       ========================================================================) N
(!       == CONVERT FROM UP-DOWN REPRESENTATION INTO \(TXYZ\)                    ==) N
(!       ========================================================================) N
(        ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,KSET\(IKPT\)%RHO\)) p n
(      ) S
(ENDDO) K n
() p n
(!) c n
(!     ==========================================================================) N
(!     ==  CALCULATE LOCAL DENSITY MATRIX FOR TESTING ) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\(TTEST\) ) p
(THEN) K n
(!       == CALCULATE DENSITY MATRIX FOR TESTING ================================) c n
(        ) p
(ALLOCATE) K
(\(RHO\(NCHI,NCHI,NDIMD\)\)) p n
(        RHO\(:,:,:\)=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( IKPT=1,NKPTL) p n
(paw_dmft.f90) (Page 12/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (6/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (13-14) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          RHO=RHO+KSET\(IKPT\)%WKPT*KSET\(IKPT\)%RHO) p n
(        ) S
(ENDDO) K n
(!       == MAKE HERMITEAN ======================================================) c n
(        ) p
(DO) K
( IDIMD=1,NDIMD) p n
(          RHO\(:,:,IDIMD\)=0.5D0*\(RHO\(:,:,IDIMD\)+) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(RHO\(:,:,IDIMD\)\)\)\)) p n
(        ) S
(ENDDO) K n
(!       == PRINT ===============================================================) c n
(        ) p
(PRINT) K
(*,') p
( IN DMFT_COLLECTHAMILTONIAN) str
(') p n
(        ) S
(DO) K
( IAT=1,NAT) p n
(          ) S
(IF) K
(\(ATOMSET\(IAT\)%NLOC) p
(.LE.) K
(0\) ) p
(CYCLE) K n
(          I1=ATOMSET\(IAT\)%ICHI1) p n
(          I2=ATOMSET\(IAT\)%ICHI2) N
(          ) S
(CALL) K
( ) p
(SPINOR$PRINTMATRIX) l
(\(6,') p
(DENSITY MATRIX\(UPDOWN\)) str
(',') p
(UPDOWN) str
(' &) p n
(      &                          ,I1,I2,NDIMD,NCHI,RHO\)) N
(          ) S
(CALL) K
( ) p
(SPINOR$PRINTMATRIX) l
(\(6,') p
(DENSITY MATRIX\(TXYZ\)) str
(',') p
(TXYZ) str
(' &) p n
(      &                          ,I1,I2,NDIMD,NCHI,RHO\)) N
(        ) S
(ENDDO) K n
(        ) p
(DEALLOCATE) K
(\(RHO\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(                                      ) p
(CALL) K
( ) p
(TRACE$POP) l
(\(\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_COLLECTFULLDENMAT) L
(\(\)) p n
(!     **************************************************************************) c n
(!     ==  EXTRACT ONSITE DENSITY MATRICES WITH ALL PROJECTOR FUNCTIONS        ==) N
(!     ==  FOR DOUBLE COUNTING                                                 ==) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
(: NKPTL,NSPIN,NAT,NDIM,NDIMD,NB,ATOMSET) p n
(      ) S
(USE) K
( ) p
(WAVES_MODULE,) l
( ) p
(ONLY) K
( : GSET,THIS,WAVES_SELECTWV) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(   :: TPRINT=.FALSE.) p n
(      ) S
(INTEGER) K
(\(4\)             :: NBH     ) p
(!#\(SUPER STATES\)) c n
(      ) p
(INTEGER) K
(\(4\)             :: LMNX) p n
(      ) S
(INTEGER) K
(\(4\)             :: I1,I2) p n
(      ) S
(COMPLEX) K
(\(8\)             :: CSVAR) p n
(      ) S
(INTEGER) K
(\(4\)             :: NB_,NSPIN_) p n
(      ) S
(INTEGER) K
(\(4\)             :: IAT,IKPT,ISPIN,IPRO,IBH,IDIM1,IDIM2,IDIMD,I) p n
(      ) S
(INTEGER) K
(\(4\)             :: LMN) p n
(      ) S
(REAL) K
(\(8\)                :: OCC\(NB,NKPTL,NSPIN\)) p n
(!     **************************************************************************) c n
(!) N
(!     ==========================================================================) N
(!     == COLLECT OCCUPATIONS                                                  ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(DYNOCC$GETI4) l
(\(') p
(NB) str
(',NB_\)) p n
(      ) S
(IF) K
(\(NB_) p
(.NE.) K
(NB\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT DIMENSIONS) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NB) str
(',NB\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NB_) str
(',NB_\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_COLLECTFULLDENMAT) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(      ) p
(CALL) K
( ) p
(DYNOCC$GETI4) l
(\(') p
(NSPIN) str
(',NSPIN_\)) p n
(      ) S
(IF) K
(\(NSPIN_) p
(.NE.) K
(NSPIN\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT DIMENSIONS) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NSPIN) str
(',NSPIN\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NSPIN_) str
(',NSPIN_\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_COLLECTFULLDENMAT) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(CALL) K
( ) p
(WAVES_DYNOCCGETR8A) l
(\(') p
(OCC) str
(',NB*NKPTL*NSPIN,OCC\)) p n
(paw_dmft.f90) (Page 13/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!) c n
(!     ==========================================================================) N
(!     == SET DENSITY MATRIX TO ZERO) N
(!     ==========================================================================) N
(      ) p
(DO) K
( IAT=1,NAT) p n
(        ATOMSET\(IAT\)%DENMAT%RHO=\(0.D0,0.D0\)) N
(      ) S
(ENDDO) K
(        ) p n
(!) c n
(!     ==========================================================================) N
(!     == ADD UP DENSITY MATRIX                                                ==) N
(!     ==========================================================================) N
(      ) p
(DO) K
( IKPT=1,NKPTL) p n
(        ) S
(DO) K
( ISPIN=1,NSPIN) p n
(          ) S
(CALL) K
( ) p
(WAVES_SELECTWV) l
(\(IKPT,ISPIN\)) p n
(          ) S
(CALL) K
( ) p
(PLANEWAVE$SELECT) l
(\(GSET%ID\)      ) p n
(          ) S
(IF) K
(\(THIS%NB) p
(.NE.) K
(NB\) ) p
(THEN) K n
(            ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT NUMBER OF STATES IN WAVES AND DYNOCC) str
(') p n
(\)) N
(            ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NB IN DYNOCC) str
(',NB\)) p n
(            ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NB IN WAVES ) str
(',THIS%NB\)) p n
(            ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_COLLECTFULLDENMAT) str
('\)) p n
(          ) S
(END) K
( ) p
(IF) K n
(          NBH=THIS%NBH) p n
(!) c n
(!         ======================================================================) N
(!         ==  DETERMINE ORBITAL PROJECTIONS                                   ==) N
(!         ======================================================================) N
(          IPRO=0) p n
(          ) S
(DO) K
( IAT=1,NAT) p n
(            LMNX=ATOMSET\(IAT\)%DENMAT%LMNX) N
(            ) S
(IF) K
(\(ATOMSET\(IAT\)%NLOC) p
(.LE.) K
(0\) ) p
(THEN) K n
(              IPRO=IPRO+LMNX) p n
(              ) S
(CYCLE) K n
(            ) p
(END) K
( ) p
(IF) K
(   ) p n
(            I1=IPRO+1         ) N
(            I2=IPRO+LMNX) N
(            ) S
(DO) K
( IBH=1,NBH) p n
(              ) S
(IF) K
(\(NBH) p
(.NE.) K
(NB\) ) p
(THEN) K n
(!               == THIS IS FOR GENERAL SPECIAL K-POINTS ========================) c n
(!               == TBC IS FROM A SUPER WAVE FUNCTION AND CONTAINS TWO WAVE =====) N
(!               == FUNCTIONS.) N
(                ) p
(DO) K
( IDIM2=1,NDIM) p n
(                  ) S
(DO) K
( IDIM1=1,NDIM) p n
(                    IDIMD=IDIM1+NDIM*\(IDIM2-1\)+\(ISPIN-1\)) N
(                    ) S
(DO) K
( LMN=1,LMNX) p n
(                      I=IPRO+LMN) N
(                      CSVAR=) S
(REAL) K
(\(THIS%TBC\(IDIM1,IBH,I\)\)*OCC\(2*IBH-1,IKPT,ISPIN\)) p n
(                      ATOMSET\(IAT\)%DENMAT%RHO\(:,LMN,IDIMD\) &) N
(     &                               =ATOMSET\(IAT\)%DENMAT%RHO\(:,LMN,IDIMD\) &) N
(     &                               +) S
(REAL) K
(\(THIS%TBC\(IDIM2,IBH,I1:I2\)\)*CSVAR) p n
(!) c n
(                      CSVAR=) p
(AIMAG) K
(\(THIS%TBC\(IDIM1,IBH,I\)\)*OCC\(2*IBH,IKPT,ISPIN\)) p n
(                      ATOMSET\(IAT\)%DENMAT%RHO\(:,LMN,IDIMD\) &) N
(     &                             =ATOMSET\(IAT\)%DENMAT%RHO\(:,LMN,IDIMD\) &) N
(     &                             +) S
(AIMAG) K
(\(THIS%TBC\(IDIM2,IBH,I1:I2\)\)*CSVAR) p n
(                    ) S
(ENDDO) K n
(                  ) p
(ENDDO) K n
(                ) p
(ENDDO) K n
(              ) p
(ELSE) K n
(!               == THIS IS FOR GENERAL K-POINTS ================================) c n
(                ) p
(DO) K
( IDIM2=1,NDIM) p n
(                  ) S
(DO) K
( IDIM1=1,NDIM) p n
(paw_dmft.f90) (Page 14/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (7/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (15-16) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                    IDIMD=IDIM1+NDIM*\(IDIM2-1\)+\(ISPIN-1\)) p n
(                    ) S
(DO) K
( LMN=1,LMNX) p n
(                      I=IPRO+LMN) N
(                      CSVAR=) S
(CONJG) K
(\(THIS%TBC\(IDIM1,IBH,I\)\)*OCC\(IBH,IKPT,ISPIN\)) p n
(                      ATOMSET\(IAT\)%DENMAT%RHO\(:,LMN,IDIMD\) &) N
(     &                             =ATOMSET\(IAT\)%DENMAT%RHO\(:,LMN,IDIMD\) &) N
(     &                             +THIS%TBC\(IDIM2,IBH,I1:I2\)*CSVAR) N
(                    ) S
(ENDDO) K n
(                  ) p
(ENDDO) K n
(                ) p
(ENDDO) K n
(              ) p
(END) K
( ) p
(IF) K n
(            ) p
(ENDDO) K
(  ) p
(! END OF LOOP OVER BANDS) c n
(            IPRO=IPRO+LMNX) p n
(          ) S
(ENDDO) K
( ) p
(! END OF LOOP OVER ATOMS) c n
(        ) p
(ENDDO) K
( ) p
(! END OF LOOP OVER SPIN) c n
(      ) p
(ENDDO) K
( ) p
(! END OF LOOP OVER K-POINTS) c n
(!) N
(!     ==========================================================================) N
(!     ==  INCLUDE CONTRIBUTION FROM -K FOR NON-SPINPOLARIZED AND COLLINEAR    ==) N
(!     ==  FOR TIME INVERSION W/O SPIN PSI\(-K\)=CONJG\(PSI\(+K\)\)                  ==) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\(NDIMD) p
(.LT.) K
(4\) ) p
(THEN) K n
(        ) p
(DO) K
( IAT=1,NAT) p n
(          ) S
(DO) K
( IDIMD=1,NDIMD) p n
(            ATOMSET\(IAT\)%DENMAT%RHO\(:,:,IDIMD\) &) N
(     &                           =) S
(REAL) K
(\(ATOMSET\(IAT\)%DENMAT%RHO\(:,:,IDIMD\)\)) p n
(          ) S
(ENDDO) K
(        ) p n
(        ) S
(ENDDO) K
(   ) p n
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(!     ==========================================================================) N
(!     ==  TRANSFORM TO \(T,X,Y,Z\) REPRESENTATION AND MAKE HERMITEAN            ==) N
(!     ==========================================================================) N
(      ) p
(DO) K
( IAT=1,NAT) p n
(        ) S
(IF) K
(\(ATOMSET\(IAT\)%NLOC) p
(.LE.) K
(0\) ) p
(CYCLE) K n
(        LMNX=ATOMSET\(IAT\)%DENMAT%LMNX) p n
(        ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',LMNX,NDIMD,ATOMSET\(IAT\)%DENMAT%RHO\)) p n
(        ) S
(DO) K
( IDIMD=1,NDIMD) p n
(          ATOMSET\(IAT\)%DENMAT%RHO\(:,:,IDIMD\) &) N
(    &              =0.5D0*\(ATOMSET\(IAT\)%DENMAT%RHO\(:,:,IDIMD\) &) N
(    &                     +) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(ATOMSET\(IAT\)%DENMAT%RHO\(:,:,IDIMD\)\)\)\)) p n
(        ) S
(ENDDO) K n
(      ) p
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     ==  PRINT) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\(TPRINT\) ) p
(THEN) K n
(        ) p
(PRINT) K
(*,') p
(DENSITY MATRIX REPOST FROM DMFT_COLLECTFULLDENMAT) str
(') p n
(        ) S
(DO) K
( IAT=1,NAT) p n
(          ) S
(IF) K
(\(ATOMSET\(IAT\)%NLOC) p
(.LE.) K
(0\) ) p
(CYCLE) K n
(          LMNX=ATOMSET\(IAT\)%DENMAT%LMNX) p n
(          ) S
(WRITE) K
(\(*,) p
(FMT) K
(=') p
(\(82\("="\),T10," DENSITY MATRIX FOR ATOM ",I3," "\)) str
('\)IAT) p n
(          ) S
(DO) K
( IDIMD=1,NDIMD) p n
(            ) S
(DO) K
( LMN=1,LMNX) p n
(              ) S
(WRITE) K
(\(*,) p
(FMT) K
(=') p
(\("IDIMD=",I1,":",100\("\(",2F10.5,"\)"\)\)) str
('\)IDIMD &) p n
(       &              ,ATOMSET\(IAT\)%DENMAT%RHO\(LMN,:,IDIMD\)) N
(            ) S
(ENDDO) K n
(          ) p
(ENDDO) K n
(        ) p
(ENDDO) K n
(      ) p
(END) K
( ) p
(IF) K n
(      ) p
(RETURN) K n
(paw_dmft.f90) (Page 15/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_COLLECTOCCUPATIONS) L
(\(NKPTL,NSPIN,NB,F\)) p n
(!     **************************************************************************) c n
(!     ** COLLECTS THE OCCUPATIONS FOR THIS NODE AND REMOVES THE K-POINT       **) N
(!     ** WEIGHT                                                               **) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: NKPTL) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: NSPIN) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: NB) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(OUT) k
(\) :: F\(NB,NKPTL,NSPIN\)) p n
(      ) S
(INTEGER) K
(\(4\)             :: NB_,NSPIN_) p n
(      ) S
(REAL) K
(\(8\)                :: WKPT\(NKPTL\)) p n
(      ) S
(INTEGER) K
(\(4\)             :: IKPT,ISPIN) p n
(!     **************************************************************************) c n
(      ) p
(CALL) K
( ) p
(DYNOCC$GETI4) l
(\(') p
(NB) str
(',NB_\)) p n
(      ) S
(IF) K
(\(NB_) p
(.NE.) K
(NB\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT DIMENSIONS) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NB) str
(',NB\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NB_) str
(',NB_\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_COLLECTOCCUPATIONS) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(      ) p
(CALL) K
( ) p
(DYNOCC$GETI4) l
(\(') p
(NSPIN) str
(',NSPIN_\)) p n
(      ) S
(IF) K
(\(NSPIN_) p
(.NE.) K
(NSPIN\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT DIMENSIONS) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NSPIN) str
(',NSPIN\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NSPIN_) str
(',NSPIN_\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_COLLECTOCCUPATIONS) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(      ) p
(CALL) K
( ) p
(WAVES_DYNOCCGETR8A) l
(\(') p
(OCC) str
(',NB*NKPTL*NSPIN,F\)) p n
(      ) S
(CALL) K
( ) p
(WAVES_DYNOCCGETR8A) l
(\(') p
(WKPT) str
(',NKPTL,WKPT\)) p n
(!) c n
(!     == MULTIPLY WITH SPIN MULTIPLICITY =======================================) N
(      ) p
(IF) K
(\(NSPIN) p
(.EQ.) K
(1\) WKPT=2.D0*WKPT) p n
(      ) S
(DO) K
( IKPT=1,NKPTL) p n
(        ) S
(DO) K
( ISPIN=1,NSPIN) p n
(          F\(:,IKPT,ISPIN\)=F\(:,IKPT,ISPIN\)/WKPT\(IKPT\)) N
(        ) S
(ENDDO) K n
(      ) p
(ENDDO) K n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_HRHO) L
(\(\)) p n
(!     **************************************************************************) c n
(!     **  CALCULATES A STATIC HAMILTONIAN HRHO SUCH THAT THE RESULTING        **) N
(!     **  DENSITY MATRIX IS RHO=[1+EXP\(BETA*HRHO\)]^\(-1\)                       **) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(DMFT_MODULE) l
( ,) p
(ONLY) K
(: NKPTL,NCHI,NDIMD,NOMEGA,OMEGA,KBT,KSET) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(   :: TTEST=.TRUE.) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(PARAMETER) K
(   :: TOL=1.D-5  ) p
(! TOLERANCE FOR THE DENSITY MATRIX) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: MAT\(:,:,:\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: A\(:,:\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: B\(:,:\)) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(ALLOCATABLE) K
( :: F\(:\)   ) p
(!OCCUPATIONS) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: U\(:,:\)) p n
(      ) S
(INTEGER) K
(\(4\)             :: N) p n
(paw_dmft.f90) (Page 16/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (8/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (17-18) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(REAL) K
(\(8\)                :: SVAR) p n
(      ) S
(INTEGER) K
(\(4\)             :: IKPT,ISPIN,I) p n
(!     **************************************************************************) c n
(      ) p
(IF) K
(\(NDIMD) p
(.LE.) K
(2\) ) p
(THEN) K
(  ) p
(! NON-SPIN AND COLLINEAR) c n
(        N=NCHI) p n
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K
( ) p
(! NON-COLLINEAR) c n
(        N=2*NCHI) p n
(        ) S
(ALLOCATE) K
(\(A\(N,N\)\)) p n
(        ) S
(ALLOCATE) K
(\(MAT\(NCHI,NCHI,NDIMD\)\)) p n
(      ) S
(ELSE) K n
(        ) p
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_HRHO) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(ALLOCATE) K
(\(F\(N\)\)) p n
(      ) S
(ALLOCATE) K
(\(U\(N,N\)\)) p n
(      ) S
(ALLOCATE) K
(\(B\(N,N\)\)) p n
(!) c n
(!     ==========================================================================) N
(!     == CALCULATE HRHO                                                       ==) N
(!     ==========================================================================) N
(      ) p
(DO) K
( IKPT=1,NKPTL) p n
(        ) S
(IF) K
(\(NDIMD) p
(.LE.) K
(2\) ) p
(THEN) K n
(!         == CONVERT TO UP-DOWN REPRESENTATION =================================) c n
(          ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,KSET\(IKPT\)%RHO\) ) p n
(          ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,KSET\(IKPT\)%SINV\) ) p n
(          ) S
(DO) K
( ISPIN=1,NDIMD) p n
(!           == A*U=B*U*F  WITH U^DAGGER*S*U=1 ==================================) c n
(            ) p
(CALL) K
( ) p
(LIB$GENERALEIGENVALUEC8) l
(\(NCHI,KSET\(IKPT\)%RHO\(:,:,ISPIN\) &) p n
(     &                                       ,KSET\(IKPT\)%SINV\(:,:,ISPIN\),F,U\)) N
(            B=) S
(TRANSPOSE) K
(\() p
(CONJG) K
(\(U\)\)) p n
(            ) S
(DO) K
( I=1,NCHI) p n
(              ) S
(CALL) K
( ) p
(DMFT_EOFF) l
(\(KBT,F\(I\),SVAR\)) p n
(              B\(I,:\)=SVAR*B\(I,:\)) N
(            ) S
(ENDDO) K n
(            KSET\(IKPT\)%HRHO\(:,:,ISPIN\)=) p
(MATMUL) K
(\(U,B\)) p n
(          ) S
(ENDDO) K n
(          ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,KSET\(IKPT\)%RHO\)) p n
(          ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,KSET\(IKPT\)%SINV\)) p n
(          ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,KSET\(IKPT\)%HRHO\)) p n
(        ) S
(ELSE) K n
(          ) p
(ALLOCATE) K
(\(MAT\(NCHI,NCHI,NDIMD\)\)) p n
(          MAT=KSET\(IKPT\)%RHO) N
(          ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,MAT\) ) p n
(          A\(  :NCHI,  :NCHI\)=MAT\(:,:,1\)) N
(          A\(NCHI+1:,  :NCHI\)=MAT\(:,:,2\)) N
(          A\(  :NCHI,NCHI+1:\)=MAT\(:,:,3\)) N
(          A\(NCHI+1:,NCHI+1:\)=MAT\(:,:,4\)) N
(          MAT=KSET\(IKPT\)%SINV) N
(          ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,MAT\) ) p n
(          B\(  :NCHI,  :NCHI\)=MAT\(:,:,1\)) N
(          B\(NCHI+1:,  :NCHI\)=MAT\(:,:,2\)) N
(          B\(  :NCHI,NCHI+1:\)=MAT\(:,:,3\)) N
(          B\(NCHI+1:,NCHI+1:\)=MAT\(:,:,4\)) N
(!         == A*U=B*U*F  WITH U^DAGGER*S*U=1 ====================================) c n
(          ) p
(CALL) K
( ) p
(LIB$GENERALEIGENVALUEC8) l
(\(N,A,B,F,U\)) p n
(          B=) S
(TRANSPOSE) K
(\() p
(CONJG) K
(\(U\)\)) p n
(          ) S
(DO) K
( I=1,N) p n
(            ) S
(CALL) K
( ) p
(DMFT_EOFF) l
(\(KBT,F\(I\),SVAR\)) p n
(            B\(I,:\)=SVAR*B\(I,:\)) N
(          ) S
(ENDDO) K n
(          A=) p
(MATMUL) K
(\(U,B\)) p n
(          MAT\(:,:,1\)=A\(  :NCHI,  :NCHI\)) N
(          MAT\(:,:,2\)=A\(NCHI+1:,  :NCHI\)) N
(paw_dmft.f90) (Page 17/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          MAT\(:,:,3\)=A\(  :NCHI,NCHI+1:\)) p n
(          MAT\(:,:,4\)=A\(NCHI+1:,NCHI+1:\)) N
(          ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,MAT\) ) p n
(          KSET\(IKPT\)%HRHO=MAT) N
(        ) S
(END) K
( ) p
(IF) K n
(      ) p
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     ==  TEST                                                                ==) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\(TTEST\) ) p
(THEN) K
( ) p n
(        ) S
(IF) K
(\() p
(.NOT.ALLOCATED) K
(\(MAT\)\)) p
(ALLOCATE) K
(\(MAT\(NCHI,NCHI,NDIMD\)\)) p n
(        ) S
(DO) K
( IKPT=1,NKPTL) p n
(!         == CALCULATE THE DENSITY MATRIX FROM THE GREENS FUNCTION WITH HRHO ===) c n
(          ) p
(CALL) K
( ) p
(DMFT_HRHO_TEST) l
(\(NCHI,NDIMD,NOMEGA,OMEGA,KBT &) p n
(     &                       ,KSET\(IKPT\)%SMAT,KSET\(IKPT\)%HRHO,MAT\) ) S
(!MAT=RHO) c n
(!         == CALCULATE DEVIATION FROM TARGET DENSITY MATRIX ====================) N
(          MAT=MAT-KSET\(IKPT\)%RHO) p n
(          ) S
(IF) K
(\() p
(MAXVAL) K
(\() p
(ABS) K
(\(MAT\)\)) p
(.GT.) K
(TOL\) ) p
(THEN) K n
(            ) p
(CALL) K
( ) p
(SPINOR_PRINTMATRIX) l
(\(6,') p
(RHO[HRHO]-RHO) str
(',1,NCHI &) p n
(     &                           ,NDIMD,NCHI,MAT\)) N
(            ) S
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(TEST OF HRHO FAILED) str
('\)) p n
(            ) S
(CALL) K
( ) p
(ERROR$R8VAL) l
(\(') p
(MAX DEV OF RHO) str
(',) p
(MAXVAL) K
(\() p
(ABS) K
(\(MAT\)\)\)) p n
(            ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_HRHO) str
('\)) p n
(          ) S
(END) K
( ) p
(IF) K n
(        ) p
(ENDDO) K n
(      ) p
(END) K
( ) p
(IF) K n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ..........................................................................) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_EOFF) L
(\(KBT,F,E\)) p n
(!     **************************************************************************) c n
(!     ** CALCULATES ENERGY FROM F=1/\(1+EXP\(E/KBT\)\)                            **) N
(!     ** SMALL AND LARGE OCCUPATIONS ARE SIMPLIFIED BY LINEAR EXTRAPOLATION   **) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(REAL) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: KBT) p n
(      ) S
(REAL) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: F) p n
(      ) S
(REAL) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\) :: E) p n
(      ) S
(REAL) K
(\(8\),) p
(PARAMETER) K
(   :: FMIN=1.D-6) p n
(      ) S
(REAL) K
(\(8\)             :: F0,SLOPE,VAL) p n
(!     **************************************************************************) c n
(      ) p
(IF) K
(\(F) p
(.GT.) K
(FMIN) p
(.AND.) K
(F) p
(.LT.) K
(1.D0-FMIN\) ) p
(THEN) K n
(        E=) p
(LOG) K
(\(\(1.D0-F\)/F\)) p n
(      ) S
(ELSE) K
( ) p n
(        F0=FMIN) N
(        VAL=) S
(LOG) K
(\( \(1.D0-F0\)/F0 \)) p n
(        SLOPE=-1.D0/\( F0*\(1.D0-F0\) \)) N
(        ) S
(IF) K
(\(F) p
(.GT.) K
(0.5D0\) ) p
(THEN) K n
(          VAL=-VAL) p n
(          F0=1.D0-F0) N
(        ) S
(END) K
( ) p
(IF) K n
(        E=VAL+SLOPE*\(F-F0\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(      E=E*KBT) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_HRHO_TEST) L
(\(NCHI,NDIMD,NOMEGA,OMEGA,KBT,S,H,RHO\)) p n
(!     **************************************************************************) c n
(paw_dmft.f90) (Page 18/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (9/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (19-20) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!     ** CALCULATES THE DENSITY MATRIX FROM THE GREENS FUNCTION FOR           **) c n
(!     ** A SPECIFIED HAMILTONIAN H AND OVERLAP MATRIX S                       **) N
(!     **                                                                      **) N
(!     **  DOES NOT REFER TO ANY MODULES                                       **) N
(!     **  DOES OT KNOW K-POINTS                                               **) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NCHI) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NDIMD) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NOMEGA) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\)    :: KBT) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\)    :: OMEGA\(NOMEGA\)        ) p
(! MATSUBARA FREQUENCIES) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: S\(NCHI,NCHI,NDIMD\)   ) p
(! OVERLAP MATRIX) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: H\(NCHI,NCHI,NDIMD\)   ) p
(! HAMILTON MATRIX) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\)   :: RHO\(NCHI,NCHI,NDIMD\) ) p
(!DENSITY MATRIX) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(PARAMETER) K
(     :: CI=\(0.D0,1.D0\)  ) p
(! SQRT\(-1\)) c n
(      ) p
(COMPLEX) K
(\(8\)               :: MAT1\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: MAT2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: SINV\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(REAL) K
(\(8\)                  :: FN\(3\)) p n
(      ) S
(INTEGER) K
(\(4\)               :: NU,IDIMD) p n
(!     **************************************************************************) c n
(!       ) N
(!     ==========================================================================) N
(!     ==  MATSUBARA SUM                                                       ==) N
(!     ==========================================================================) N
(      RHO=\(0.D0,0.D0\)) p n
(      ) S
(DO) K
( NU=1,NOMEGA) p n
(!       == CONSTRUCT LATTICE GREENS FUNCTION ===================================) c n
(        MAT1=CI*OMEGA\(NU\)*S-H) p n
(        ) S
(CALL) K
( ) p
(SPINOR$INVERT) l
(\(NDIMD,NCHI,MAT1,MAT2\)  ) p
(!MAT2=G) c n
(        RHO=RHO+KBT*MAT2) p n
(      ) S
(ENDDO) K
( ) p
(! END LOOP OVER MATSUBARA FREQUENCIES) c n
(!     == INCLUDE NEGATIVE FREQUENCIES ==========================================) N
(      ) p
(DO) K
( IDIMD=1,NDIMD) p n
(        RHO\(:,:,IDIMD\)=RHO\(:,:,IDIMD\)+) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(RHO\(:,:,IDIMD\)\)\)) p n
(      ) S
(ENDDO) K n
(!     ) c n
(!     ==========================================================================) N
(!     ==  REGULARIZATION                                                      ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(DMFT_REGMATSUBARA) l
(\(KBT,NOMEGA,OMEGA,3,FN\)) p n
(      ) S
(CALL) K
( ) p
(SPINOR$INVERT) l
(\(NDIMD,NCHI,S,SINV\)) p n
(!     == GLAUR1=SINV ===========================================================) c n
(      RHO=RHO+FN\(1\)*SINV) p n
(!     == GLAUR2=SINV*H*SINV ====================================================) c n
(      ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,H,SINV,MAT1\)) p n
(      ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,SINV,MAT1,MAT2\)) p n
(      RHO=RHO+FN\(2\)*MAT2) N
(!     == GLAUR3=SINV*H*SINV*H*SINV =============================================) c n
(      ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT2,H,MAT1\)) p n
(      ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT1,SINV,MAT2\)) p n
(      RHO=RHO+FN\(3\)*MAT2) N
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_SOLVER) L
(\(ETOT\)) p n
(!     **************************************************************************) c n
(!     ** MIMICKS A DMFT SOLVER                                                **) N
(!     **  E=1/BETA * SUM_NU E\(IOMEGA_NU0+\) TR[ DV * GLOC^\\DAGGER]             **) N
(!     **************************************************************************) N
(paw_dmft.f90) (Page 19/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(USE) K
( ) p
(DMFT_MODULE) l
( ,) p
(ONLY) K
(: NAT,NDIMD,NOMEGA,KBT,ATOMSET) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(OUT) k
(\) :: ETOT) p n
(      ) S
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(   :: TPRINT=.FALSE.) p n
(      ) S
(REAL) K
(\(8\)                :: EV) p n
(      ) S
(REAL) K
(\(8\)                :: PHILW) p n
(      ) S
(REAL) K
(\(8\)                :: LHFWEIGHT) p n
(      ) S
(REAL) K
(\(8\)                :: EDC) p n
(      ) S
(INTEGER) K
(\(4\)             :: NLOC  ) p
(!#\(LOCAL ORBITALS ON THIS SITE\)) c n
(      ) p
(INTEGER) K
(\(4\)             :: LMNX  ) p
(!#\(LOCAL ORBITALS ON THIS SITE\)) c n
(      ) p
(INTEGER) K
(\(4\)             :: IAT) p n
(      ) S
(INTEGER) K
(\(4\)             :: IDIMD,I,J,LMN1,LMN2,NU) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: RHO\(:,:,:\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: HAM\(:,:,:\)) p n
(!     **************************************************************************) c n
(                                      ) p
(CALL) K
( ) p
(TRACE$PUSH) l
(\(') p
(DMFT_SOLVER) str
('\)) p n
(      ) S
(CALL) K
( ) p
(CONSTANTS) l
(\(') p
(EV) str
(',EV\)) p n
(!) c n
(!     ==========================================================================) N
(!     == LOOP OVER ATOMS                                                      ==) N
(!     ==========================================================================) N
(      ETOT=0.D0) p n
(      ) S
(DO) K
( IAT=1,NAT) p n
(        NLOC=ATOMSET\(IAT\)%NLOC) N
(        ) S
(IF) K
(\(NLOC) p
(.LE.) K
(0\) ) p
(CYCLE) K n
(!) c n
(        ATOMSET\(IAT\)%DENMAT%H=\(0.D0,0.D0\)) p n
(        ATOMSET\(IAT\)%SLOC=\(0.D0,0.D0\)) N
(        ATOMSET\(IAT\)%SLOCLAUR=\(0.D0,0.D0\)) N
(!) c n
(!       ========================================================================) N
(!       == DETERMINE HARTREE FOCK CONTRIBUTION                                ==) N
(!       ========================================================================) N
(        ) p
(ALLOCATE) K
(\(RHO\(NLOC,NLOC,NDIMD\)\)) p n
(        ) S
(ALLOCATE) K
(\(HAM\(NLOC,NLOC,NDIMD\)\)) p n
(        ) S
(DO) K
( I=1,NLOC) p n
(          ) S
(DO) K
( J=1,NLOC) p n
(            LMN1=ATOMSET\(IAT\)%DENMAT%LMN\(I\)) N
(            LMN2=ATOMSET\(IAT\)%DENMAT%LMN\(J\)) N
(            RHO\(I,J,:\)=ATOMSET\(IAT\)%DENMAT%RHO\(LMN1,LMN2,:\)) N
(          ) S
(ENDDO) K n
(        ) p
(ENDDO) K n
(        ) p
(CALL) K
( ) p
(DMFT_FOCK) l
(\(NLOC,NDIMD,RHO,ATOMSET\(IAT\)%U,PHILW,HAM\)) p n
(        ETOT=ETOT+PHILW  ) S
(!SCREENING DONE ALREADY IN U-TENSOR) c n
(PRINT) K
(*,') p
(AFTER FOCK ) str
(',IAT,ETOT,PHILW) p n
(        ) S
(DO) K
( I=1,NLOC) p n
(          ) S
(DO) K
( J=1,NLOC) p n
(            LMN1=ATOMSET\(IAT\)%DENMAT%LMN\(I\)) N
(            LMN2=ATOMSET\(IAT\)%DENMAT%LMN\(J\)) N
(            ATOMSET\(IAT\)%DENMAT%H\(LMN1,LMN2,:\) &) N
(     &                            =ATOMSET\(IAT\)%DENMAT%H\(LMN1,LMN2,:\)+HAM\(I,J,:\)) N
(          ) S
(ENDDO) K n
(        ) p
(ENDDO) K n
(!) c n
(!       == PRINT IF DESIRED ====================================================) N
(        ) p
(IF) K
(\(TPRINT\) ) p
(THEN) K n
(          ) p
(WRITE) K
(\(*,) p
(FMT) K
(=') p
(\(82\("="\),T10," ",A," IAT=",I4,"  "\)) str
('\) &) p n
(       &                        ') S
(FOCK HAMILTONIAN) str
(',IAT) p n
(          ) S
(DO) K
( IDIMD=1,NDIMD) p n
(            ) S
(DO) K
( I=1,NLOC) p n
(              ) S
(WRITE) K
(\(*,) p
(FMT) K
(=') p
(\(4I5,100F10.5\)) str
('\)IAT,NU,IDIMD,I,HAM\(I,:,IDIMD\)) p n
(            ) S
(ENDDO) K n
(paw_dmft.f90) (Page 20/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (10/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (21-22) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          ) p
(ENDDO) K n
(        ) p
(END) K
( ) p
(IF) K n
(!) c n
(        ) p
(DEALLOCATE) K
(\(RHO\)) p n
(        ) S
(DEALLOCATE) K
(\(HAM\)) p n
(!) c n
(!       ========================================================================) N
(!       == SUBTRACT DOUBLE COUNTING TERM                                      ==) N
(!       ========================================================================) N
(!       == COLLECT LOCAL HF WEIGHT =============================================) N
(        LHFWEIGHT=ATOMSET\(IAT\)%LHFWEIGHT) p n
(        LMNX=ATOMSET\(IAT\)%DENMAT%LMNX) N
(        ) S
(ALLOCATE) K
(\(HAM\(LMNX,LMNX,NDIMD\)\)) p n
(        ) S
(CALL) K
( ) p
(DMFT_DC) l
(\(IAT,LMNX,NDIMD,ATOMSET\(IAT\)%DENMAT%RHO,EDC,HAM\)) p n
(        ETOT=ETOT+LHFWEIGHT*EDC) N
(PRINT) K
(*,') p
(AFTER DC ) str
(',IAT,ETOT,LHFWEIGHT*EDC) p n
(        ATOMSET\(IAT\)%DENMAT%H=ATOMSET\(IAT\)%DENMAT%H+LHFWEIGHT*HAM) N
(!) c n
(!       == PRINT IF DESIRED ====================================================) N
(        ) p
(IF) K
(\(TPRINT\) ) p
(THEN) K n
(          ) p
(WRITE) K
(\(*,) p
(FMT) K
(=') p
(\(82\("="\),T10," ",A," IAT=",I4,"  "\)) str
('\) &) p n
(       &                        ') S
(DBLE-CNTNG HAMILTONIAN) str
(',IAT) p n
(          ) S
(DO) K
( IDIMD=1,NDIMD) p n
(            ) S
(DO) K
( I=1,LMNX) p n
(              ) S
(WRITE) K
(\(*,) p
(FMT) K
(=') p
(\(4I5,100F10.5\)) str
('\)IAT,NU,IDIMD,I,HAM\(I,:,IDIMD\) ) p n
(            ) S
(ENDDO) K n
(          ) p
(ENDDO) K n
(        ) p
(END) K
( ) p
(IF) K n
(!) c n
(        ) p
(DEALLOCATE) K
(\(HAM\)) p n
(!) c n
(!       ========================================================================) N
(!       == ADD DYNAMIC CONTRIBUTIONS                                          ==) N
(!       == HFWEIGHT IS ABSORBED IN THE LOCAL U-TENSOR) N
(!       ========================================================================) N
(        ) p
(CALL) K
( ) p
(DMFT_DYNAMICSOLVER) l
(\(NLOC,NDIMD,NOMEGA,KBT &) p n
(     &                         ,ATOMSET\(IAT\)%GLOC,ATOMSET\(IAT\)%GLOCLAUR &) N
(     &                         ,ATOMSET\(IAT\)%U,PHILW &) N
(     &                         ,ATOMSET\(IAT\)%SLOC,ATOMSET\(IAT\)%SLOCLAUR &) N
(     &                         ,ATOMSET\(IAT\)%DEDU &) N
(     &                         ,ATOMSET\(IAT\)%NATORB%PIPHI &) N
(     &                         ,ATOMSET\(IAT\)%NATORB%CHIPHI\)) N
(        ETOT=ETOT+PHILW ) S
(!SCREENING ALREADY CONTAINED IN U-TENSOR) c n
(      ) p
(ENDDO) K
( ) p
(! END OF LOOP OVER ATOMS \(IAT\)) c n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_DC) L
(\(IAT,LMNX,NDIMD,RHO,EDC,HAM\)) p n
(!     **************************************************************************) c n
(!     ** CALCULATES THE DFT EXCHANGE ENERGY FOR THE CORRELATED ORBITALS.      **) N
(!     ** EDC IS TO BE ADDED! TO THE TOTAL ENERGY \(MINUS SIGN IS INCLUDED\)     **) N
(!     **                                                                      **) N
(!     ** REMARK: SOME ROUTINES ONLY WORK IN THE NON-COLLINEAR MODE            **) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(LMTO_MODULE,) l
( ) p
(ONLY) K
( : ISPECIES,POTPAR) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: IAT) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: LMNX          ) p
(!  #\(LOCAL ORBITALS ON THIS SITE\)) c n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: NDIMD) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(OUT) k
(\) :: EDC           ) p
(! -E_\(DFT-EXCHANGE\)) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: RHO\(LMNX,LMNX,NDIMD\) ) p
(! DENSITY MATRIX) c n
(paw_dmft.f90) (Page 21/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\) :: HAM\(LMNX,LMNX,NDIMD\) ) p
(! HAMILTONIAN CONTRIB.) c n
(      ) p
(REAL) K
(\(8\)                :: D\(LMNX,LMNX,4\)) p n
(      ) S
(REAL) K
(\(8\)                :: H\(LMNX,LMNX,4\)) p n
(      ) S
(REAL) K
(\(8\)                :: HALL\(LMNX,LMNX,4\)) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(ALLOCATABLE) K
( :: DT\(:,:,:\)    ) p
(!\(LMNXT,LMNXT,NDIMD\)) c n
(      ) p
(REAL) K
(\(8\)   ,) p
(ALLOCATABLE) K
( :: DTALL\(:,:,:\) ) p
(!\(LMNXT,LMNXT,NDIMD\)) c n
(      ) p
(REAL) K
(\(8\)   ,) p
(ALLOCATABLE) K
( :: HT\(:,:,:\)    ) p
(!\(LMNXT,LMNXT,NDIMD\)) c n
(      ) p
(REAL) K
(\(8\)   ,) p
(ALLOCATABLE) K
( :: HTALL\(:,:,:\) ) p
(!\(LMNXT,LMNXT,NDIMD\)) c n
(      ) p
(REAL) K
(\(8\)                :: EX) p n
(      ) S
(INTEGER) K
(\(4\)             :: IDFTTYPE) p n
(      ) S
(INTEGER) K
(\(4\)             :: LMNXT   ) p
(! #\(VALENCE+SCATTERING WAVES\)) c n
(      ) p
(INTEGER) K
(\(4\)             :: LNXT    ) p
(! #\(VALENCE+SCATTERING WAVES W/O M\)) c n
(      ) p
(INTEGER) K
(\(4\),) p
(ALLOCATABLE) K
( :: LOXT\(:\)  ) p n
(      ) S
(INTEGER) K
(\(4\)             :: LRX) p n
(      ) S
(INTEGER) K
(\(4\)             :: LMRX    ) p
(! #\(SPHERICAL HARMONICS IN THE DENSITY\)) c n
(      ) p
(INTEGER) K
(\(4\)             :: GID     ) p
(! GRID ID) c n
(      ) p
(INTEGER) K
(\(4\)             :: NR      ) p
(! #\(GRID POINTS\)) c n
(      ) p
(REAL) K
(\(8\)   ,) p
(ALLOCATABLE) K
( :: AECORE\(:\) ) p
(!\(NR\) CORE DENSITY) c n
(      ) p
(INTEGER) K
(\(4\)             :: ISP) p n
(!     **************************************************************************) c n
(      HAM=0.D0) p n
(      ) S
(CALL) K
( ) p
(DFT$GETI4) l
(\(') p
(TYPE) str
(',IDFTTYPE\)) p n
(      ) S
(PRINT) K
(*,') p
(IDFTTYPE ) str
(',IDFTTYPE) p n
(      ) S
(IF) K
(\(IDFTTYPE) p
(.EQ.) K
(5002\) ) p
(RETURN) K n
(!) c n
(!     ==========================================================================) N
(!     == COLLECT DATA                                                         ==) N
(!     ==========================================================================) N
(      ISP=ISPECIES\(IAT\)) p n
(      ) S
(CALL) K
( ) p
(SETUP$ISELECT) l
(\(ISP\)) p n
(      ) S
(CALL) K
( ) p
(SETUP$GETI4) l
(\(') p
(GID) str
(',GID\)) p n
(      ) S
(CALL) K
( ) p
(RADIAL$GETI4) l
(\(GID,') p
(NR) str
(',NR\)) p n
(      ) S
(ALLOCATE) K
(\(AECORE\(NR\)\)) p n
(      ) S
(CALL) K
( ) p
(SETUP$GETR8A) l
(\(') p
(AECORE) str
(',NR,AECORE\)) p n
(      ) S
(CALL) K
( ) p
(SETUP$GETI4) l
(\(') p
(LMRX) str
(',LMRX\)) p n
(      ) S
(CALL) K
( ) p
(SETUP$UNSELECT) l
(\(\)) p n
(      LRX=) S
(INT) K
(\() p
(SQRT) K
(\() p
(REAL) K
(\(LMRX\)+1.D-8\)\)-1) p n
(      LMNXT=POTPAR\(ISP\)%TAILED%LMNX  ) S
(! SIZE OF U-TENSOR ON POTPAR) c n
(      LNXT=POTPAR\(ISP\)%TAILED%LNX  ) p n
(      ) S
(ALLOCATE) K
(\(LOXT\(LNXT\)\)) p n
(      LOXT=POTPAR\(ISP\)%TAILED%LOX  ) N
(!) c n
(!     ==========================================================================) N
(!     ==  MAP INTO NON-COLLINEAR ARRAYS, KEEP ONLY REAL PART                  ==) N
(!     ==========================================================================) N
(      D\(:,:,:\)=0.D0) p n
(      D\(:,:,1\)=) S
(REAL) K
(\(RHO\(:,:,1\)\)) p n
(      ) S
(IF) K
(\(NDIMD) p
(.EQ.) K
(2\) ) p
(THEN) K
( ) p n
(        D\(:,:,4\)=) S
(REAL) K
(\(RHO\(:,:,2\)\)) p n
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(        D\(:,:,2:4\)=) p
(REAL) K
(\(RHO\(:,:,2:4\)\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(!     ==========================================================================) N
(!     ==  MAP ONTO REAL ARRAY. \(T,X,Y,Z\) REPRESENTATION                       ==) N
(!     ==========================================================================) N
(      ) p
(ALLOCATE) K
(\(DTALL\(LMNXT,LMNXT,4\)\)) p n
(      ) S
(ALLOCATE) K
(\(DT\(LMNXT,LMNXT,4\)\)) p n
(      ) S
(ALLOCATE) K
(\(HTALL\(LMNXT,LMNXT,4\)\)) p n
(      ) S
(ALLOCATE) K
(\(HT\(LMNXT,LMNXT,4\)\)) p n
(      ) S
(CALL) K
( ) p
(LMTO_BLOWUPDENMATNL) l
(\(IAT,IAT,4,LMNX,LMNX,D,LMNXT,LMNXT,DT\)) p n
(      POTPAR\(ISP\)%TALLORB=.TRUE.) N
(paw_dmft.f90) (Page 22/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (11/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (23-24) 12
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(CALL) K
( ) p
(LMTO_BLOWUPDENMATNL) l
(\(IAT,IAT,4,LMNX,LMNX,D,LMNXT,LMNXT,DTALL\)) p n
(      ) S
(CALL) K
( ) p
(LMTO_SIMPLEDC) l
(\(GID,NR,LMNXT,LNXT,LOXT,POTPAR\(ISP\)%TAILED%AEF &) p n
(     &                  ,LRX,AECORE,DT,DTALL,EX,HT,HTALL\)) N
(      ) S
(CALL) K
( ) p
(LMTO_SHRINKDOWNHTNL) l
(\(IAT,IAT,4,LMNXT,LMNXT,HTALL,LMNX,LMNX,HALL\)) p n
(      POTPAR\(ISP\)%TALLORB=.FALSE.  ) S
(! DO NOT FORGET THIS!!!!!) c n
(      ) p
(CALL) K
( ) p
(LMTO_SHRINKDOWNHTNL) l
(\(IAT,IAT,4,LMNXT,LMNXT,HT,LMNX,LMNX,H\)) p n
(      EDC=-EX) N
(      H=-\(H+HALL\)) N
(PRINT) K
(*,') p
(DOUBLE COUNTING CORRECTION ENERGY FOR ATOM=) str
(',IAT,-EX) p n
(!) c n
(!     ==========================================================================) N
(!     ==  MAP BACK FROM  NON-COLLINEAR ARRAYS                                 ==) N
(!     ==========================================================================) N
(      HAM=0.D0) p n
(      HAM\(:,:,1\)=) S
(CMPLX) K
(\(H\(:,:,1\)\)) p n
(      ) S
(IF) K
(\(NDIMD) p
(.EQ.) K
(2\) ) p
(THEN) K n
(         HAM\(:,:,2\)=) p
(CMPLX) K
(\(H\(:,:,4\)\)) p n
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(         HAM\(:,:,2:4\)=) p
(CMPLX) K
(\(H\(:,:,2:4\)\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_DETOT) L
(\(ETOT\)) p n
(!     **************************************************************************) c n
(!     ** CALCULATES THE ENERGY CONTRIBUTION FROM THE LOGARISHM TERM ETC       **) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
(: NAT,NKPTL,NCHI,NDIMD,NOMEGA,OMEGA,KBT,MU &) p n
(     &                      ,ATOMSET,KSET) N
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(OUT) k
(\) :: ETOT) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(PARAMETER) K
(   :: CI=\(0.D0,1.D0\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: MAT1\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: MAT2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: MAT3\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(REAL) K
(\(8\)                :: VEC\(NCHI\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: BMAT1\(:,:\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: BMAT2\(:,:\)) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(ALLOCATABLE) K
( :: BVEC\(:\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: GRHO\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: GFULL\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(REAL) K
(\(8\)                :: XSUM) p n
(      ) S
(REAL) K
(\(8\)                :: ETOT1) p n
(      ) S
(INTEGER) K
(\(4\)             :: NU,I,IAT,I1,I2,IDIMD,IKPT) p n
(!     **************************************************************************) c n
(      ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(        ) p
(ALLOCATE) K
(\(BMAT1\(2*NCHI,2*NCHI\)\)) p n
(        ) S
(ALLOCATE) K
(\(BMAT2\(2*NCHI,2*NCHI\)\)) p n
(        ) S
(ALLOCATE) K
(\(BVEC\(2*NCHI\)\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ETOT=0.D0) p n
(      ) S
(DO) K
( IKPT=1,NKPTL) p n
(        ETOT1=0.D0) N
(        ) S
(DO) K
( NU=1,NOMEGA) p n
(!         == CALCULATE GRHO ====================================================) c n
(          MAT1=\(CI*OMEGA\(NU\)+MU\)*KSET\(IKPT\)%SMAT-KSET\(IKPT\)%HRHO) p n
(          ) S
(CALL) K
( ) p
(SPINOR$INVERT) l
(\(NDIMD,NCHI,MAT1,GRHO\)) p n
(!     ) c n
(!         == HPRIME+SIGMA-HRHO =================================================) N
(          MAT2=KSET\(IKPT\)%H0-KSET\(IKPT\)%HRHO) p n
(          ) S
(DO) K
( IAT=1,NAT) p n
(paw_dmft.f90) (Page 23/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            I1=ATOMSET\(IAT\)%ICHI1) p n
(            I2=ATOMSET\(IAT\)%ICHI2) N
(            MAT2\(I1:I2,I1:I2,:\)=MAT2\(I1:I2,I1:I2,:\)+ATOMSET\(IAT\)%SLOC\(:,:,:,NU\)) N
(          ) S
(ENDDO) K n
(!     ) c n
(!         == CALCULATE G =======================================================) N
(          MAT1=MAT1-MAT2) p n
(          ) S
(CALL) K
( ) p
(SPINOR$INVERT) l
(\(NDIMD,NCHI,MAT1,GFULL\)) p n
(!     ) c n
(!         ======================================================================) N
(!         == CONSTRAINT TERM) N
(!         ======================================================================) N
(          ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,GRHO-GFULL &) p n
(    &                       ,KSET\(IKPT\)%H0-KSET\(IKPT\)%HRHO,MAT1\) ) N
(          XSUM=0.D0) N
(          ) S
(DO) K
( I=1,NCHI) p n
(            XSUM=XSUM+2.D0*) S
(REAL) K
(\(MAT1\(I,I,1\)\)  ) p
(! FACTOR TWO COMES FROM \(-OMEGA\)) c n
(          ) p
(ENDDO) K n
(          ETOT1=ETOT1+XSUM) p n
(!     ) c n
(!         ======================================================================) N
(!         == \(HPRIME+SIGMA-HRHO\)*G                                            ==) N
(!         ======================================================================) N
(          ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT2,GFULL,MAT1\) ) p n
(          XSUM=0.D0) N
(          ) S
(DO) K
( I=1,NCHI) p n
(            XSUM=XSUM+2.D0*) S
(REAL) K
(\(MAT1\(I,I,1\)\)  ) p
(! FACTOR TWO COMES FROM \(-OMEGA\)) c n
(          ) p
(ENDDO) K n
(          ETOT1=ETOT1+XSUM) p n
(!     ) c n
(!         ======================================================================) N
(!         == LOGARITHM TERM                                                   ==) N
(!         ==                                                                  ==) N
(!         == I AM USING THE TRICK OF DAHLEN, PHYS.REV.A 73,P12511 \(2006\) EQ. B7=) N
(!         == \(THE MATH BEHIND THE TRICK NEEDS TO BE CHECKED\).                 ==) N
(!         ==                                                                  ==) N
(!         == NOT USED IS THE POTENTIALLY MORE EFFICIENT ROUTE USING           ==) N
(!         == TR[LN\(A\)]=LN\(DET[A]\). ACCORDING TO ROBERT SCHADE THE DETERMINANT ==) N
(!         == IS CALCULATED EFFICIENTLY VIA THE LU DECOMPOSITION IN LAPACK     ==) N
(!         ======================================================================) N
(          ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,GRHO,MAT2,MAT1\) ) p
(!MAT1=GRHO*MAT1) c n
(          ) p
(DO) K
( I=1,NCHI) p n
(            MAT1\(I,I,1\)=MAT1\(I,I,1\)+\(2.D0,0.D0\) ) S
(!\(UNIT IN SPINOR REPRESENTATION\)) c n
(          ) p
(ENDDO) K n
(          ) p
(DO) K
( IDIMD=1,NDIMD  ) p
(! MAT2\(OMEGA\)=MAT1\(-OMEGA\)) c n
(            MAT2\(:,:,IDIMD\)=) p
(TRANSPOSE) K
(\() p
(CONJG) K
(\(MAT1\(:,:,IDIMD\)\)\)) p n
(          ) S
(ENDDO) K n
(          ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT1,MAT2,MAT3\) ) p
(!MAT1=GRHO*MAT1) c n
(          ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,MAT3\) ) p
(!MAT1=GRHO*MAT1) c n
(          ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(            BMAT1\(:NCHI,:NCHI\)    =MAT3\(:,:,1\)) p n
(            BMAT1\(NCHI+1:,:NCHI\)  =MAT3\(:,:,2\)) N
(            BMAT1\(:NCHI,NCHI+1:\)  =MAT3\(:,:,3\)) N
(            BMAT1\(NCHI+1:,NCHI+1:\)=MAT3\(:,:,4\)) N
(            ) S
(CALL) K
( ) p
(LIB$DIAGC8) l
(\(2*NCHI,BMAT1,BVEC,BMAT2\)) p n
(            XSUM=0.D0) N
(            ) S
(DO) K
( I=1,2*NCHI) p n
(              XSUM=XSUM+) S
(LOG) K
(\(BVEC\(I\)\)) p n
(            ) S
(ENDDO) K n
(            ETOT1=ETOT1+XSUM) p n
(          ) S
(ELSE) K n
(            XSUM=0.D0) p n
(paw_dmft.f90) (Page 24/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (12/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (25-26) 13
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            ) p
(DO) K
( IDIMD=1,NDIMD) p n
(              ) S
(CALL) K
( ) p
(LIB$DIAGC8) l
(\(NCHI,MAT3\(:,:,IDIMD\),VEC,MAT1\(:,:,IDIMD\)\)) p n
(              ) S
(DO) K
( I=1,NCHI) p n
(                XSUM=XSUM+) S
(LOG) K
(\(VEC\(I\)\)  ) p
(!SLOW BUT AVOIDS OVERFLOWS              ) c n
(              ) p
(ENDDO) K n
(            ) p
(ENDDO) K n
(            ETOT1=ETOT1+XSUM) p n
(          ) S
(END) K
( ) p
(IF) K n
(        ) p
(ENDDO) K
( ) p
(! END OF LOOP OVER MATSUBARA FREQUENCIES) c n
(        ETOT=ETOT+KSET\(IKPT\)%WKPT*ETOT1) p n
(      ) S
(ENDDO) K
( ) p
(! END OF LOOK OVER K-POINTS) c n
(      ETOT=-KBT*ETOT) p n
(PRINT) K
(*,') p
(ETOT FROM DMFT_DETOT: ) str
(',ETOT) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_UTENSOR) L
(\(\)) p n
(!     **************************************************************************) c n
(!     ** CALCULATE THE U-TENSOR OF THE CORRELATED ORBITALS IN THE SELECTED SET) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(LMTO_MODULE,) l
( ) p
(ONLY) K
(: ISPECIES,LNX,LOX,POTPAR) p n
(      ) S
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
(: NAT,ATOMSET) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(REAL) K
(\(8\)  ,) p
(ALLOCATABLE) K
( :: UB\(:,:,:,:\)) p n
(      ) S
(INTEGER) K
(\(4\)            :: ISP ) p
(! ATOM TYPE) c n
(      ) p
(INTEGER) K
(\(4\)            :: L,LN,LMN,ICHI) p n
(      ) S
(INTEGER) K
(\(4\)            :: LMNX) p n
(      ) S
(INTEGER) K
(\(4\)            :: NCHI1        ) p
(! #\(SELECTED ORBITALS ON THIS ATOM\)) c n
(      ) p
(INTEGER) K
(\(4\)            :: IAT) p n
(!     **************************************************************************) c n
(                                          ) p
(CALL) K
( ) p
(TRACE$PUSH) l
(\(') p
(DMFT_UTENSOR) str
('\)) p n
(      ) S
(DO) K
( IAT=1,NAT) p n
(        ISP=ISPECIES\(IAT\)) N
(!) c n
(!       ========================================================================) N
(!       == CALCULATE LOCAL DIMENSIONS LMNX AND NCHI1 ===========================) N
(!       ========================================================================) N
(        LMN=0) p n
(        ICHI=0) N
(        ) S
(DO) K
( LN=1,LNX\(ISP\)) p n
(          L=LOX\(LN,ISP\)) N
(          ) S
(IF) K
(\(POTPAR\(ISP\)%TORB\(LN\)\) ICHI=ICHI+2*L+1) p n
(          LMN=LMN+2*L+1) N
(        ) S
(ENDDO) K n
(        LMNX=LMN) p n
(        NCHI1=ICHI) N
(        ) S
(IF) K
(\(NCHI1) p
(.EQ.) K
(0\) ) p
(CYCLE) K n
(        ) p
(IF) K
(\(NCHI1) p
(.NE.) K
(ATOMSET\(IAT\)%NLOC\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT ARRAY DIMENSIONS) str
('\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_UTENSOR) str
('\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(!) c n
(!       ========================================================================) N
(!       ==  CALCULATE U-TENSOR IN THE BASIS OF LOCAL ORBITALS IGNORING TORB   ==) N
(!       ========================================================================) N
(        ) p
(ALLOCATE) K
(\(UB\(LMNX,LMNX,LMNX,LMNX\)\)) p n
(        ) S
(CALL) K
( ) p
(DMFT_ULOCAL) l
(\(IAT,LMNX,UB\)) p n
(!) c n
(!       ========================================================================) N
(!       ==  THROW OUT ELEMENTS THAT ARE NOT USED                              ==) N
(!       ========================================================================) N
(paw_dmft.f90) (Page 25/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        LMN=0) p n
(        ICHI=0) N
(        ) S
(DO) K
( LN=1,LNX\(ISP\)) p n
(          L=LOX\(LN,ISP\)) N
(          ) S
(IF) K
(\(POTPAR\(ISP\)%TORB\(LN\)\) ) p
(THEN) K n
(            UB\(:,:,:,ICHI+1:ICHI+2*L+1\)=UB\(:,:,:,LMN+1:LMN+2*L+1\)) p n
(            ICHI=ICHI+2*L+1) N
(          ) S
(END) K
( ) p
(IF) K n
(          LMN=LMN+2*L+1) p n
(        ) S
(ENDDO) K n
(!  ) c n
(!       ========================================================================) N
(        LMN=0) p n
(        ICHI=0) N
(        ) S
(DO) K
( LN=1,LNX\(ISP\)) p n
(          L=LOX\(LN,ISP\)) N
(          ) S
(IF) K
(\(POTPAR\(ISP\)%TORB\(LN\)\) ) p
(THEN) K n
(            UB\(:,:,ICHI+1:ICHI+2*L+1,:NCHI1\)=UB\(:,:,LMN+1:LMN+2*L+1,:NCHI1\)) p n
(            ICHI=ICHI+2*L+1) N
(          ) S
(END) K
( ) p
(IF) K n
(          LMN=LMN+2*L+1) p n
(        ) S
(ENDDO) K n
(!  ) c n
(!       ========================================================================) N
(        LMN=0) p n
(        ICHI=0) N
(        ) S
(DO) K
( LN=1,LNX\(ISP\)) p n
(          L=LOX\(LN,ISP\)) N
(          ) S
(IF) K
(\(POTPAR\(ISP\)%TORB\(LN\)\) ) p
(THEN) K n
(            UB\(:,ICHI+1:ICHI+2*L+1,:NCHI1,:NCHI1\) &) p n
(      &                                     =UB\(:,LMN+1:LMN+2*L+1,:NCHI1,:NCHI1\)) N
(            ICHI=ICHI+2*L+1) N
(          ) S
(END) K
( ) p
(IF) K n
(          LMN=LMN+2*L+1) p n
(        ) S
(ENDDO) K n
(!  ) c n
(!       ========================================================================) N
(        LMN=0) p n
(        ICHI=0) N
(        ) S
(DO) K
( LN=1,LNX\(ISP\)) p n
(          L=LOX\(LN,ISP\)) N
(          ) S
(IF) K
(\(POTPAR\(ISP\)%TORB\(LN\)\) ) p
(THEN) K n
(            UB\(ICHI+1:ICHI+2*L+1,:NCHI1,:NCHI1,:NCHI1\) &) p n
(       &                               =UB\(LMN+1:LMN+2*L+1,:NCHI1,:NCHI1,:NCHI1\)) N
(            ICHI=ICHI+2*L+1) N
(          ) S
(END) K
( ) p
(IF) K n
(          LMN=LMN+2*L+1) p n
(        ) S
(ENDDO) K
(  ) p n
(!) c n
(!       ========================================================================) N
(!       ==  PUT ONTO ATOMSET                                                  ==) N
(!       ========================================================================) N
(        ATOMSET\(IAT\)%U=UB\(:NCHI1,:NCHI1,:NCHI1,:NCHI1\)) p n
(        ) S
(DEALLOCATE) K
(\(UB\)) p n
(!) c n
(!       ========================================================================) N
(!       == SCREEN U-TENSOR BY LOCAL HF-WEIGHT                                 ==) N
(!       ========================================================================) N
(        ATOMSET\(IAT\)%U=ATOMSET\(IAT\)%LHFWEIGHT*ATOMSET\(IAT\)%U) p n
(!) c n
(      ) p
(ENDDO) K
(  ) p
(! END LOOP OVER ATOMS) c n
(                                          ) p
(CALL) K
( ) p
(TRACE$POP) l
(\(\)) p n
(paw_dmft.f90) (Page 26/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (13/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (27-28) 14
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_ULOCAL) L
(\(IAT,LMNX,U\)) p n
(!     **************************************************************************) c n
(!     **  CALCULATES THE U-TENSOR OF THE NATURAL TIGHT-BINDING ORBITALS       **) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(LMTO_MODULE,) l
( ) p
(ONLY) K
( : ISPECIES,POTPAR,SBAR,SBARLI1,LNX,LOX) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: IAT) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: LMNX          ) p
(!  #\(LOCAL ORBITALS ON THIS SITE\)) c n
(      ) p
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(OUT) k
(\) :: U\(LMNX,LMNX,LMNX,LMNX\)) p n
(      ) S
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(   :: TTEST=.TRUE.) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(ALLOCATABLE) K
( :: UT\(:,:,:,:\)) p n
(      ) S
(INTEGER) K
(\(4\)             :: ISP     ) p
(! ATOM TYPE) c n
(      ) p
(INTEGER) K
(\(4\)             :: LMNXT   ) p
(! #\(VALENCE+SCATTERING WAVES\)) c n
(      ) p
(INTEGER) K
(\(4\)             :: LMX     ) p
(! #\(SCATTERING WAVES\)) c n
(      ) p
(INTEGER) K
(\(4\)             :: NNS     ) p
(! #\(PAIRS FOR STRUCTURE CONSTANTS\)) c n
(      ) p
(REAL) K
(\(8\)                :: SVAR) p n
(      ) S
(INTEGER) K
(\(4\)             :: LMN,L,LM,LN,IM,NN,NN0,J) p n
(!     **************************************************************************) c n
(      ISP=ISPECIES\(IAT\)) p n
(      LMNXT=POTPAR\(ISP\)%TAILED%LMNX  ) S
(! SIZE OF U-TENSOR ON POTPAR) c n
(!) N
(!     ==========================================================================) N
(!     == COLLECT U-TENSOR IN EXPANDED BASIS                                   ==) N
(!     ==========================================================================) N
(      ) p
(ALLOCATE) K
(\(UT\(LMNXT,LMNXT,LMNXT,LMNXT\)\)) p n
(      UT=POTPAR\(ISP\)%TAILED%U) N
(!) c n
(!     ==========================================================================) N
(!     == TEST CONSISTENCY OF ARRAY DIMENSIONS                                 ==) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\(TTEST\) ) p
(THEN) K n
(        LMN=0) p n
(        ) S
(DO) K
( LN=1,LNX\(ISP\)) p n
(          L=LOX\(LN,ISP\)) N
(          LMN=LMN+2*L+1 ) N
(        ) S
(ENDDO) K n
(        ) p
(IF) K
(\(LMN) p
(.NE.) K
(LMNX\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT ARRAY DIMENSIONS) str
('\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(CALCULATED LMNX) str
(',LMN\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(INPUT LMNX) str
(',LMNX\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_ULOCAL) str
('\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(        LM=0) p n
(        ) S
(DO) K
( LN=1,LNX\(ISP\)) p n
(          L=LOX\(LN,ISP\)) N
(          LM=) S
(MAX) K
(\(LM,SBARLI1\(L+1,ISP\)-1+\(2*L+1\)\)) p n
(        ) S
(ENDDO) K n
(        ) p
(IF) K
(\(LMNX+LM) p
(.NE.) K
(LMNXT\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT ARRAY DIMENSIONS) str
('\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(CALCULATED LMNXT) str
(',LMNX+LM\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(LMNX FROM POTPAR%TAILED) str
(',LMNXT\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_ULOCAL) str
('\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(      ) p
(END) K
( ) p
(IF) K n
(!) c n
(!     ==========================================================================) N
(!     == COLLECT STRUCTURE CONSTANTS                                          ==) N
(!     ==========================================================================) N
(paw_dmft.f90) (Page 27/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      LMX=LMNXT-LMNX) p n
(      NNS=) S
(SIZE) K
(\(SBAR\)) p n
(      ) S
(DO) K
( NN=1,NNS) p n
(        ) S
(IF) K
(\(SBAR\(NN\)%IAT1) p
(.NE.) K
(IAT\) ) p
(CYCLE) K n
(        ) p
(IF) K
(\(SBAR\(NN\)%IAT2) p
(.NE.) K
(IAT\) ) p
(CYCLE) K n
(        ) p
(IF) K
(\() p
(SUM) K
(\(SBAR\(NN\)%IT\(:\)**2\)) p
(.NE.) K
(0\) ) p
(CYCLE) K n
(        ) p
(IF) K
(\(SBAR\(NN\)%N1) p
(.NE.) K
(LMX) p
(.OR.) K
(SBAR\(NN\)%N2) p
(.NE.) K
(LMX\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT ARRAY DIMENSIONS FOR SBAR) str
('\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(LMX=LMNXT-LMNX) str
(',LMX\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(SBAR%N1) str
(',SBAR\(NN\)%N1\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(SBAR%N2) str
(',SBAR\(NN\)%N2\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_ULOCAL) str
('\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(        NN0=NN) p n
(        ) S
(EXIT) K n
(      ) p
(ENDDO) K n
(      NN=NN0) p n
(!) c n
(!     ==========================================================================) N
(!     == DOWNFOLD UTENSOR) N
(!     ==   |KBAR_I>=|K_I>-\\SUM_J |JBAR_J> SBAR\(I,J\)                           ==) N
(!     ==========================================================================) N
(!      U\(:,:,::\)=POTPAR\(ISP\)%TAILED%U\(:LMNX,:LMNX,:LMNX,:LMNX\)) N
(      LMN=0) p n
(      ) S
(DO) K
( LN=1,LNX\(ISP\)) p n
(        L=LOX\(LN,ISP\)) N
(        LM=SBARLI1\(L+1,ISP\)-1) N
(        ) S
(DO) K
( IM=1,2*L+1 ) p n
(          LMN=LMN+1) N
(          LM=LM+1) N
(          ) S
(DO) K
( J=1,LMX) p n
(            SVAR=SBAR\(NN\)%MAT\(LM,J\)   ) N
(            UT\(:,:,:,LMN\)=UT\(:,:,:,LMN\)-SVAR*UT\(:,:,:,LMNX+J\)) N
(          ) S
(ENDDO) K n
(        ) p
(ENDDO) K n
(      ) p
(ENDDO) K n
(!) c n
(      LMN=0) p n
(      ) S
(DO) K
( LN=1,LNX\(ISP\)) p n
(        L=LOX\(LN,ISP\)) N
(        LM=SBARLI1\(L+1,ISP\)-1) N
(        ) S
(DO) K
( IM=1,2*L+1 ) p n
(          LMN=LMN+1) N
(          LM=LM+1) N
(          ) S
(DO) K
( J=1,LMX) p n
(            SVAR=SBAR\(NN\)%MAT\(LM,J\)   ) N
(            UT\(:,:,LMN,:LMNX\)=UT\(:,:,LMN,:LMNX\)-SVAR*UT\(:,:,LMNX+J,:LMNX\)) N
(          ) S
(ENDDO) K n
(        ) p
(ENDDO) K n
(      ) p
(ENDDO) K n
(!) c n
(      LMN=0) p n
(      ) S
(DO) K
( LN=1,LNX\(ISP\)) p n
(        L=LOX\(LN,ISP\)) N
(        LM=SBARLI1\(L+1,ISP\)-1) N
(        ) S
(DO) K
( IM=1,2*L+1 ) p n
(          LMN=LMN+1) N
(          LM=LM+1) N
(          ) S
(DO) K
( J=1,LMX) p n
(            SVAR=SBAR\(NN\)%MAT\(LM,J\)   ) N
(            UT\(:,LMN,:LMNX,:LMNX\)=UT\(:,LMN,:LMNX,:LMNX\) &) N
(      &                         -SVAR*UT\(:,LMNX+J,:LMNX,:LMNX\)) N
(paw_dmft.f90) (Page 28/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (14/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (29-30) 15
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          ) p
(ENDDO) K n
(        ) p
(ENDDO) K n
(      ) p
(ENDDO) K n
(!) c n
(      LMN=0) p n
(      ) S
(DO) K
( LN=1,LNX\(ISP\)) p n
(        L=LOX\(LN,ISP\)) N
(        LM=SBARLI1\(L+1,ISP\)-1) N
(        ) S
(DO) K
( IM=1,2*L+1 ) p n
(          LMN=LMN+1) N
(          LM=LM+1) N
(          ) S
(DO) K
( J=1,LMX) p n
(            SVAR=SBAR\(NN\)%MAT\(LM,J\)   ) N
(            UT\(LMN,:LMNX,:LMNX,:LMNX\)=UT\(LMN,:LMNX,:LMNX,:LMNX\) &) N
(                                     -SVAR*UT\(LMNX+J,:LMNX,:LMNX,:LMNX\)) N
(          ) S
(ENDDO) K n
(        ) p
(ENDDO) K n
(      ) p
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     == MAP ON SMALLER ARRAY                                                 ==) N
(!     ==========================================================================) N
(      U=UT\(:LMNX,:LMNX,:LMNX,:LMNX\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_DYNAMICSOLVER) L
(\(NLOC,NDIMD,NOMEGA,KBT &) p n
(     &                        ,GLOC,GLOCLAUR,UCHI,ETOT,SLOC,SLOCLAUR,DEDUCHI &) N
(     &                        ,PIPHI,CHIPHI\)) N
(!     **************************************************************************) c n
(!     **                                                                      **) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: NLOC) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: NDIMD) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: NOMEGA) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\)  :: KBT) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: PIPHI\(2*NLOC,2*NLOC\)  ) p
(!<PI|NATORB>) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: CHIPHI\(2*NLOC,2*NLOC\) ) p
(!<CHI|NATORB>) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: GLOC\(NLOC,NLOC,NDIMD,NOMEGA\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: GLOCLAUR\(NLOC,NLOC,NDIMD,3\)) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\)  :: UCHI\(NLOC,NLOC,NLOC,NLOC\)) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(OUT) k
(\) :: ETOT) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\) :: SLOC\(NLOC,NLOC,NDIMD,NOMEGA\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\) :: SLOCLAUR\(NLOC,NLOC,NDIMD,3\)) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(OUT) k
(\) :: DEDUCHI\(NLOC,NLOC,NLOC,NLOC\)) p n
(      ) S
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(   :: TPRINT=.FALSE.) p n
(      ) S
(COMPLEX) K
(\(8\)             :: U\(2*NLOC,2*NLOC,2*NLOC,2*NLOC\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: DEDU\(2*NLOC,2*NLOC,2*NLOC,2*NLOC\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: V\(2*NLOC,2*NLOC,2*NLOC,2*NLOC\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: G\(2*NLOC,2*NLOC,NOMEGA\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: GLAUR\(2*NLOC,2*NLOC,3\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: S\(2*NLOC,2*NLOC,NOMEGA\)) p n
(      ) S
(COMPLEX) K
(\(8\)             :: SLAUR\(2*NLOC,2*NLOC,3\)) p n
(      ) S
(INTEGER) K
(\(4\)             :: NU,I,J) p n
(      ) S
(INTEGER) K
(\(4\)             :: NFIL) p n
(!     **************************************************************************) c n
(                                     ) p
(CALL) K
( ) p
(TRACE$PUSH) l
(\(') p
(DMFT$HFSOLVER) str
('\)) p n
(!) c n
(!     ==========================================================================) N
(!     == CONVERT U-TENSOR                                                     ==) N
(paw_dmft.f90) (Page 29/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!     ==========================================================================) c n
(      U\(  :NLOC,  :NLOC,  :NLOC,  :NLOC\)=UCHI                              ) p n
(      U\(NLOC+1:,NLOC+1:,NLOC+1:,NLOC+1:\)=UCHI                              ) N
(      ) S
(DO) K
( I=1,2*NLOC) p n
(        V=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( J=1,2*NLOC) p n
(          V\(I,:,:,:\)=V\(I,:,:,:\)+) S
(CONJG) K
(\(PIPHI\(J,I\)\)*U\(J,:,:,:\)) p n
(        ) S
(ENDDO) K n
(      ) p
(ENDDO) K n
(      ) p
(DO) K
( I=1,2*NLOC) p n
(        U=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( J=1,2*NLOC) p n
(          U\(:,I,:,:\)=U\(:,I,:,:\)+) S
(CONJG) K
(\(PIPHI\(J,I\)\)*V\(:,J,:,:\)) p n
(        ) S
(ENDDO) K n
(      ) p
(ENDDO) K n
(      ) p
(DO) K
( I=1,2*NLOC) p n
(        V=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( J=1,2*NLOC) p n
(          V\(:,:,I,:\)=V\(:,:,I,:\)+U\(:,:,J,:\)*PIPHI\(J,I\)) N
(        ) S
(ENDDO) K n
(      ) p
(ENDDO) K n
(      ) p
(DO) K
( I=1,2*NLOC) p n
(        U=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( J=1,2*NLOC) p n
(          U\(:,:,:,I\)=U\(:,:,:,I\)+V\(:,:,:,J\)*PIPHI\(J,I\)) N
(        ) S
(ENDDO) K n
(      ) p
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     == CONVERT GREENS FUNCTION                                              ==) N
(!     ==========================================================================) N
(      ) p
(DO) K
( NU=1,NOMEGA) p n
(        ) S
(CALL) K
( ) p
(SPINOR$BLOWUP) l
(\(NDIMD,NLOC,GLOC\(:,:,:,NU\),G\(:,:,NU\)\)) p n
(        G\(:,:,NU\)=) S
(MATMUL) K
(\() p
(TRANSPOSE) K
(\() p
(CONJG) K
(\(CHIPHI\)\),) p
(MATMUL) K
(\(G\(:,:,NU\),CHIPHI\)\)) p n
(      ) S
(ENDDO) K n
(      ) p
(DO) K
( I=1,3) p n
(        ) S
(CALL) K
( ) p
(SPINOR$BLOWUP) l
(\(NDIMD,NLOC,GLOCLAUR\(:,:,:,I\),GLAUR\(:,:,I\)\)) p n
(        GLAUR\(:,:,I\)=) S
(MATMUL) K
(\() p
(TRANSPOSE) K
(\() p
(CONJG) K
(\(CHIPHI\)\) &) p n
(     &                      ,) S
(MATMUL) K
(\(GLAUR\(:,:,I\),CHIPHI\)\)) p n
(      ) S
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     == WRITE DATA) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(DMFT_SOLVERIO) l
(\(2*NLOC,NOMEGA,KBT,G,GLAUR,U,ETOT,S,SLAUR,DEDU\)) p n
(!) c n
(!     ==========================================================================) N
(!     == CONVERT GREENS FUNCTION                                              ==) N
(!     ==========================================================================) N
(      ) p
(DO) K
( NU=1,NOMEGA) p n
(        S\(:,:,NU\)=) S
(MATMUL) K
(\(CHIPHI,) p
(MATMUL) K
(\(S\(:,:,NU\),) p
(CONJG) K
(\() p
(TRANSPOSE) K
(\(CHIPHI\)\)\)\)) p n
(        ) S
(CALL) K
( ) p
(SPINOR$SHRINKDOWN) l
(\(NDIMD,NLOC,S\(:,:,NU\),SLOC\(:,:,:,NU\)\)) p n
(      ) S
(ENDDO) K n
(      ) p
(DO) K
( I=1,3) p n
(        SLAUR\(:,:,I\)=) S
(MATMUL) K
(\(CHIPHI,) p
(MATMUL) K
(\(SLAUR\(:,:,I\) &) p n
(     &                                   ,) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(CHIPHI\)\)\)\)) p n
(        ) S
(CALL) K
( ) p
(SPINOR$SHRINKDOWN) l
(\(NDIMD,NLOC,SLAUR\(:,:,I\),SLOCLAUR\(:,:,:,I\)\)) p n
(      ) S
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     == CONVERT DERIVATIVE OF U-TENSOR                                       ==) N
(!     ==========================================================================) N
(paw_dmft.f90) (Page 30/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (15/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (31-32) 16
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      U=DEDU) p n
(      ) S
(DO) K
( I=1,2*NLOC) p n
(        V=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( J=1,2*NLOC) p n
(          V\(I,:,:,:\)=V\(I,:,:,:\)+) S
(CONJG) K
(\(PIPHI\(I,J\)\)*U\(J,:,:,:\)) p n
(        ) S
(ENDDO) K n
(      ) p
(ENDDO) K n
(      ) p
(DO) K
( I=1,2*NLOC) p n
(        U=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( J=1,2*NLOC) p n
(          U\(:,I,:,:\)=U\(:,I,:,:\)+) S
(CONJG) K
(\(PIPHI\(I,J\)\)*V\(:,J,:,:\)) p n
(        ) S
(ENDDO) K n
(      ) p
(ENDDO) K n
(      ) p
(DO) K
( I=1,2*NLOC) p n
(        V=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( J=1,2*NLOC) p n
(          V\(:,:,I,:\)=V\(:,:,I,:\)+U\(:,:,J,:\)*PIPHI\(I,J\)) N
(        ) S
(ENDDO) K n
(      ) p
(ENDDO) K n
(      ) p
(DO) K
( I=1,2*NLOC) p n
(        U=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( J=1,2*NLOC) p n
(          U\(:,:,:,I\)=U\(:,:,:,I\)+V\(:,:,:,J\)*PIPHI\(I,J\)) N
(        ) S
(ENDDO) K n
(      ) p
(ENDDO) K n
(      DEDUCHI=) p
(REAL) K
(\(U\(  :NLOC,  :NLOC,  :NLOC,  :NLOC\) &) p n
(     &            +U\(NLOC+1:,NLOC+1:,NLOC+1:,NLOC+1:\)\)) N
(                                     ) S
(CALL) K
( ) p
(TRACE$POP) l
(\(\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_SOLVERIO) L
(\(NORB,NOMEGA,KBT,G,GLAUR,U,ETOT,S,SLAUR,DEDU\)) p n
(!     **************************************************************************) c n
(!     ** INTERFACE ROUTINE FOR THE COMMUNICATION WITH THE DMFT SOLVER         **) N
(!     ** THE SPIN-UP ORBITALS ARE STORED FIRST AND THEN THE SPIN-DOWN         **) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NORB     ) p
(!#\(SPIN ORBITALS\)) c n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NOMEGA   ) p
(!#\(POSITIVE MATSUBARA FREQUENCIES) c n
(      ) p
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\) :: KBT      ) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\) :: G\(NORB,NORB,NOMEGA\)    ) p
(!GREENS FUNCTION) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\) :: GLAUR\(NORB,NORB,3\)     ) p
(!LAURENT EXPANSION OF G) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\) :: U\(NORB,NORB,NORB,NORB\) ) p
(!U-TENSOR) c n
(      ) p
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(OUT) k
(\):: ETOT                   ) p
(!LUTTINGER WARD FUNCTIONAL) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\):: S\(NORB,NORB,NOMEGA\)    ) p
(!SELF ENERGY) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\):: SLAUR\(NORB,NORB,3\)     ) p
(!LAURENT EXPANSION OF S) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\):: DEDU\(NORB,NORB,NORB,NORB\) ) p n
(      ) S
(INTEGER) K
(\(4\)            :: NORB_,NOMEGA_) p n
(      ) S
(INTEGER) K
(\(4\)            :: NFIL) p n
(!     **************************************************************************) c n
(CALL) K
( ) p
(TESTG) l
(\(NORB,NOMEGA,KBT,G,GLAUR\)) p n
(      ETOT=0.D0) N
(      S=\(0.D0,0.D0\)) N
(      SLAUR=\(0.D0,0.D0\)) N
(      DEDU=\(0.D0,0.D0\)) N
(      ) S
(RETURN) K n
(!) c n
(!     ==========================================================================) N
(!     == WRITE DATA) N
(!     ==========================================================================) N
(!WARNING!! THE TWO FILES ARE NOT YET DEFINED) N
(paw_dmft.f90) (Page 31/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!CAREFUL: IN FORTRAN, THE FIRST INDEX RUNS FIRST) c n
(      ) p
(CALL) K
( ) p
(FILEHANDLER$UNIT) l
(\(') p
(DMFTOSOLVER) str
(',NFIL\)) p n
(      ) S
(REWIND) K
( NFIL) p n
(      ) S
(WRITE) K
(\(NFIL,*\)NORB,NOMEGA,KBT) p n
(      ) S
(WRITE) K
(\(NFIL,) p
(FMT) K
(=') p
(\(2F20.10\)) str
('\)G) p n
(      ) S
(WRITE) K
(\(NFIL,) p
(FMT) K
(=') p
(\(2F20.10\)) str
('\)GLAUR) p n
(      ) S
(WRITE) K
(\(NFIL,) p
(FMT) K
(=') p
(\(2F20.10\)) str
('\)U) p n
(      ) S
(CALL) K
( ) p
(FILEHANDLER$CLOSE) l
(\(NFIL\)) p n
(!) c n
(!     ==========================================================================) N
(!     == READ DATA DATA) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(FILEHANDLER$UNIT) l
(\(') p
(SOLVERTODMFT) str
(',NFIL\)) p n
(      ) S
(REWIND) K
( NFIL) p n
(      ) S
(READ) K
(\(NFIL,*\)NORB_,NOMEGA_,ETOT) p n
(      ) S
(READ) K
(\(NFIL,) p
(FMT) K
(=') p
(\(2F20.10\)) str
('\)S) p n
(      ) S
(READ) K
(\(NFIL,) p
(FMT) K
(=') p
(\(2F20.10\)) str
('\)SLAUR) p n
(      ) S
(READ) K
(\(NFIL,) p
(FMT) K
(=') p
(\(2F20.10\)) str
('\)DEDU) p n
(      ) S
(CALL) K
( ) p
(FILEHANDLER$CLOSE) l
(\(NFIL\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(TESTG) L
(\(NORB,NOMEGA,KBT,G,GLAUR\)) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NORB     ) p
(!#\(SPIN ORBITALS\)) c n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NOMEGA   ) p
(!#\(POSITIVE MATSUBARA FREQUENCIES) c n
(      ) p
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\) :: KBT      ) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\) :: G\(NORB,NORB,NOMEGA\)    ) p
(!GREENS FUNCTION) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\) :: GLAUR\(NORB,NORB,3\)     ) p
(!LAURENT EXPANSION OF G) c n
(      ) p
(REAL) K
(\(8\)               :: PI) p n
(      ) S
(INTEGER) K
(\(4\)            :: NU,I) p n
(      ) S
(REAL) K
(\(8\)               :: OMEGA\(NOMEGA\)) p n
(      ) S
(COMPLEX) K
(\(8\)            :: RHO\(NORB,NORB\)) p n
(      ) S
(REAL) K
(\(8\)               :: FN\(3\)) p n
(!     **************************************************************************) c n
(      PI=4.D0*) p
(ATAN) K
(\(1.D0\)) p n
(      RHO=\(0.D0,0.D0\)) N
(      ) S
(DO) K
( NU=1,NOMEGA) p n
(        OMEGA\(NU\)=) S
(REAL) K
(\(2*NU-1,) p
(KIND) K
(=8\)*PI*KBT) p n
(        RHO=RHO+KBT*G\(:,:,NU\)) N
(      ) S
(ENDDO) K n
(      RHO=RHO+) p
(TRANSPOSE) K
(\() p
(CONJG) K
(\(RHO\)\)) p n
(      ) S
(CALL) K
( ) p
(DMFT_REGMATSUBARA) l
(\(KBT,NOMEGA,OMEGA,3,FN\)) p n
(      RHO=RHO+GLAUR\(:,:,1\)*FN\(1\) &) N
(     &       +GLAUR\(:,:,2\)*FN\(2\) &) N
(     &       +GLAUR\(:,:,3\)*FN\(3\) ) N
(!) c n
(      ) p
(WRITE) K
(\(*,) p
(FMT) K
(=') p
(\(100\("="\),T30,"  ",A,"  "\)) str
('\)') p
(DENSITY MATRIX IN TESTG) str
(') p n
(      ) S
(DO) K
( I=1,NORB) p n
(        ) S
(WRITE) K
(\(*,) p
(FMT) K
(=') p
(\(100\("\(",2F10.5,"\)"\)\)) str
('\)RHO\(I,:\)) p n
(      ) S
(ENDDO) K n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_FOCK) L
(\(NLOC,NDIMD,RHO,UCHI,ETOT,HAM\)) p n
(!     **************************************************************************) c n
(!     **                                                                      **) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: NLOC) p n
(paw_dmft.f90) (Page 32/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (16/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (33-34) 17
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: NDIMD) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: RHO\(NLOC,NLOC,NDIMD\)) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\)  :: UCHI\(NLOC,NLOC,NLOC,NLOC\)) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(OUT) k
(\) :: ETOT) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\) :: HAM\(NLOC,NLOC,NDIMD\)) p n
(      ) S
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(   :: TPRINT=.FALSE.) p n
(      ) S
(INTEGER) K
(\(4\)             :: I,J,K,L) p n
(      ) S
(REAL) K
(\(8\)                :: SVAR) p n
(!     **************************************************************************) c n
(                                     ) p
(CALL) K
( ) p
(TRACE$PUSH) l
(\(') p
(DMFT_FOCK) str
('\)) p n
(!) c n
(!     ==========================================================================) N
(!     == CALCULATE HARTREE FOCK POTENTIAL                                     ==) N
(!     ==========================================================================) N
(      ETOT=0.D0) p n
(      HAM=\(0.D0,0.D0\)) N
(      ) S
(DO) K
( I=1,NLOC) p n
(        ) S
(DO) K
( J=1,NLOC) p n
(          ) S
(DO) K
( K=1,NLOC) p n
(            ) S
(DO) K
( L=1,NLOC) p n
(              SVAR=-0.25D0*UCHI\(I,J,K,L\) ) N
(              ) S
(IF) K
(\(SVAR) p
(.EQ.) K
(0.D0\) ) p
(CYCLE) K n
(              ETOT=ETOT+SVAR*) p
(REAL) K
(\() p
(SUM) K
(\(RHO\(K,J,:\)*RHO\(L,I,:\)\)\)) p n
(              HAM\(K,J,:\)=HAM\(K,J,:\)+SVAR*RHO\(I,L,:\)) N
(              HAM\(I,L,:\)=HAM\(I,L,:\)+SVAR*RHO\(K,J,:\)) N
(            ) S
(ENDDO) K n
(          ) p
(ENDDO) K n
(        ) p
(ENDDO) K n
(      ) p
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     == PRINT IF DESIRED                                                     ==) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\(TPRINT\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(SPINOR$PRINTMATRIX) l
(\(6 &) p n
(     &                      ,') S
(DENMAT \(TXYZ\) IN DMFT$HFSOLVER_WITHSET) str
(',') p
(TXYZ) str
(' &) p n
(     &                      ,1,NLOC,NDIMD,NLOC,RHO\)) N
(        ) S
(CALL) K
( ) p
(SPINOR$PRINTMATRIX) l
(\(6 &) p n
(     &                      ,') S
(H_XC \(TXYZ\) IN DMFT$HFSOLVER_WITHSET) str
(',') p
(TXYZ) str
(' &) p n
(     &                      ,1,NLOC,NDIMD,NLOC,HAM\)) N
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(                                     ) p
(CALL) K
( ) p
(TRACE$POP) l
(\(\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_CONSTRAINTS_WITHKSET) L
(\() p
(TYPE) K
(\)) p n
(!     **************************************************************************) c n
(!     **  ADJUSTS H0\(:,:,IKPT,IPSIN\) SUCH THAT                                **) N
(!     **                                                                      **) N
(!     **  G\(K,NU\)=<PI\(K\)|PSI\(K\)> &                                            **) N
(!     **         /[I*OMEGA_NU+MU-<PSI\(K\)|PI>\(H0\(K\)-SIGMA\(NU\)\)<PI\(K\)|PSI\(K\)>] &**) N
(!     **         *<PSI\(K\)|PI\(K\)>                                              **) N
(!     **                                                                      **) N
(!     **  PRODUCES THE SAME K-DEPENDENT DENSITY MATRIX AS GRHO                **) N
(!     **                                                                      **) N
(!     **  GRHO\(K,NU\)=<PI\(K\)|PSI\(K\)>/[I*OMEGA_NU+MU-HRHO\(K\)]<PI\(K\)|PSI\(K\)>     **) N
(!     **                                                                      **) N
(!     **                                                                      **) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
(: TON,NCHI,NKPTL,NSPIN,NDIMD,NAT,NOMEGA &) p n
(paw_dmft.f90) (Page 33/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     &                      ,OMEGA,KBT,MU,AMIX,KSET,ATOMSET) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(CHARACTER) K
(\(*\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: ) p
(TYPE) K
(  ) p
(! CAN BE 'HRHO','H0') c n
(      ) p
(REAL) K
(\(8\)   ,) p
(PARAMETER) K
(     :: TOL=1.D-5) p n
(      ) S
(INTEGER) K
(\(4\),) p
(PARAMETER) K
(     :: NITER=500) p n
(      ) S
(CHARACTER) K
(\(16\)            :: MIXTYPE) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(PARAMETER) K
(     :: CI=\(0.D0,1.D0\)  ) p
(! SQRT\(-1\)) c n
(      ) p
(COMPLEX) K
(\(8\)               :: MAT\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: MAT2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: MAT3\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: G\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR\(NCHI,NCHI,NDIMD,3\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR1\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR3\(NCHI,NCHI,NDIMD\)) p n
(!      COMPLEX\(8\)               :: S\(NCHI,NCHI,NDIMD\)) c n
(      ) p
(COMPLEX) K
(\(8\)               :: SLAUR1\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: SLAUR2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: SLAUR3\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: DEVRHO\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
(   :: X4\(:,:,:\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: DH0\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(LOGICAL) K
(\(4\)               :: CONVG) p n
(      ) S
(REAL) K
(\(8\)                  :: MAXDEV) p n
(      ) S
(COMPLEX) K
(\(8\)               :: CSVAR) p n
(      ) S
(INTEGER) K
(\(4\)               :: IKPT,ITER,IDIMD,NU,IAT) p n
(      ) S
(INTEGER) K
(\(4\)               :: I1,I2) p n
(      ) S
(LOGICAL) K
(\(4\)               :: TH0) p n
(      ) S
(INTEGER) K
(\(4\)               :: LX4 ) p
(! FIRST DIMENSION OF X4) c n
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
(   :: X4SAVE\(:,:,:\)) p n
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
(   :: X4VEC\(:\)) p n
(REAL) K
(\(8\) :: AMP=1.D-3) p n
(COMPLEX) K
(\(8\)               :: DHAM1\(NCHI,NCHI,NDIMD\)) p n
(COMPLEX) K
(\(8\)               :: DHAM2\(NCHI,NCHI,NDIMD\)) p n
(COMPLEX) K
(\(8\)               :: DRHO1\(NCHI,NCHI,NDIMD\)) p n
(COMPLEX) K
(\(8\)               :: DRHO2\(NCHI,NCHI,NDIMD\)) p n
(INTEGER) K
(\(4\) :: ISPIN) p n
(REAL) K
(\(8\)    :: EIG\(NCHI\)) p n
(COMPLEX) K
(\(8\) :: U\(NCHI,NCHI\)) p n
(!     **************************************************************************) c n
(                              ) p
(CALL) K
( ) p
(TRACE$PUSH) l
(\(') p
(DMFT_CONSTRAINTS_WITHKSET) str
('\)) p n
(      TH0=\() S
(TYPE.EQ.) K
(') p
(H0) str
('\) ) p n
(      ) S
(IF) K
(\() p
(.NOT.) K
(\(TH0) p
(.OR.TYPE.EQ.) K
(') p
(HRHO) str
('\)\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(ILLEGAL VALUE OF TYPE. \(MAY BE "H0" OR "HRHO"\)) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(TYPE) str
(',) p
(TYPE) K
(\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_CONSTRAINTS_WITHKSET) str
('\)     ) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(IF) K
(\() p
(.NOT.) K
(TH0\)  ) p
(THEN) K n
(        ) p
(DO) K
( IKPT=1,NKPTL) p n
(          KSET\(IKPT\)%H0=\(0.D0,0.D0\)) N
(        ) S
(ENDDO) K n
(      ) p
(END) K
( ) p
(IF) K n
(!) c n
(!     == ALLOCATE X4 ===========================================================) N
(      ) p
(IF) K
(\(NDIMD) p
(.LE.) K
(2\) ) p
(THEN) K n
(        LX4=NCHI**2) p n
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(        LX4=\(2*NCHI\)**2) p n
(      ) S
(ENDIF) K n
(      ) p
(ALLOCATE) K
(\(X4\(LX4,LX4,NSPIN\)\)) p n
() N
(DO) K
( ISPIN=1,NSPIN) p n
(paw_dmft.f90) (Page 34/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (17/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (35-36) 18
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  ) p
(DO) K
( IKPT=1,NKPTL) p n
(    ) S
(CALL) K
( ) p
(LIB$DIAGC8) l
(\(NCHI,KSET\(IKPT\)%RHO\(:,:,ISPIN\),EIG\(:NCHI\),U\)) p n
(    ) S
(PRINT) K
(*,') p
(EIGENVALUES OF RHO ) str
(',ISPIN,EIG\(:NCHI\)) p n
(  ) S
(ENDDO) K n
(ENDDO) N
() p n
() N
(!!$DHAM1=\(0.D0,0.D0\)) c n
(!!$DHAM1\(3,5,1\)=AMP) N
(!!$DHAM1\(2,5,2\)=AMP) N
(!!$CALL SPINOR$CONVERT\('FWRD',NCHI,NDIMD,DHAM1\) ! CONVERT TO 0XYZ) N
(!!$CALL DMFT_TESTRHO\(TYPE,NCHI,NDIMD,DHAM1,DRHO1\)) N
(!!$CALL DMFT_TESTRHO\(TYPE,NCHI,NDIMD,-DHAM1,DRHO2\)) N
(!!$DHAM2=\(DRHO2-DRHO1\)/\(2.D0*AMP\)) N
(!!$CALL SPINOR_PRINTMATRIX\(6,'HAM NUMERICAL ',1,NCHI,NDIMD,NCHI,DHAM2\)) N
(!       ) N
(!     ========================================================================) N
(!     ==  DEVIATION FROM TARGET DENSITY MATRIX                              ==) N
(!     ========================================================================) N
(      ) p
(DO) K
( IKPT=1,NKPTL) p n
(!       == LAURENT EXPANSION FOR THE GREENS FUNCTION =========================) c n
(        SLAUR1=\(0.D0,0.D0\)) p n
(        SLAUR2=\(0.D0,0.D0\)) N
(        SLAUR3=\(0.D0,0.D0\)) N
(        ) S
(IF) K
(\(TH0\) ) p
(THEN) K n
(          ) p
(DO) K
( IAT=1,NAT) p n
(            I1=ATOMSET\(IAT\)%ICHI1) N
(            I2=ATOMSET\(IAT\)%ICHI2) N
(            SLAUR1\(I1:I2,I1:I2,:\)=ATOMSET\(IAT\)%SLOCLAUR\(:,:,:,1\)) N
(            SLAUR2\(I1:I2,I1:I2,:\)=ATOMSET\(IAT\)%SLOCLAUR\(:,:,:,2\)) N
(            SLAUR3\(I1:I2,I1:I2,:\)=ATOMSET\(IAT\)%SLOCLAUR\(:,:,:,3\)) N
(          ) S
(ENDDO) K n
(        ) p
(END) K
( ) p
(IF) K n
(        GLAUR1=KSET\(IKPT\)%SINV) p n
(!       ) c n
(!       ========================================================================) N
(!       ==  ADJUST H0 TO OBEY DENSITY MATRIX CONSTRAINT                       ==) N
(!       ========================================================================) N
(        ) p
(DO) K
( ITER=1,NITER) p n
(          MAT=-MU*KSET\(IKPT\)%SMAT) N
(          MAT=MAT+KSET\(IKPT\)%H0) N
(          ) S
(IF) K
(\(TH0\) MAT=MAT+SLAUR1\(:,:,:\)) p n
(!         == GLAUR2=SINV*MAT*SINV ==============================================) c n
(          ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT,KSET\(IKPT\)%SINV,MAT2\)) p n
(          ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,KSET\(IKPT\)%SINV,MAT2,GLAUR2\)) p n
(!) c n
(          MAT=-MU*KSET\(IKPT\)%SMAT) p n
(          MAT=MAT+KSET\(IKPT\)%H0) N
(          ) S
(IF) K
(\(TH0\) MAT=MAT+SLAUR1\(:,:,:\)) p n
(!         == MAT3=MAT*\(SINV*MAT\) ===============================================) c n
(          ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT,KSET\(IKPT\)%SINV,MAT2\)) p n
(          ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT,MAT2,MAT3\)) p n
(          ) S
(IF) K
(\(TH0\) MAT3=MAT3+SLAUR2\(:,:,:\)) p n
(!         == GLAUR3=SINV*\(MAT3*SINV\) ===========================================) c n
(          ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT3,KSET\(IKPT\)%SINV,MAT\)) p n
(          ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,KSET\(IKPT\)%SINV,MAT,GLAUR3\)) p n
(!) c n
(          X4=\(0.D0,0.D0\)        ) p n
(          DEVRHO=\(0.D0,0.D0\)) N
(          ) S
(DO) K
( NU=1,NOMEGA) p n
(        ) N
(!           == CONSTRUCT LATTICE GREENS FUNCTION =============================) c n
(paw_dmft.f90) (Page 35/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            MAT=\(CI*OMEGA\(NU\)+MU\)*KSET\(IKPT\)%SMAT) p n
(            MAT=MAT-KSET\(IKPT\)%H0) N
(            ) S
(IF) K
(\(TH0\) ) p
(THEN) K n
(              ) p
(DO) K
( IAT=1,NAT) p n
(                I1=ATOMSET\(IAT\)%ICHI1) N
(                I2=ATOMSET\(IAT\)%ICHI2) N
(                MAT\(I1:I2,I1:I2,:\)=MAT\(I1:I2,I1:I2,:\) &) N
(     &                            -ATOMSET\(IAT\)%SLOC\(:,:,:,NU\)) N
(              ) S
(ENDDO) K n
(            ) p
(END) K
( ) p
(IF) K n
(            ) p
(CALL) K
( ) p
(SPINOR$INVERT) l
(\(NDIMD,NCHI,MAT,G\)) p n
(!!$CALL SPINOR_PRINTMATRIX\(6,'G DIRECT ',1,NCHI,NDIMD,NCHI,G\)) c n
(!!$CALL SPINOR_PRINTMATRIX\(6,'G TEST ',1,NCHI,NDIMD,NCHI &) N
(!!$&                   ,KSET\(IKPT\)%SINV/\(CI*OMEGA\(NU\)\)\)) N
(!!$PRINT*,'KBT ',KBT) N
(!!$STOP 'FORCED') N
(!           == SUBTRACT LAURENT EXPANSION TO IMPROVE OMEGA-CONVERGENCE =========) N
(            CSVAR=1.D0/\(CI*OMEGA\(NU\)\)) p n
(            DEVRHO=DEVRHO+KBT*\(G-CSVAR*\(GLAUR1+CSVAR*\(GLAUR2+CSVAR*GLAUR3\)\)\)) N
(!) c n
(!           == ACCUMULATE SECOND ORDER TERM ====================================) N
(            ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,G\) ) p
(! CONVERT TO UPDOWN) c n
(            ) p
(CALL) K
( ) p
(DMFT_ADDX4) l
(\(NDIMD,NCHI,G,LX4,NSPIN,X4\)) p n
(          ) S
(ENDDO) K
( ) p
(! END LOOP OVER MATSUBARA FREQUENCIES) c n
(          X4=X4*KBT) p n
(!) c n
(!         == INCLUDE NEGATIVE FREQUENCIES ======================================) N
(!         == ALREADY INCLUDED FOR X4) N
(          ) p
(DO) K
( IDIMD=1,NDIMD) p n
(            DEVRHO\(:,:,IDIMD\)=DEVRHO\(:,:,IDIMD\) &) N
(     &                       +) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(DEVRHO\(:,:,IDIMD\)\)\)) p n
(          ) S
(ENDDO) K n
(!         == ADD TAILS \(GLAUR3 DOES NOT CONTRIBUTE\) ============================) c n
(          DEVRHO=DEVRHO+0.5D0*GLAUR1-0.25D0/KBT*GLAUR2) p n
(!RHO0=0.5D0*KET\(IKPT\)%SINV) c n
() p n
(!!$CALL SPINOR_PRINTMATRIX\(6,'DEVRHO DIRECT ',1,NCHI,NDIMD,NCHI,DEVRHO\)) c n
(!!$CALL SPINOR_PRINTMATRIX\(6,'DEVRHO TEST ',1,NCHI,NDIMD,NCHI &) N
(!!$&                   ,KSET\(IKPT\)%SINV/2.D0\)) N
(!!$PRINT*,'KBT ',KBT) N
(!!$STOP 'FORCED') N
(!) N
(!         == SUBTRACT TARGET DENSITY ===========================================) N
(!!$CALL SPINOR_PRINTMATRIX\(6,'RHO FROM G ',1,NCHI,NDIMD,NCHI,DEVRHO\)) N
(!!$CALL SPINOR_PRINTMATRIX\(6,'KSET%RHO   ',1,NCHI,NDIMD,NCHI,KSET\(IKPT\)%RHO\)) N
(          DEVRHO=DEVRHO-KSET\(IKPT\)%RHO) p n
(!) c n
(!         == REGULARIZE X4 =====================================================) N
(          GLAUR\(:,:,:,1\)=GLAUR1) p n
(          GLAUR\(:,:,:,2\)=GLAUR2) N
(          GLAUR\(:,:,:,3\)=GLAUR3) N
(          ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,GLAUR\(:,:,:,1\)\) ) p
(! CNVRTTO UPD) c n
(OWN) N
(          ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,GLAUR\(:,:,:,2\)\) ) p
(! CNVRTTO UPD) c n
(OWN) N
(          ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,GLAUR\(:,:,:,3\)\) ) p
(! CNVRTTO UPD) c n
(OWN) N
(          ) p
(CALL) K
( ) p
(DMFT_ADDX4LAUR) l
(\(NDIMD,NCHI,KBT,NOMEGA,OMEGA,GLAUR,LX4,NSPIN,X4\)) p n
(IF) K
(\() p
(.NOT.ALLOCATED) K
(\(X4SAVE\)\) ) p
(THEN) K n
(ALLOCATE) S
(\(X4SAVE\(LX4,LX4,NSPIN\)\)) p n
(  X4SAVE=X4) N
(!!$  DO ISPIN=1,NSPIN) c n
(paw_dmft.f90) (Page 36/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (18/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (37-38) 19
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!!$    DO I1=1,NCHI**2) c n
(!!$      DO I2=1,NCHI**2) N
(!!$        IF\(ABS\(X4\(I1,I2,ISPIN\)\).GT.1.D-3\) THEN) N
(!!$          PRINT*,'X4 ',I1,I2,ISPIN,X4\(I1,I2,ISPIN\)) N
(!!$        END IF) N
(!!$      ENDDO) N
(!!$    ENDDO) N
(!!$  ENDDO) N
(ELSE) K n
(  X4=X4SAVE) p n
(END) K
( ) p
(IF) K n
() p n
(!) c n
(DO) K
( ISPIN=1,NSPIN) p n
(    ) S
(CALL) K
( ) p
(LIB$DIAGC8) l
(\(NCHI,KSET\(IKPT\)%RHO\(:,:,ISPIN\)+DEVRHO\(:,:,ISPIN\),EIG\(:NCHI\),) p n
(U\)) N
(    ) S
(PRINT) K
(*,') p
(EIGENVALUES OF RHO ) str
(',ISPIN,EIG\(:NCHI\)) p n
(IF) K
(\() p
(MINVAL) K
(\(EIG\)) p
(.LT.) K
(0.D0) p
(.OR.MAXVAL) K
(\(EIG\)) p
(.GT.) K
(1.D0\) ) p
(THEN) K n
(   ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(OCCUPATIONS OUT OF RANGE) str
('\)) p n
(   ) S
(CALL) K
( ) p
(ERROR$R8VAL) l
(\(') p
(MAX\(F\)) str
(',) p
(MAXVAL) K
(\(EIG\)\)) p n
(   ) S
(CALL) K
( ) p
(ERROR$R8VAL) l
(\(') p
(MIN\(F\)) str
(',) p
(MINVAL) K
(\(EIG\)\)) p n
(   ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_CONSTRAINTS_WITHKSET) str
('\)) p n
(END) K
( ) p
(IF) K n
(ENDDO) N
(!) c n
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,DEVRHO\) ) p
(! CONVERT TO UPDOWN) c n
(MAXDEV=) p
(MAXVAL) K
(\() p
(ABS) K
(\(DEVRHO\)\)) p n
(DO) K
( IDIMD=1,NDIMD) p n
(    ) S
(PRINT) K
(*,') p
(ITER=) str
(',ITER,') p
( IKPT=) str
(',IKPT,') p
( IDIMD=) str
(',IDIMD &) p n
(  &       ,') S
( MAXVAL\(ABS\(X4\)\)  ) str
(',) p
(MAXVAL) K
(\() p
(ABS) K
(\(X4\(:,:,IDIMD\)\)\) &) p n
(  &       ,') S
( MAX\(DEVRHO\) ) str
(',) p
(MAXVAL) K
(\() p
(ABS) K
(\(DEVRHO\(:,:,IDIMD\)\)\)) p n
(ENDDO) K n
(CALL) S
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,DEVRHO\) ) p
(! CONVERT TO TXYZ) c n
(!) N
(!          MIXTYPE='MIX') N
(!          MIXTYPE='LINEAR') N
(          MIXTYPE=') p
(LINEAR0) str
(') p n
(          ) S
(IF) K
(\(MIXTYPE) p
(.EQ.) K
(') p
(MIX) str
('\) ) p
(THEN) K n
(            DH0=AMIX*DEVRHO) p n
(          ) S
(ELSE) K
( ) p
(IF) K
(\(MIXTYPE) p
(.EQ.) K
(') p
(LINEAR) str
('\) ) p
(THEN) K n
(!) c n
(!!$ALLOCATE\(X4VEC\(LX4\)\)) N
(!!$CALL SPINOR$CONVERT\('BACK',NCHI,NDIMD,DHAM1\) ! CONVERT TO UPDOWN) N
(!!$DO ISPIN=1,NSPIN) N
(!!$  DO I1=1,NCHI) N
(!!$    DO I2=1,NCHI) N
(!!$      X4VEC\(I1+NCHI*\(I2-1\)\)=DHAM1\(I1,I2,ISPIN\)) N
(!!$    ENDDO) N
(!!$  ENDDO) N
(!!$  X4VEC=MATMUL\(X4\(:,:,ISPIN\),X4VEC\)) N
(!!$  DO I1=1,NCHI) N
(!!$    DO I2=1,NCHI) N
(!!$      DRHO2\(I1,I2,ISPIN\)=X4VEC\(I1+NCHI*\(I2-1\)\)) N
(!!$    ENDDO) N
(!!$  ENDDO) N
(!!$ENDDO) N
(!!$DRHO2=DRHO2/AMP) N
(!!$CALL SPINOR$CONVERT\('FWRD',NCHI,NDIMD,DRHO2\) ! CONVERT TO 0XYZ) N
(!!$CALL SPINOR_PRINTMATRIX\(6,'DRHO ANALYTICAL ',1,NCHI,NDIMD,NCHI,DRHO2\)) N
() p n
(            ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,DEVRHO\) ) p
(! CONVERT TO UPDOWN) c n
(!           == DEVRHO+X4*DH0=0 -> DH0) N
(paw_dmft.f90) (Page 37/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            ) p
(CALL) K
( ) p
(DMFT_SOLVEX4) l
(\(NDIMD,NCHI,DEVRHO,LX4,NSPIN,X4,DH0\)) p n
(            ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,DH0\)    ) p
(! CONVERT TO TXYZ) c n
(!            DH0=0.5D0*DH0   !PART OF THE CONVERSION FOR HAMILTONIANS) N
(          ) p
(ELSE) K
( ) p
(IF) K
(\(MIXTYPE) p
(.EQ.) K
(') p
(LINEAR0) str
('\) ) p
(THEN) K n
(!!$PRINT*,'X4SAVE ',X4SAVE\(1,1,1\)) c n
(!!$CALL SPINOR$CONVERT\('BACK',NCHI,NDIMD,KSET\(IKPT\)%SINV\) ! CONVERT TO UPDOWN) N
(!!$PRINT*,'X4NEW ',-1.D0/\(4.D0*KBT\)*KSET\(IKPT\)%SINV\(1,1,1\)**2) N
(!!$STOP) N
(            ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,DEVRHO,KSET\(IKPT\)%SMAT,MAT\)) p n
(            ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,KSET\(IKPT\)%SMAT,MAT,DH0\)) p n
(            DH0=4.D0*KBT*DH0) N
(   DH0=0.5D0*DH0) N
(!!$CALL SPINOR_PRINTMATRIX\(6,'DH0 A',1,NCHI,NDIMD,NCHI,DH0\)) c n
(!!$CALL SPINOR$CONVERT\('BACK',NCHI,NDIMD,DEVRHO\) ! CONVERT TO UPDOWN) N
(!!$CALL DMFT_SOLVEX4\(NDIMD,NCHI,DEVRHO,LX4,NSPIN,X4,DH0\)) N
(!!$CALL SPINOR$CONVERT\('FWRD',NCHI,NDIMD,DH0\)    ! CONVERT TO TXYZ) N
(!!$CALL SPINOR_PRINTMATRIX\(6,'DH0 B',1,NCHI,NDIMD,NCHI,DH0\)) N
(          ) p
(ELSE) K n
(            ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(MIXTYPE NOT RECOGNIZED) str
('\)) p n
(            ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_CONSTRAINTS_WITHKSET) str
('\)) p n
(          ) S
(END) K
( ) p
(IF) K n
(PRINT) S
(*,') p
(MAXVAL OF DH ) str
(',) p
(MAXVAL) K
(\() p
(ABS) K
(\(DH0\)\),) p
(MAXLOC) K
(\() p
(ABS) K
(\(DH0\)\)) p n
(!) c n
(!         ======================================================================) N
(!         == ADD DH                                                           ==) N
(!         ======================================================================) N
(          KSET\(IKPT\)%H0=KSET\(IKPT\)%H0+DH0) p n
(!) c n
(!         ======================================================================) N
(!         == CHECK CONVERGENCE                                                ==) N
(!         ======================================================================) N
(          MAXDEV=) p
(MAXVAL) K
(\() p
(ABS) K
(\(DEVRHO\)\)) p n
(          ) S
(PRINT) K
(*,') p
(MAXDEV) str
(',ITER,IKPT,MAXDEV) p n
(          CONVG=MAXDEV) S
(.LT.) K
(TOL) p n
(          ) S
(IF) K
(\(CONVG\) ) p
(EXIT) K n
(        ) p
(ENDDO) K
( ) p
(! END OF LOOP OVER ITERATIONS) c n
(        ) p
(IF) K
(\() p
(.NOT.) K
(CONVG\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(LOOP NOT CONVERGED) str
('\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(IKPT) str
(',IKPT\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(ITER) str
(',ITER\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$R8VAL) l
(\(') p
(MAX. DEVIATION) str
(',MAXDEV\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$R8VAL) l
(\(') p
(TOLERANCE) str
(',TOL\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_CONSTRAINTS_WITHKSET) str
('\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(      ) p
(ENDDO) K
(   ) p
(!END OF LOOP OVER K-POINTS) c n
(!) N
(!     ==========================================================================) N
(!     == MAP ONTO HRHO                                                        ==) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\() p
(.NOT.) K
(TH0\) ) p
(THEN) K n
(        ) p
(DO) K
( IKPT=1,NKPTL) p n
(          KSET\(IKPT\)%HRHO=KSET\(IKPT\)%H0) N
(        ) S
(ENDDO) K n
(      ) p
(END) K
( ) p
(IF) K n
(PRINT) S
(*,') p
(TH0 ) str
(',TH0) p n
() N
(                              ) S
(CALL) K
( ) p
(TRACE$POP) l
(\(\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_CONSTRAINTS) L
(\() p
(TYPE) K
(\)) p n
(paw_dmft.f90) (Page 38/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (19/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (39-40) 20
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!     **************************************************************************) c n
(!     **  ADJUSTS H0\(:,:,IKPT,IPSIN\) SUCH THAT                                **) N
(!     **                                                                      **) N
(!     **  G\(K,NU\)=<PI\(K\)|PSI\(K\)> &                                            **) N
(!     **         /[I*OMEGA_NU+MU-<PSI\(K\)|PI>\(H0\(K\)-SIGMA\(NU\)\)<PI\(K\)|PSI\(K\)>] &**) N
(!     **         *<PSI\(K\)|PI\(K\)>                                              **) N
(!     **                                                                      **) N
(!     **  PRODUCES THE SAME K-DEPENDENT DENSITY MATRIX AS GRHO                **) N
(!     **                                                                      **) N
(!     **  GRHO\(K,NU\)=<PI\(K\)|PSI\(K\)>/[I*OMEGA_NU+MU-HRHO\(K\)]<PI\(K\)|PSI\(K\)>     **) N
(!     **                                                                      **) N
(!     **                                                                      **) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
(: TON,NCHI,NKPTL,NDIMD,NAT,NOMEGA &) p n
(     &                      ,OMEGA,KBT,MU,AMIX,KSET,ATOMSET) N
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(CHARACTER) K
(\(*\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: ) p
(TYPE) K
(  ) p
(! CAN BE 'HRHO','H0') c n
(      ) p
(REAL) K
(\(8\)   ,) p
(PARAMETER) K
(     :: TOL=1.D-5) p n
(      ) S
(INTEGER) K
(\(4\),) p
(PARAMETER) K
(     :: NITER=100000) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(PARAMETER) K
(     :: CI=\(0.D0,1.D0\)  ) p
(! SQRT\(-1\)) c n
(      ) p
(COMPLEX) K
(\(8\)               :: MAT\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: MAT2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: MAT3\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: G\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR1\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR3\(NCHI,NCHI,NDIMD\)) p n
(!      COMPLEX\(8\)               :: S\(NCHI,NCHI,NDIMD\)) c n
(      ) p
(COMPLEX) K
(\(8\)               :: SLAUR1\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: SLAUR2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: SLAUR3\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: DEVRHO\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: RHO\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: DH0\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(LOGICAL) K
(\(4\)               :: CONVG) p n
(      ) S
(REAL) K
(\(8\)                  :: MAXDEV) p n
(      ) S
(INTEGER) K
(\(4\)               :: IKPT,ITER,IDIMD,NU,IAT) p n
(      ) S
(INTEGER) K
(\(4\)               :: I1,I2) p n
(      ) S
(LOGICAL) K
(\(4\)               :: TH0) p n
(      ) S
(REAL) K
(\(8\)                  :: FN\(2\)) p n
(!     **************************************************************************) c n
(                              ) p
(CALL) K
( ) p
(TRACE$PUSH) l
(\(') p
(DMFT_CONSTRAINTS) str
('\)) p n
(      TH0=\() S
(TYPE.EQ.) K
(') p
(H0) str
('\) ) p n
(      ) S
(IF) K
(\() p
(.NOT.) K
(\(TH0) p
(.OR.TYPE.EQ.) K
(') p
(HRHO) str
('\)\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(ILLEGAL VALUE OF TYPE. \(MAY BE "H0" OR "HRHO"\)) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(TYPE) str
(',) p
(TYPE) K
(\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_CONSTRAINTS) str
('\)     ) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(IF) K
(\() p
(.NOT.) K
(TH0\)  ) p
(THEN) K n
(        ) p
(DO) K
( IKPT=1,NKPTL) p n
(          KSET\(IKPT\)%H0=KSET\(IKPT\)%HRHO) N
(        ) S
(ENDDO) K n
(      ) p
(END) K
( ) p
(IF) K n
(      ) p
(CALL) K
( ) p
(DMFT_REGMATSUBARA) l
(\(KBT,NOMEGA,OMEGA,2,FN\)) p n
(!       ) c n
(!     ========================================================================) N
(!     ==  DEVIATION FROM TARGET DENSITY MATRIX                              ==) N
(!     ========================================================================) N
(      ) p
(DO) K
( IKPT=1,NKPTL) p n
(!       == LAURENT EXPANSION FOR THE GREENS FUNCTION =========================) c n
(        SLAUR1=\(0.D0,0.D0\)) p n
(        SLAUR2=\(0.D0,0.D0\)) N
(paw_dmft.f90) (Page 39/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        SLAUR3=\(0.D0,0.D0\)) p n
(        ) S
(IF) K
(\(TH0\) ) p
(THEN) K n
(          ) p
(DO) K
( IAT=1,NAT) p n
(            I1=ATOMSET\(IAT\)%ICHI1) N
(            I2=ATOMSET\(IAT\)%ICHI2) N
(            SLAUR1\(I1:I2,I1:I2,:\)=ATOMSET\(IAT\)%SLOCLAUR\(:,:,:,1\)) N
(            SLAUR2\(I1:I2,I1:I2,:\)=ATOMSET\(IAT\)%SLOCLAUR\(:,:,:,2\)) N
(            SLAUR3\(I1:I2,I1:I2,:\)=ATOMSET\(IAT\)%SLOCLAUR\(:,:,:,3\)) N
(          ) S
(ENDDO) K n
(        ) p
(END) K
( ) p
(IF) K n
(        GLAUR1=KSET\(IKPT\)%SINV) p n
(!       ) c n
(!       ========================================================================) N
(!       ==  ADJUST H0 TO OBEY DENSITY MATRIX CONSTRAINT                       ==) N
(!       ========================================================================) N
(        ) p
(DO) K
( ITER=1,NITER) p n
(          MAT=-MU*KSET\(IKPT\)%SMAT) N
(          MAT=MAT+KSET\(IKPT\)%H0) N
(          ) S
(IF) K
(\(TH0\) MAT=MAT+SLAUR1\(:,:,:\)) p n
(!         == GLAUR2=SINV*MAT*SINV ==============================================) c n
(          ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT,KSET\(IKPT\)%SINV,MAT2\)) p n
(          ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,KSET\(IKPT\)%SINV,MAT2,GLAUR2\)) p n
(!) c n
(          MAT=-MU*KSET\(IKPT\)%SMAT) p n
(          MAT=MAT+KSET\(IKPT\)%H0) N
(          ) S
(IF) K
(\(TH0\) MAT=MAT+SLAUR1\(:,:,:\)) p n
(!         == MAT3=MAT*\(SINV*MAT\) ===============================================) c n
(          ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT,KSET\(IKPT\)%SINV,MAT2\)) p n
(          ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT,MAT2,MAT3\)) p n
(          ) S
(IF) K
(\(TH0\) MAT3=MAT3+SLAUR2\(:,:,:\)) p n
(!         == GLAUR3=SINV*\(MAT3*SINV\) ===========================================) c n
(          ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT3,KSET\(IKPT\)%SINV,MAT\)) p n
(          ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,KSET\(IKPT\)%SINV,MAT,GLAUR3\)) p n
(!) c n
(!         == LOOP OVER OMEGA ===================================================) N
(          RHO=\(0.D0,0.D0\)) p n
(          ) S
(DO) K
( NU=1,NOMEGA) p n
(        ) N
(!           == CONSTRUCT LATTICE GREENS FUNCTION =============================) c n
(            MAT=\(CI*OMEGA\(NU\)+MU\)*KSET\(IKPT\)%SMAT) p n
(            MAT=MAT-KSET\(IKPT\)%H0) N
(            ) S
(IF) K
(\(TH0\) ) p
(THEN) K n
(              ) p
(DO) K
( IAT=1,NAT) p n
(                I1=ATOMSET\(IAT\)%ICHI1) N
(                I2=ATOMSET\(IAT\)%ICHI2) N
(                MAT\(I1:I2,I1:I2,:\)=MAT\(I1:I2,I1:I2,:\) &) N
(     &                            -ATOMSET\(IAT\)%SLOC\(:,:,:,NU\)) N
(              ) S
(ENDDO) K n
(            ) p
(END) K
( ) p
(IF) K n
(            ) p
(CALL) K
( ) p
(SPINOR$INVERT) l
(\(NDIMD,NCHI,MAT,G\)) p n
(            RHO=RHO+KBT*G) N
(          ) S
(ENDDO) K
( ) p
(! END LOOP OVER MATSUBARA FREQUENCIES) c n
(!         == INCLUDE NEGATIVE FREQUENCIES ======================================) N
(          ) p
(DO) K
( IDIMD=1,NDIMD) p n
(            RHO\(:,:,IDIMD\)=RHO\(:,:,IDIMD\)+) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(RHO\(:,:,IDIMD\)\)\)) p n
(          ) S
(ENDDO) K n
(!         == ADD TAILS \(GLAUR3 DOES NOT CONTRIBUTE\) ============================) c n
(          RHO=RHO+FN\(1\)*GLAUR1+FN\(2\)*GLAUR2) p n
(!RHO0=0.5D0*KET\(IKPT\)%SINV) c n
(          DEVRHO=RHO-KSET\(IKPT\)%RHO) p n
(!) c n
(!         ======================================================================) N
(paw_dmft.f90) (Page 40/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (20/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (41-42) 21
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!         == ADJUST HAMILTONIAN \(LAGRANGE MULTIPLIER\)                         ==) c n
(!         ======================================================================) N
(          ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,DEVRHO,KSET\(IKPT\)%SMAT,MAT\)) p n
(          ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,KSET\(IKPT\)%SMAT,MAT,DH0\)) p n
(          DH0=4.D0*KBT*DH0) N
(          KSET\(IKPT\)%H0=KSET\(IKPT\)%H0+DH0) N
(!) c n
(!         ======================================================================) N
(!         == CHECK CONVERGENCE                                                ==) N
(!         ======================================================================) N
(IF) K
(\() p
(MOD) K
(\(ITER,100\)) p
(.EQ.) K
(0\)) p
(PRINT) K
(*,') p
(MAXVAL OF DH /DRHO ) str
(',ITER,) p
(MAXVAL) K
(\() p
(ABS) K
(\(DH0\)\),) p
(MAXVAL) K
(\() p
() K n
(ABS) S
(\(DEVRHO\)\)) p n
(          MAXDEV=) S
(MAXVAL) K
(\() p
(ABS) K
(\(DEVRHO\)\)) p n
(          CONVG=MAXDEV) S
(.LT.) K
(TOL) p n
(          ) S
(IF) K
(\(CONVG\) ) p
(EXIT) K n
(        ) p
(ENDDO) K
( ) p
(! END OF LOOP OVER ITERATIONS) c n
(!!$CALL SPINOR_PRINTMATRIX\(6,'FINAL KSET%H0 ',1,NCHI,NDIMD,NCHI,KSET\(IKPT\)%H0\)) N
(!!$CALL SPINOR_PRINTMATRIX\(6,'FINAL DEVRHO ',1,NCHI,NDIMD,NCHI,DEVRHO\)) N
(        ) p
(IF) K
(\() p
(.NOT.) K
(CONVG\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(LOOP NOT CONVERGED) str
('\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(IKPT) str
(',IKPT\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(ITER) str
(',ITER\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$R8VAL) l
(\(') p
(MAX. DEVIATION) str
(',MAXDEV\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$R8VAL) l
(\(') p
(TOLERANCE) str
(',TOL\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_CONSTRAINTS) str
('\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(      ) p
(ENDDO) K
(   ) p
(!END OF LOOP OVER K-POINTS) c n
(!) N
(!     ==========================================================================) N
(!     == MAP ONTO HRHO                                                        ==) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\() p
(.NOT.) K
(TH0\) ) p
(THEN) K n
(        ) p
(DO) K
( IKPT=1,NKPTL) p n
(          KSET\(IKPT\)%HRHO=KSET\(IKPT\)%H0) N
(        ) S
(ENDDO) K n
(      ) p
(END) K
( ) p
(IF) K n
(PRINT) S
(*,') p
(TH0 ) str
(',TH0) p n
(                              ) S
(CALL) K
( ) p
(TRACE$POP) l
(\(\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_TESTRHO) L
(\() p
(TYPE) K
(,NCHI_,NDIMD_,DHAM,DRHO\)) p n
(!     **************************************************************************) c n
(!     **  ADJUSTS H0\(:,:,IKPT,IPSIN\) SUCH THAT                                **) N
(!     **                                                                      **) N
(!     **  G\(K,NU\)=<PI\(K\)|PSI\(K\)> &                                            **) N
(!     **         /[I*OMEGA_NU+MU-<PSI\(K\)|PI>\(H0\(K\)-SIGMA\(NU\)\)<PI\(K\)|PSI\(K\)>] &**) N
(!     **         *<PSI\(K\)|PI\(K\)>                                              **) N
(!     **                                                                      **) N
(!     **  PRODUCES THE SAME K-DEPENDENT DENSITY MATRIX AS GRHO                **) N
(!     **                                                                      **) N
(!     **  GRHO\(K,NU\)=<PI\(K\)|PSI\(K\)>/[I*OMEGA_NU+MU-HRHO\(K\)]<PI\(K\)|PSI\(K\)>     **) N
(!     **                                                                      **) N
(!     **                                                                      **) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
(: TON,NCHI,NKPTL,NSPIN,NDIMD,NAT,NOMEGA &) p n
(     &                      ,OMEGA,KBT,MU,KSET,ATOMSET) N
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(CHARACTER) K
(\(*\),) p
(INTENT) K
(\() p
(IN) k
(\)  :: ) p
(TYPE) K
(  ) p
(! CAN BE 'HRHO','H0') c n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NCHI_) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NDIMD_) p n
(paw_dmft.f90) (Page 41/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: DHAM\(NCHI_,NCHI_,NDIMD_\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\)   :: DRHO\(NCHI_,NCHI_,NDIMD_\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(PARAMETER) K
(     :: CI=\(0.D0,1.D0\)  ) p
(! SQRT\(-1\)) c n
(      ) p
(COMPLEX) K
(\(8\)               :: MAT\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: MAT2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: MAT3\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: G\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR1\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR3\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: SLAUR1\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: SLAUR2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: SLAUR3\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: CSVAR) p n
(      ) S
(INTEGER) K
(\(4\)               :: IKPT,IDIMD,NU,IAT) p n
(      ) S
(INTEGER) K
(\(4\)               :: I1,I2) p n
(      ) S
(LOGICAL) K
(\(4\)               :: TH0) p n
(!     **************************************************************************) c n
(                              ) p
(CALL) K
( ) p
(TRACE$PUSH) l
(\(') p
(DMFT_TESTRHO) str
('\)) p n
(      TH0=\() S
(TYPE.EQ.) K
(') p
(H0) str
('\) ) p n
(      ) S
(IF) K
(\() p
(.NOT.) K
(\(TH0) p
(.OR.TYPE.EQ.) K
(') p
(HRHO) str
('\)\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(ILLEGAL VALUE OF TYPE. \(MAY BE "H0" OR "HRHO"\)) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(TYPE) str
(',) p
(TYPE) K
(\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_TESTRHO) str
('\)     ) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(IF) K
(\() p
(.NOT.) K
(TH0\)  ) p
(THEN) K n
(        ) p
(DO) K
( IKPT=1,NKPTL) p n
(          KSET\(IKPT\)%H0=\(0.D0,0.D0\)) N
(        ) S
(ENDDO) K n
(      ) p
(END) K
( ) p
(IF) K n
(!       ) c n
(!     ========================================================================) N
(!     ==  DEVIATION FROM TARGET DENSITY MATRIX                              ==) N
(!     ========================================================================) N
(      ) p
(DO) K
( IKPT=1,NKPTL) p n
(!       == LAURENT EXPANSION FOR THE GREENS FUNCTION =========================) c n
(        SLAUR1=\(0.D0,0.D0\)) p n
(        SLAUR2=\(0.D0,0.D0\)) N
(        SLAUR3=\(0.D0,0.D0\)) N
(        ) S
(IF) K
(\(TH0\) ) p
(THEN) K n
(          ) p
(DO) K
( IAT=1,NAT) p n
(            I1=ATOMSET\(IAT\)%ICHI1) N
(            I2=ATOMSET\(IAT\)%ICHI2) N
(            SLAUR1\(I1:I2,I1:I2,:\)=ATOMSET\(IAT\)%SLOCLAUR\(:,:,:,1\)) N
(            SLAUR2\(I1:I2,I1:I2,:\)=ATOMSET\(IAT\)%SLOCLAUR\(:,:,:,2\)) N
(            SLAUR3\(I1:I2,I1:I2,:\)=ATOMSET\(IAT\)%SLOCLAUR\(:,:,:,3\)) N
(          ) S
(ENDDO) K n
(        ) p
(END) K
( ) p
(IF) K n
(        GLAUR1=KSET\(IKPT\)%SINV) p n
(        MAT=-MU*KSET\(IKPT\)%SMAT) N
(        MAT=MAT+KSET\(IKPT\)%H0+DHAM) N
(        ) S
(IF) K
(\(TH0\) MAT=MAT+SLAUR1\(:,:,:\)) p n
(!       == GLAUR2=SINV*MAT*SINV ==============================================) c n
(        ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT,KSET\(IKPT\)%SINV,MAT2\)) p n
(        ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,KSET\(IKPT\)%SINV,MAT2,GLAUR2\)) p n
(!) c n
(        MAT=-MU*KSET\(IKPT\)%SMAT) p n
(        MAT=MAT+KSET\(IKPT\)%H0+DHAM) N
(        ) S
(IF) K
(\(TH0\) MAT=MAT+SLAUR1\(:,:,:\)) p n
(!       == MAT3=MAT*\(SINV*MAT\) ===============================================) c n
(        ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT,KSET\(IKPT\)%SINV,MAT2\)) p n
(        ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT,MAT2,MAT3\)) p n
(paw_dmft.f90) (Page 42/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (21/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (43-44) 22
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(IF) K
(\(TH0\) MAT3=MAT3+SLAUR2\(:,:,:\)) p n
(!       == GLAUR3=SINV*\(MAT3*SINV\) ===========================================) c n
(        ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT3,KSET\(IKPT\)%SINV,MAT\)) p n
(        ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,KSET\(IKPT\)%SINV,MAT,GLAUR3\)) p n
(!) c n
(        DRHO=\(0.D0,0.D0\)) p n
(        ) S
(DO) K
( NU=1,NOMEGA) p n
(!         == CONSTRUCT LATTICE GREENS FUNCTION =============================) c n
(          MAT=\(CI*OMEGA\(NU\)+MU\)*KSET\(IKPT\)%SMAT) p n
(          MAT=MAT-KSET\(IKPT\)%H0-DHAM) N
(          ) S
(IF) K
(\(TH0\) ) p
(THEN) K n
(            ) p
(DO) K
( IAT=1,NAT) p n
(              I1=ATOMSET\(IAT\)%ICHI1) N
(              I2=ATOMSET\(IAT\)%ICHI2) N
(              MAT\(I1:I2,I1:I2,:\)=MAT\(I1:I2,I1:I2,:\)-ATOMSET\(IAT\)%SLOC\(:,:,:,NU\)) N
(            ) S
(ENDDO) K n
(          ) p
(END) K
( ) p
(IF) K n
(          ) p
(CALL) K
( ) p
(SPINOR$INVERT) l
(\(NDIMD,NCHI,MAT,G\)) p n
(!         == SUBTRACT LAURENT EXPANSION TO IMPROVE OMEGA-CONVERGENCE =========) c n
(          CSVAR=1.D0/\(CI*OMEGA\(NU\)\)) p n
(          DRHO=DRHO+KBT*\(G-CSVAR*\(GLAUR1+CSVAR*\(GLAUR2+CSVAR*GLAUR3\)\)\)) N
(        ) S
(ENDDO) K
( ) p
(! END LOOP OVER MATSUBARA FREQUENCIES) c n
(!       == INCLUDE NEGATIVE FREQUENCIES ======================================) N
(!       == ALREADY INCLUDED FOR X4) N
(        ) p
(DO) K
( IDIMD=1,NDIMD) p n
(          DRHO\(:,:,IDIMD\)=DRHO\(:,:,IDIMD\) &) N
(     &                   +) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(DRHO\(:,:,IDIMD\)\)\)) p n
(        ) S
(ENDDO) K n
(!       == ADD TAILS \(GLAUR3 DOES NOT CONTRIBUTE\) ============================) c n
(        DRHO=DRHO+0.5D0*GLAUR1-0.25D0/KBT*GLAUR2) p n
(!) c n
(!       == SUBTRACT TARGET DENSITY ===========================================) N
(        DRHO=DRHO-KSET\(IKPT\)%RHO) p n
(      ) S
(ENDDO) K
(   ) p
(!END OF LOOP OVER K-POINTS) c n
(                              ) p
(CALL) K
( ) p
(TRACE$POP) l
(\(\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_SOLVEX4) L
(\(NDIMD,NCHI,DRHO,LX4,NSPIN,X4,DH\)) p n
(!     **************************************************************************) c n
(!     ** DRHO+X4*DH=0) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NDIMD) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NCHI) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: LX4) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NSPIN) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: DRHO\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(INOUT) k
(\)    :: X4\(LX4,LX4,NSPIN\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\)   :: DH\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: BVEC\(LX4\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: XVEC\(LX4\)) p n
(      ) S
(INTEGER) K
(\(4\)               :: IA,IB) p n
(      ) S
(INTEGER) K
(\(4\)               :: IDA,IDB) p n
(      ) S
(INTEGER) K
(\(4\)               :: ICHIA,ICHIB) p n
(      ) S
(INTEGER) K
(\(4\)               :: IAB) p n
(      ) S
(INTEGER) K
(\(4\)               :: IDIMAB) p n
(      ) S
(INTEGER) K
(\(4\)               :: ISPIN ) p n
(REAL) K
(\(8\) :: EIG\(LX4\)) p n
(COMPLEX) K
(\(8\) :: U\(LX4,LX4\)) p n
(!     **************************************************************************) c n
(paw_dmft.f90) (Page 43/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!) c n
(!     ==========================================================================) N
(!     == COLLINEAR CASE: SPIN INDICES ARE DECOUPLED                           ==) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\(NDIMD) p
(.LE.) K
(2\) ) p
(THEN) K n
(        ) p
(IF) K
(\(LX4) p
(.NE.) K
(NCHI**2) p
(.OR.) K
(NSPIN) p
(.NE.) K
(NDIMD\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT ARRAY DIMENSIONS) str
('\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NDIMD) str
(',NDIMD\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NSPIN) str
(',NSPIN\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NCHI) str
(',NCHI\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(LX4) str
(',LX4\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_ADDX4) str
('\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(        ) p
(DO) K
( ISPIN=1,NSPIN) p n
(          ) S
(DO) K
( IA=1,NCHI) p n
(            ) S
(DO) K
( IB=1,NCHI) p n
(              IAB=IA+NCHI*\(IB-1\)) N
(              BVEC\(IAB\)=DRHO\(IA,IB,ISPIN\)) N
(            ) S
(ENDDO) K n
(          ) p
(ENDDO) K
(              ) p n
(! =============================================) c n
(!!$DO IA=1,LX4) N
(!!$  X4\(IA,IA,ISPIN\)=X4\(IA,IA,ISPIN\)-1.D-2) N
(!!$ENDDO) N
() p n
(!         ====) c n
(PRINT) K
(*,') p
(LX4 ) str
(',LX4,ISPIN) p n
(CALL) K
( ) p
(SPINOR_PRINTMATRIX) l
(\(6,') p
(DRHO \(UPDOWN\)) str
(',1,NCHI,1,NCHI,DRHO\(:,:,ISPIN\)\)) p n
(CALL) K
( ) p
(LIB$DIAGC8) l
(\(NCHI,DRHO\(:,:,ISPIN\),EIG\(:NCHI\),U\)) p n
(PRINT) K
(*,') p
(EIGENVALUES OF DRHO ) str
(',ISPIN,EIG\(:NCHI\)) p n
(CALL) K
( ) p
(LIB$DIAGC8) l
(\(LX4,X4\(:,:,ISPIN\),EIG,U\)) p n
(PRINT) K
(*,') p
(EIGENVALUES OF X4 ) str
(',ISPIN,EIG) p n
(IF) K
(\() p
(MAXVAL) K
(\(EIG\)) p
(.GT.) K
(0.D0\) ) p
(PRINT) K
(*,') p
(WARNING!!!) str
(',) p
(MAXVAL) K
(\(EIG\)) p n
(!) c n
(!         == A*X=B -> X \(THEREFORE MINUS SIGN NEEDED\)===========================) N
(          ) p
(CALL) K
( ) p
(LIB$MATRIXSOLVEC8) l
(\(LX4,LX4,1,X4\(:,:,ISPIN\),XVEC,BVEC\)) p n
(          ) S
(DO) K
( IA=1,NCHI) p n
(            ) S
(DO) K
( IB=1,NCHI) p n
(              IAB=IA+NCHI*\(IB-1\)) N
(              DH\(IA,IB,ISPIN\)=-XVEC\(IAB\)) N
(            ) S
(ENDDO) K n
(          ) p
(ENDDO) K
(              ) p n
(        ) S
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     == NON-COLLINEAR CASE:                                                  ==) N
(!     ==========================================================================) N
(      ) p
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(        ) p
(IF) K
(\(LX4) p
(.NE.) K
(\(2*NCHI\)**2) p
(.OR.) K
(NSPIN) p
(.NE.) K
(1\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT ARRAY DIMENSIONS) str
('\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NDIMD) str
(',NDIMD\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NSPIN) str
(',NSPIN\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NCHI) str
(',NCHI\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(LX4) str
(',LX4\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_ADDX4) str
('\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(        ) p
(DO) K
( IDA=1,2) p n
(          ) S
(DO) K
( ICHIA=1,NCHI) p n
(            IA=ICHIA+NCHI*\(IDA-1\)) N
(            ) S
(DO) K
( IDB=1,2) p n
(              ) S
(DO) K
( ICHIB=1,NCHI) p n
(                IB=ICHIB+NCHI*\(IDB-1\)) N
(paw_dmft.f90) (Page 44/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (22/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (45-46) 23
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                IAB=IA+2*NCHI*\(IB-1\)) p n
(                IDIMAB=IDA+2*\(IDB-1\)) N
(                BVEC\(IAB\)=DRHO\(ICHIA,ICHIB,IDIMAB\)) N
(              ) S
(ENDDO) K n
(            ) p
(ENDDO) K
(              ) p n
(          ) S
(ENDDO) K
(              ) p n
(        ) S
(ENDDO) K
(              ) p n
(!         == A*X=B -> X \(THEREFORE MINUS SIGN NEEDED\)===========================) c n
(        ) p
(CALL) K
( ) p
(LIB$MATRIXSOLVEC8) l
(\(LX4,LX4,1,X4,XVEC,BVEC\)) p n
(        ) S
(DO) K
( IDA=1,2) p n
(          ) S
(DO) K
( ICHIA=1,NCHI) p n
(            IA=ICHIA+NCHI*\(IDA-1\)) N
(            ) S
(DO) K
( IDB=1,2) p n
(              ) S
(DO) K
( ICHIB=1,NCHI) p n
(                IB=ICHIB+NCHI*\(IDB-1\)) N
(                IAB=IA+2*NCHI*\(IB-1\)) N
(                IDIMAB=IDA+2*\(IDB-1\)) N
(                DH\(ICHIA,ICHIB,IDIMAB\)=-XVEC\(IAB\)) N
(              ) S
(ENDDO) K n
(            ) p
(ENDDO) K
(              ) p n
(          ) S
(ENDDO) K
(              ) p n
(        ) S
(ENDDO) K
(              ) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_ADDX4) L
(\(NDIMD,NCHI,G,LX4,NSPIN,X4\)) p n
(!     **************************************************************************) c n
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NDIMD) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NCHI) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: LX4) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NSPIN) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: G\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(INOUT) k
(\) :: X4\(LX4,LX4,NSPIN\)) p n
(      ) S
(INTEGER) K
(\(4\)               :: IA,IB,IC,ID) p n
(      ) S
(INTEGER) K
(\(4\)               :: IDA,IDB,IDC,IDD) p n
(      ) S
(INTEGER) K
(\(4\)               :: ICHIA,ICHIB,ICHIC,ICHID) p n
(      ) S
(INTEGER) K
(\(4\)               :: IAB,ICD) p n
(      ) S
(INTEGER) K
(\(4\)               :: IDIMAC,IDIMDB,IDIMCA,IDIMBD) p n
(      ) S
(INTEGER) K
(\(4\)               :: ISPIN ) p n
(!     **************************************************************************) c n
(!) N
(!     ==========================================================================) N
(!     == COLLINEAR CASE: SPIN INDICES ARE DECOUPLED                           ==) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\(NDIMD) p
(.LE.) K
(2\) ) p
(THEN) K n
(        ) p
(IF) K
(\(LX4) p
(.NE.) K
(NCHI**2) p
(.OR.) K
(NSPIN) p
(.NE.) K
(NDIMD\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT ARRAY DIMENSIONS) str
('\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NDIMD) str
(',NDIMD\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NSPIN) str
(',NSPIN\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NCHI) str
(',NCHI\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(LX4) str
(',LX4\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_ADDX4) str
('\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(        ) p
(DO) K
( ISPIN=1,NDIMD) p n
(          ) S
(DO) K
( IA=1,NCHI) p n
(            ) S
(DO) K
( IB=1,NCHI) p n
(              IAB=IA+NCHI*\(IB-1\)) N
(              ) S
(DO) K
( IC=1,NCHI) p n
(                ) S
(DO) K
( ID=1,NCHI) p n
(paw_dmft.f90) (Page 45/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                  ICD=IC+NCHI*\(ID-1\)) p n
(!                 == THE SECOND TERM IS FOR -I*OMEGA_\\NU =======================) c n
(!                 == G\(-I*OMEGA\)=G^\\DAGGER\(I*OMEGA\) ============================) N
(                  X4\(IAB,ICD,ISPIN\)=X4\(IAB,ICD,ISPIN\) &) p n
(     &                             +G\(IA,IC,ISPIN\)*G\(ID,IB,ISPIN\) &) N
(     &                             +) S
(CONJG) K
(\(G\(IC,IA,ISPIN\)*G\(IB,ID,ISPIN\)\)) p n
(                ) S
(ENDDO) K n
(              ) p
(ENDDO) K n
(            ) p
(ENDDO) K n
(          ) p
(ENDDO) K n
(        ) p
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     == NON-COLLINEAR CASE:                                                  ==) N
(!     ==========================================================================) N
(      ) p
(ELSE) K n
(        ) p
(IF) K
(\(LX4) p
(.NE.) K
(\(2*NCHI\)**2) p
(.OR.) K
(NSPIN) p
(.NE.) K
(1\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT ARRAY DIMENSIONS) str
('\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NDIMD) str
(',NDIMD\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NSPIN) str
(',NSPIN\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NCHI) str
(',NCHI\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(LX4) str
(',LX4\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_ADDX4) str
('\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(        IAB=0) p n
(        ) S
(DO) K
( IDA=1,2) p n
(        ) S
(DO) K
( ICHIA=1,NCHI) p n
(          ) S
(DO) K
( IDB=1,2) p n
(          ) S
(DO) K
( ICHIB=1,NCHI) p n
(            IAB=ICHIA+NCHI*\(IDA-1+2*\(ICHIB+NCHI*\(IDB-1\)\)\)) N
(            ) S
(DO) K
( IDC=1,2) p n
(            ) S
(DO) K
( ICHIC=1,NCHI) p n
(              ) S
(DO) K
( IDD=1,2) p n
(              ) S
(DO) K
( ICHID=1,NCHI) p n
(                ICD=ICHIC+NCHI*\(IDC-1+2*\(ICHID+NCHI*\(IDD-1\)\)\)) N
(!) c n
(                IDIMAC=IDA+2*\(IDC-1\)) p n
(                IDIMCA=IDC+2*\(IDA-1\)) N
(                IDIMDB=IDD+2*\(IDB-1\)) N
(                IDIMBD=IDB+2*\(IDD-1\)) N
(                X4\(IAB,ICD,1\)=X4\(IAB,ICD,1\) &) N
(     &                       +G\(ICHIA,ICHIC,IDIMAC\)*G\(ICHID,ICHIB,IDIMDB\) &) N
(     &                 +) S
(CONJG) K
(\(G\(ICHIC,ICHIA,IDIMCA\)*G\(ICHIB,ICHID,IDIMBD\)\)) p n
(              ) S
(ENDDO) K n
(              ) p
(ENDDO) K n
(            ) p
(ENDDO) K n
(            ) p
(ENDDO) K n
(          ) p
(ENDDO) K n
(          ) p
(ENDDO) K n
(        ) p
(ENDDO) K n
(        ) p
(ENDDO) K n
(      ) p
(END) K
( ) p
(IF) K
(      ) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_REGMATSUBARA) L
(\(KBT,NOMEGA,OMEGA,N,FN\)) p n
(!     **************************************************************************) c n
(!     ** CALCULATES THE DIFFERENCE OF THE INFINITE AND THE TRUNCATED          **) N
(!     ** MATSUBARA SUM OF THE LAURENT TERMS 1/\(I*OMEGA_NU\)**J                 **) N
(!     **                                                                      **) N
(!     ** THIS METHOD SUFFERS FROM THE FACT THAT THE LARGEST CONTRIBUTION      **) N
(paw_dmft.f90) (Page 46/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (23/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (47-48) 24
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!     ** COMES FROM THE POINTS NEXT TO THE ORIGIN. THUS ONE CALCULATES THE    **) c n
(!     ** TIN DIFFERENCE OF TWO VERY LARGE NUMBERS. THEREFORE, IT ONLY MAKES   **) N
(!     ** SENCE TO GO TO N=6 AT MOST. ALL OTHERS ARE PROBABLY WORSE THAN       **) N
(!     ** LEAVING THE CORRECTION OUT.                                          **) N
(!     **                                                                      **) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\)    :: KBT) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NOMEGA) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\)    :: OMEGA\(NOMEGA\)) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: N) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(OUT) k
(\)   :: FN\(N\)) p n
(!     ==  PARTIAL_X^\(J-1\):1/\(1+EXP\(X\)\)) c n
(      ) p
(REAL) K
(\(8\),) p
(PARAMETER) K
( :: ARR\(20\) &) p n
(     &   =\(/0.5D0,-0.25D0,0.D0,0.125D0,0.D0,-0.25D0,0.D0,1.0625D0,0.D0,-7.75D0 &) N
(     &     ,0.D0,86.375D0,0.D0,1365.25D0,0.D0,29049.03125D0,0.D0,800572.75D0 &) N
(     &     ,0.D0,27741322.625D0/\)) N
(      ) S
(REAL) K
(\(8\)                  :: FACTOR\(20\)) p n
(      ) S
(REAL) K
(\(8\)                  :: SVAR) p n
(      ) S
(INTEGER) K
(\(4\)               :: J,NU) p n
(!     **************************************************************************) c n
(      ) p
(IF) K
(\(N) p
(.GT.) K
(6\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(N EXCEEDS INTERNAL MAXIMUM) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_REGMATSUBARA) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(!     ==========================================================================) N
(!     == ATTACH 1/[KBT**\(J-1\) * \(J-1\)!]) N
(!     ==========================================================================) N
(!     == FACTOR=1/[\(J-1\)!]*PARTIAL^\(J-1\) [1/\(1+EXP\(X\)\)]) N
(      SVAR=1.D0) p n
(      ) S
(DO) K
( J=1,N) p n
(        FACTOR\(J\)=ARR\(J\)*SVAR            ) S
(! SVAR=1/[KBT**\(J-1\) * \(J-1\)!]) c n
(        SVAR=SVAR/\(KBT*) p
(REAL) K
(\(J,) p
(KIND) K
(=8\)\)   ) p
(! SVAR=1/[KBT**J * J!]) c n
(      ) p
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     == SUBTRACT TRUNCATED MATSUBARA SUM                                     ==) N
(!     ==========================================================================) N
(      FN\(:\)=FACTOR\(:N\)) p n
(      ) S
(DO) K
( NU=1,NOMEGA              ) p
(! FN\(J\)=SUM_NU: 1/\(I*OMEGA_NU\)**JJ) c n
(        SVAR=-1.D0/OMEGA\(NU\)**2   ) p
(! [1.D0/\(CI*OMEGA\(NU\)\)]**2) c n
(        ) p
(DO) K
( J=1,N/2                ) p
(! REAL PART FROM -OMEGA) c n
(          FN\(2*J\)=FN\(2*J\)-2.D0*KBT*SVAR**J ) p
(! ODD POWERS VANISH BECAUSE OF -OMEGA) c n
(        ) p
(ENDDO) K n
(      ) p
(ENDDO) K n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_ADDX4LAUR) L
(\(NDIMD,NCHI,KBT,NOMEGA,OMEGA,GLAUR,LX4,NSPIN,X4) p n
(\)) N
(!     **************************************************************************) c n
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NDIMD) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NCHI) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NOMEGA) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\)    :: OMEGA\(NOMEGA\)) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\)    :: KBT) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: LX4) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: NSPIN) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: GLAUR\(NCHI,NCHI,NDIMD,3\)) p n
(paw_dmft.f90) (Page 47/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(INOUT) k
(\) :: X4\(LX4,LX4,NSPIN\)) p n
(      ) S
(REAL) K
(\(8\)                  :: FN\(6\),F2,F4,F6) p n
(      ) S
(INTEGER) K
(\(4\)               :: IA,IB,IC,ID) p n
(      ) S
(INTEGER) K
(\(4\)               :: IDA,IDB,IDC,IDD) p n
(      ) S
(INTEGER) K
(\(4\)               :: ICHIA,ICHIB,ICHIC,ICHID) p n
(      ) S
(INTEGER) K
(\(4\)               :: IAB,ICD) p n
(      ) S
(INTEGER) K
(\(4\)               :: IDIMAC,IDIMDB,IDIMCA,IDIMBD) p n
(      ) S
(INTEGER) K
(\(4\)               :: ISPIN ) p n
(!     **************************************************************************) c n
(      ) p
(CALL) K
( ) p
(DMFT_REGMATSUBARA) l
(\(KBT,NOMEGA,OMEGA,6,FN\)) p n
(      F2=FN\(2\)) N
(      F4=FN\(4\)) N
(      F6=FN\(6\)) N
(!) c n
(!     ==========================================================================) N
(!     == COLLINEAR CASE: SPIN INDICES ARE DECOUPLED                           ==) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\(NDIMD) p
(.LE.) K
(2\) ) p
(THEN) K n
(        ) p
(IF) K
(\(LX4) p
(.NE.) K
(NCHI**2) p
(.OR.) K
(NSPIN) p
(.NE.) K
(NDIMD\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT ARRAY DIMENSIONS) str
('\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NDIMD) str
(',NDIMD\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NSPIN) str
(',NSPIN\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NCHI) str
(',NCHI\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(LX4) str
(',LX4\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_ADDX4) str
('\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(        ) p
(DO) K
( ISPIN=1,NDIMD) p n
(          ) S
(DO) K
( IA=1,NCHI) p n
(            ) S
(DO) K
( IB=1,NCHI) p n
(              IAB=IA+NCHI*\(IB-1\)) N
(              ) S
(DO) K
( IC=1,NCHI) p n
(                ) S
(DO) K
( ID=1,NCHI) p n
(                  ICD=IC+NCHI*\(ID-1\)) N
(!                 == THE SECOND TERM IS FOR -I*OMEGA_\\NU =======================) c n
(!                 == G\(-I*OMEGA\)=G^\\DAGGER\(I*OMEGA\) ============================) N
(                  X4\(IAB,ICD,ISPIN\)=X4\(IAB,ICD,ISPIN\) &) p n
(     &                       +F2* GLAUR\(IA,IC,ISPIN,1\)*GLAUR\(ID,IB,ISPIN,1\) &) N
(     &                       +F4*\(GLAUR\(IA,IC,ISPIN,1\)*GLAUR\(ID,IB,ISPIN,3\) &) N
(     &                           +GLAUR\(IA,IC,ISPIN,2\)*GLAUR\(ID,IB,ISPIN,2\) &) N
(     &                           +GLAUR\(IA,IC,ISPIN,3\)*GLAUR\(ID,IB,ISPIN,1\)\) &) N
(     &                       +F6* GLAUR\(IA,IC,ISPIN,3\)*GLAUR\(ID,IB,ISPIN,3\) ) N
(                ) S
(ENDDO) K n
(              ) p
(ENDDO) K n
(            ) p
(ENDDO) K n
(          ) p
(ENDDO) K n
(        ) p
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     == NON-COLLINEAR CASE:                                                  ==) N
(!     ==========================================================================) N
(      ) p
(ELSE) K n
(        ) p
(IF) K
(\(LX4) p
(.NE.) K
(\(2*NCHI\)**2) p
(.OR.) K
(NSPIN) p
(.NE.) K
(1\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT ARRAY DIMENSIONS) str
('\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NDIMD) str
(',NDIMD\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NSPIN) str
(',NSPIN\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NCHI) str
(',NCHI\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(LX4) str
(',LX4\)) p n
(          ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_ADDX4) str
('\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(        IAB=0) p n
(        ) S
(DO) K
( IDA=1,2) p n
(        ) S
(DO) K
( ICHIA=1,NCHI) p n
(paw_dmft.f90) (Page 48/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (24/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (49-50) 25
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          ) p
(DO) K
( IDB=1,2) p n
(          ) S
(DO) K
( ICHIB=1,NCHI) p n
(            IAB=ICHIA+NCHI*\(IDA-1+2*\(ICHIB+NCHI*\(IDB-1\)\)\)) N
(            ) S
(DO) K
( IDC=1,2) p n
(            ) S
(DO) K
( ICHIC=1,NCHI) p n
(              ) S
(DO) K
( IDD=1,2) p n
(              ) S
(DO) K
( ICHID=1,NCHI) p n
(                ICD=ICHIC+NCHI*\(IDC-1+2*\(ICHID+NCHI*\(IDD-1\)\)\)) N
(!) c n
(                IDIMAC=IDA+2*\(IDC-1\)) p n
(                IDIMCA=IDC+2*\(IDA-1\)) N
(                IDIMDB=IDD+2*\(IDB-1\)) N
(                IDIMBD=IDB+2*\(IDD-1\)) N
(                X4\(IAB,ICD,1\)=X4\(IAB,ICD,1\) &) N
(     &           +F2* GLAUR\(ICHIA,ICHIC,IDIMAC,1\)*GLAUR\(ICHID,ICHIB,IDIMDB,1\) &) N
(     &           +F4*\(GLAUR\(ICHIA,ICHIC,IDIMAC,1\)*GLAUR\(ICHID,ICHIB,IDIMDB,3\) &) N
(     &               +GLAUR\(ICHIA,ICHIC,IDIMAC,2\)*GLAUR\(ICHID,ICHIB,IDIMDB,2\) &) N
(     &               +GLAUR\(ICHIA,ICHIC,IDIMAC,3\)*GLAUR\(ICHID,ICHIB,IDIMDB,1\)\) &) N
(     &           +F6* GLAUR\(ICHIA,ICHIC,IDIMAC,3\)*GLAUR\(ICHID,ICHIB,IDIMDB,3\) ) N
(              ) S
(ENDDO) K n
(              ) p
(ENDDO) K n
(            ) p
(ENDDO) K n
(            ) p
(ENDDO) K n
(          ) p
(ENDDO) K n
(          ) p
(ENDDO) K n
(        ) p
(ENDDO) K n
(        ) p
(ENDDO) K n
(      ) p
(END) K
( ) p
(IF) K
(      ) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_RHO_WITHSET) L
(\(NCHI,NDIMD,NOMEGA,KBT,OMEGA,G,GLAUR,RHO\)) p n
(!     **************************************************************************) c n
(!     **  CALCULATES THE DENSITY MATRIX FROM A GREENS FUNCTION                **) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NCHI) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NOMEGA) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NDIMD) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\) :: KBT) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\) :: OMEGA\(NOMEGA\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\) :: G\(NCHI,NCHI,NDIMD,NOMEGA\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\) :: GLAUR\(NCHI,NCHI,NDIMD,3\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\):: RHO\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(PARAMETER) K
(  :: CI=\(0.D0,1.D0\)  ) p
(! SQRT\(-1\)) c n
(      ) p
(INTEGER) K
(\(4\)            :: IDIMD,NU) p n
(      ) S
(COMPLEX) K
(\(8\)            :: CSVAR) p n
(!     **************************************************************************) c n
(      RHO=\(0.D0,0.D0\)) p n
(      ) S
(DO) K
( NU=1,NOMEGA) p n
(        CSVAR=1.D0/\(CI*OMEGA\(NU\)\)) N
(        RHO=RHO+G\(:,:,:,NU\)-GLAUR\(:,:,:,1\)*CSVAR &) N
(     &                     -GLAUR\(:,:,:,2\)*CSVAR**2 &) N
(     &                     -GLAUR\(:,:,:,3\)*CSVAR**3) N
(      ) S
(ENDDO) K n
(      ) p
(DO) K
( IDIMD=1,NDIMD) p n
(        RHO\(:,:,IDIMD\)=RHO\(:,:,IDIMD\)+) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(RHO\(:,:,IDIMD\)\)\)) p n
(      ) S
(ENDDO) K n
(      RHO=RHO*KBT) p n
(      RHO=RHO+0.5D0*GLAUR\(:,:,:,1\)-0.25D0/KBT*GLAUR\(:,:,:,2\)) N
(      ) S
(RETURN) K n
(paw_dmft.f90) (Page 49/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_GLOC_WITHATOMSET) L
(\(\)) p n
(!     **************************************************************************) c n
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
(: NCHI,NKPTL,NDIMD,NAT,NOMEGA,OMEGA,MU,KSET,ATOMSET) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(COMPLEX) K
(\(8\),) p
(PARAMETER) K
(     :: CI=\(0.D0,1.D0\)  ) p
(! SQRT\(-1\)) c n
(      ) p
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(     :: TPRINT=.FALSE.) p n
(      ) S
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(     :: TTEST=.FALSE.) p n
(      ) S
(COMPLEX) K
(\(8\)               :: MAT\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: MAT2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: MAT3\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR1\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: GLAUR3\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: SLAUR1\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: SLAUR2\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: SLAUR3\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)               :: G\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(REAL) K
(\(8\)                  :: WKPTL) p n
(      ) S
(INTEGER) K
(\(4\)               :: IKPT,NU,IAT,I1,I2,I,IDIMD) p n
(!     **************************************************************************) c n
(                              ) p
(CALL) K
( ) p
(TRACE$PUSH) l
(\(') p
(DMFT_GLOC) str
('\)) p n
(      ) S
(DO) K
( IAT=1,NAT) p n
(        ATOMSET\(IAT\)%GLOC=\(0.D0,0.D0\)) N
(        ATOMSET\(IAT\)%GLOCLAUR=\(0.D0,0.D0\)) N
(      ) S
(ENDDO) K n
(!) c n
(      ) p
(DO) K
( IKPT=1,NKPTL) p n
(        WKPTL=KSET\(IKPT\)%WKPT) N
(!       == LAURENT EXPANSION FOR THE GREENS FUNCTION =========================) c n
(        SLAUR1=\(0.D0,0.D0\)) p n
(        SLAUR2=\(0.D0,0.D0\)) N
(        SLAUR3=\(0.D0,0.D0\)) N
(        ) S
(DO) K
( IAT=1,NAT) p n
(          I1=ATOMSET\(IAT\)%ICHI1) N
(          I2=ATOMSET\(IAT\)%ICHI2) N
(          SLAUR1\(I1:I2,I1:I2,:\)=ATOMSET\(IAT\)%SLOCLAUR\(:,:,:,1\)) N
(          SLAUR2\(I1:I2,I1:I2,:\)=ATOMSET\(IAT\)%SLOCLAUR\(:,:,:,2\)) N
(          SLAUR3\(I1:I2,I1:I2,:\)=ATOMSET\(IAT\)%SLOCLAUR\(:,:,:,3\)) N
(        ) S
(ENDDO) K n
(        GLAUR1=KSET\(IKPT\)%SINV) p n
(!) c n
(        MAT=-MU*KSET\(IKPT\)%SMAT) p n
(        MAT=MAT+KSET\(IKPT\)%H0) N
(        MAT=MAT+SLAUR1) N
(!       == GLAUR2=SINV*MAT*SINV ==============================================) c n
(        ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT,KSET\(IKPT\)%SINV,MAT2\)) p n
(        ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,KSET\(IKPT\)%SINV,MAT2,GLAUR2\)) p n
(!) c n
(        MAT=-MU*KSET\(IKPT\)%SMAT) p n
(        MAT=MAT+KSET\(IKPT\)%H0) N
(        MAT=MAT+SLAUR1) N
(!       == MAT3=MAT*\(SINV*MAT\) ===============================================) c n
(        ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT,KSET\(IKPT\)%SINV,MAT2\)) p n
(        ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT,MAT2,MAT3\)) p n
(        MAT3=MAT3+SLAUR2) N
(!       == GLAUR3=SINV*\(MAT3*SINV\) ===========================================) c n
(        ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,MAT3,KSET\(IKPT\)%SINV,MAT\)) p n
(        ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,KSET\(IKPT\)%SINV,MAT,GLAUR3\)) p n
(paw_dmft.f90) (Page 50/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (25/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (51-52) 26
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(IF) K
(\(KSET\(IKPT\)%TADDMINUSK\) ) p
(THEN) K n
(          ) p
(DO) K
( IDIMD=1,NDIMD) p n
(              GLAUR1\(:,:,IDIMD\)=0.5D0*\(GLAUR1\(:,:,IDIMD\) &) N
(      &                               +) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(GLAUR1\(:,:,IDIMD\)\)\)\)) p n
(              GLAUR2\(:,:,IDIMD\)=0.5D0*\(GLAUR2\(:,:,IDIMD\) &) N
(      &                               +) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(GLAUR2\(:,:,IDIMD\)\)\)\)) p n
(              GLAUR3\(:,:,IDIMD\)=0.5D0*\(GLAUR3\(:,:,IDIMD\) &) N
(      &                               +) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(GLAUR3\(:,:,IDIMD\)\)\)\)) p n
(          ) S
(ENDDO) K n
(        ) p
(END) K
( ) p
(IF) K n
(        ) p
(DO) K
( IAT=1,NAT) p n
(          I1=ATOMSET\(IAT\)%ICHI1) N
(          I2=ATOMSET\(IAT\)%ICHI2) N
(          ATOMSET\(IAT\)%GLOCLAUR\(:,:,:,1\)=ATOMSET\(IAT\)%GLOCLAUR\(:,:,:,1\) &) N
(     &                                  +WKPTL*GLAUR1\(I1:I2,I1:I2,:\)) N
(          ATOMSET\(IAT\)%GLOCLAUR\(:,:,:,2\)=ATOMSET\(IAT\)%GLOCLAUR\(:,:,:,2\) &) N
(     &                                  +WKPTL*GLAUR2\(I1:I2,I1:I2,:\)) N
(          ATOMSET\(IAT\)%GLOCLAUR\(:,:,:,3\)=ATOMSET\(IAT\)%GLOCLAUR\(:,:,:,3\) &) N
(     &                                  +WKPTL*GLAUR3\(I1:I2,I1:I2,:\)) N
(        ) S
(ENDDO) K n
(!) c n
(        ) p
(DO) K
( NU=1,NOMEGA) p n
(!         == CONSTRUCT LATTICE GREENS FUNCTION =================================) c n
(          MAT=\(CI*OMEGA\(NU\)+MU\)*KSET\(IKPT\)%SMAT) p n
(          MAT=MAT-KSET\(IKPT\)%H0) N
(          ) S
(DO) K
( IAT=1,NAT) p n
(            I1=ATOMSET\(IAT\)%ICHI1) N
(            I2=ATOMSET\(IAT\)%ICHI2) N
(            MAT\(I1:I2,I1:I2,:\)=MAT\(I1:I2,I1:I2,:\)-ATOMSET\(IAT\)%SLOC\(:,:,:,NU\)) N
(          ) S
(ENDDO) K n
(          ) p
(CALL) K
( ) p
(SPINOR$INVERT) l
(\(NDIMD,NCHI,MAT,G\)) p n
(!         == ACCOUNT FOR K-POINT \(-K\) ==========================================) c n
(          ) p
(IF) K
(\(KSET\(IKPT\)%TADDMINUSK\) ) p
(THEN) K n
(            ) p
(DO) K
( IDIMD=1,NDIMD) p n
(              MAT\(:,:,IDIMD\)=2.D0*CI*OMEGA\(NU\) &) N
(      &                          *) S
(TRANSPOSE) K
(\() p
(CONJG) K
(\(KSET\(IKPT\)%SMAT\(:,:,IDIMD\)\)\) &) p n
(      &                          -) S
(TRANSPOSE) K
(\() p
(CONJG) K
(\(MAT\(:,:,IDIMD\)\)\)) p n
(            ) S
(ENDDO) K n
(            ) p
(CALL) K
( ) p
(SPINOR$INVERT) l
(\(NDIMD,NCHI,MAT,MAT2\)) p n
(            G=0.5D0*\(G+MAT2\)) N
(          ) S
(END) K
( ) p
(IF) K n
(          ) p
(DO) K
( IAT=1,NAT) p n
(            I1=ATOMSET\(IAT\)%ICHI1) N
(            I2=ATOMSET\(IAT\)%ICHI2) N
(            ATOMSET\(IAT\)%GLOC\(:,:,:,NU\)=ATOMSET\(IAT\)%GLOC\(:,:,:,NU\) &) N
(     &                                 +WKPTL*G\(I1:I2,I1:I2,:\)) N
(          ) S
(ENDDO) K n
(!) c n
(        ) p
(ENDDO) K
( ) p
(! END OF LOOP OVER MATSUBARA FREQUENCIES) c n
(      ) p
(ENDDO) K
(   ) p
(! END OF LOOP OVER KPOINTS) c n
(!) N
(!     ==========================================================================) N
(!     == TAKE K-POINTS INTO ACCOUNT THAT HAVE BEEN LEFT OUT DUE TO            ==) N
(!     == TIME INVERSION SYMMETRY                                              ==) N
(!     ==========================================================================) N
(!     == ALL LAURENT EXPANSION COEFFICIENTS ARE HERMITIAN ======================) N
(      ) p
(DO) K
( IAT=1,NAT) p n
(        I1=ATOMSET\(IAT\)%ICHI1) N
(        I2=ATOMSET\(IAT\)%ICHI2) N
(        ) S
(DO) K
( I=1,3) p n
(          ) S
(DO) K
( IDIMD=1,NDIMD) p n
(            ATOMSET\(IAT\)%GLOCLAUR\(:,:,IDIMD,I\)=0.5D0 &) N
(paw_dmft.f90) (Page 51/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     &                   *\(ATOMSET\(IAT\)%GLOCLAUR\(:,:,IDIMD,I\) &) p n
(     &                    +) S
(CONJG) K
(\() p
(TRANSPOSE) K
(\(ATOMSET\(IAT\)%GLOCLAUR\(:,:,IDIMD,I\)\)\)\)) p n
(          ) S
(ENDDO) K n
(        ) p
(ENDDO) K n
(      ) p
(ENDDO) K n
() p n
(                              ) S
(CALL) K
( ) p
(TRACE$POP) l
(\(\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_ADDTOHPSI) L
(\(\)) p n
(!     **************************************************************************) c n
(!     **                                                                      **) N
(!     **************************************************************************) N
(      ) p
(USE) K
( ) p
(DMFT_MODULE,) l
( ) p
(ONLY) K
(  : TON,NKPTL,NSPIN,NDIM,NDIMD,NB,NCHI,NAT &) p n
(     &                        ,IPROOFCHI,ATOMSET,KSET) N
(      ) S
(USE) K
( ) p
(WAVES_MODULE,) l
( ) p
(ONLY) K
( : GSET,WAVES_SELECTWV,THIS,MAP) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(   :: TPRINT=.FALSE.) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(PARAMETER) K
(   :: CI=\(0.D0,1.D0\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: DHPIPSI\(:,:,:\) ) p
(!\(NDIM,NCHI,NB\)) c n
(      ) p
(COMPLEX) K
(\(8\),) p
(ALLOCATABLE) K
( :: MAT\(:,:,:\)     ) p
(!\(NCHI,NCHI,NDIMD\)) c n
(      ) p
(LOGICAL) K
(\(4\)             :: TCHK,TRESET) p n
(      ) S
(INTEGER) K
(\(4\)             :: NBH) p n
(      ) S
(INTEGER) K
(\(4\)             :: LMNX) p n
(      ) S
(INTEGER) K
(\(4\)             :: NFIL) p n
(      ) S
(INTEGER) K
(\(4\)             :: NPRO) p n
(      ) S
(INTEGER) K
(\(4\)             :: IKPT,ISPIN,IBH,ICHI,IPRO,IDIM1,IDIM2,IDIMD,IAT) p n
(      ) S
(INTEGER) K
(\(4\)             :: I1,I2) p n
(!     **************************************************************************) c n
(      ) p
(IF) K
(\() p
(.NOT.) K
(TON\) ) p
(RETURN) K n
(PRINT) S
(*,') p
(ENTERING DMFT_ADDTOHPSI) str
(') p n
(                              ) S
(CALL) K
( ) p
(TRACE$PUSH) l
(\(') p
(DMFT_ADDTOHPSI) str
('\)) p n
(!) c n
(!     ==========================================================================) N
(!     == CHECK IF HTBC ALREADY CONTAINS INFORMATION                           ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(LMTO$GETL4) l
(\(') p
(ON) str
(',TCHK\)) p n
(PRINT) K
(*,') p
(LMTO ON? ) str
(',TCHK) p n
(      ) S
(IF) K
(\(TCHK\) ) p
(CALL) K
( ) p
(LMTO$GETL4) l
(\(') p
(THTBC) str
(',TCHK\)) p n
(      TRESET=) S
(.NOT.) K
(TCHK) p n
(      ) S
(CALL) K
( ) p
(LMTO$SETL4) l
(\(') p
(THTBC) str
(',.TRUE.\)) p n
(PRINT) K
(*,') p
(RESET? ) str
(',TRESET) p n
(!) c n
(!     ==========================================================================) N
(!     ==  PRINT LOCAL HAMILTONIAN \(STATIC AND DOUBLE COUNTING\)                ==) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\(TPRINT\) ) p
(THEN) K n
(        NFIL=6 ) p n
(        ) S
(WRITE) K
(\(NFIL,) p
(FMT) K
(=') p
(\(82\("-"\),T10," ",A," "\)) str
('\)') p
(LOCAL HAMILTONIAN \(FOCK+DC\)) str
(' ) p n
(        ) S
(WRITE) K
(\(NFIL,) p
(FMT) K
(=') p
(\(82\("-"\),T10," ",A," "\)) str
('\)') p
(FROM DMFT_ADDTOHPSI) str
(') p n
(        ) S
(WRITE) K
(\(NFIL,*\)') p
(LOCAL HAMILTONIAN \(FOCK+DC\)) str
(' ) p n
(        ) S
(DO) K
( IAT=1,NAT) p n
(          ) S
(IF) K
(\(ATOMSET\(IAT\)%NLOC) p
(.LE.) K
(0\) ) p
(CYCLE) K
( ) p
(! NO DOUBLE COUNTING          ) c n
(          LMNX=ATOMSET\(IAT\)%DENMAT%LMNX) p n
(          ) S
(PRINT) K
(*,') p
(ATOM ) str
(',IAT,') p
( LMNX=) str
(',LMNX) p n
(          ) S
(CALL) K
( ) p
(SPINOR_PRINTMATRIX) l
(\(NFIL,') p
(DC HAMILTONIAN\(TXYZ\)) str
(',1,LMNX &) p n
(    &                            ,NDIMD,LMNX,ATOMSET\(IAT\)%DENMAT%H\)) N
(        ) S
(ENDDO) K n
(      ) p
(END) K
( ) p
(IF) K n
(!) c n
(paw_dmft.f90) (Page 52/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (26/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (53-54) 27
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!     ==========================================================================) c n
(!     ==  COLLECT CONSTANTS) N
(!     ==========================================================================) N
(      NPRO=MAP%NPRO) p n
(      ) S
(ALLOCATE) K
(\(DHPIPSI\(NDIM,NCHI,NB\)\)) p n
(      ) S
(ALLOCATE) K
(\(MAT\(NCHI,NCHI,NDIMD\)\)) p n
(!) c n
(!     ==========================================================================) N
(!     ==  CONVERT ON-SITE TERMS FROM \(TXYZ\) TO UPDOWN                         ==) N
(!     ==========================================================================) N
(      ) p
(DO) K
( IAT=1,NAT) p n
(        ) S
(IF) K
(\(ATOMSET\(IAT\)%NLOC) p
(.LE.) K
(0\) ) p
(CYCLE) K
( ) p
(! NO DOUBLE COUNTING          ) c n
(        LMNX=ATOMSET\(IAT\)%DENMAT%LMNX) p n
(!CALL SPINOR_PRINTMATRIX\(6,'ATOMSET%H',1,LMNX,NDIMD,LMNX,ATOMSET\(IAT\)%DENMAT%H\)) c n
(        ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',LMNX,NDIMD,ATOMSET\(IAT\)%DENMAT%H\)) p n
(        ATOMSET\(IAT\)%DENMAT%H=2.D0*ATOMSET\(IAT\)%DENMAT%H) N
(      ) S
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     ==                                                                      ==) N
(!     ==========================================================================) N
(      ) p
(DO) K
( IKPT=1,NKPTL) p n
(        ) S
(DO) K
( ISPIN=1,NSPIN) p n
(          ) S
(CALL) K
( ) p
(WAVES_SELECTWV) l
(\(IKPT,ISPIN\)) p n
(          ) S
(CALL) K
( ) p
(PLANEWAVE$SELECT) l
(\(GSET%ID\)      ) p n
(          ) S
(IF) K
(\(THIS%NB) p
(.NE.) K
(NB\) ) p
(THEN) K n
(            ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INCONSISTENT NUMBER OF STATES IN WAVES AND DYNOCC) str
(') p n
(\)) N
(            ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NB IN DYNOCC) str
(',NB\)) p n
(            ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NB IN WAVES ) str
(',THIS%NB\)) p n
(            ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_ADDTOHPSI) str
('\)) p n
(          ) S
(END) K
( ) p
(IF) K n
(          NBH=THIS%NBH) p n
(!) c n
(!         ======================================================================) N
(!         == ALLOCATE THIS%HTBC IF NECESSARY                                  ==) N
(!         ======================================================================) N
(          ) p
(IF) K
(\(TRESET\) ) p
(THEN) K n
(            ) p
(IF) K
(\() p
(.NOT.ASSOCIATED) K
(\(THIS%HTBC\)\)) p
(ALLOCATE) K
(\(THIS%HTBC\(NDIM,NBH,NPRO\)\)) p n
(            THIS%HTBC=\(0.D0,0.D0\)) N
(          ) S
(END) K
( ) p
(IF) K n
(!) c n
(!         ======================================================================) N
(!         == DF/DRHO=H0-HRHO; DHDPIPSI= \(H0-HRHO\)<PI|PSI>                     ==) N
(!         ======================================================================) N
(          MAT=KSET\(IKPT\)%H0\(:,:,:\)-KSET\(IKPT\)%HRHO\(:,:,:\)) p n
(          ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,MAT\)) p n
(          MAT=2.D0*MAT   ) N
(!!$DO IAT=1,NAT) c n
(!!$  IF\(ATOMSET\(IAT\)%NLOC.LE.0\) CYCLE ! NO DOUBLE COUNTING          ) N
(!!$  I1=ATOMSET\(IAT\)%ICHI1) N
(!!$  I2=ATOMSET\(IAT\)%ICHI2) N
(!!$  CALL SPINOR_PRINTMATRIX\(6,'CORR. HAMILTONIAN',1,I2-I1+1,NDIMD,I2-I1+1,MAT\(I) N
(1:I2,I1:I2,:\)\)) N
(!!$ENDDO) N
(          IDIMD=0) p n
(          ) S
(DO) K
( IDIM2=1,NDIM) p n
(            ) S
(DO) K
( IDIM1=1,NDIM) p n
(              IDIMD=IDIM1+NDIM*\(IDIM2-1\)+ISPIN-1) N
(              DHPIPSI\(IDIM1,:,:\)=) S
(MATMUL) K
(\(MAT\(:,:,IDIMD\) &) p n
(       &                                     ,KSET\(IKPT\)%PIPSI\(IDIM2,:,:,ISPIN\)\)) N
(            ) S
(ENDDO) K n
(paw_dmft.f90) (Page 53/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          ) p
(ENDDO) K n
(!) c n
(!         ======================================================================) N
(!         ==  CONVERT TO SUPER WAVE FUNCTIONS                                 ==) N
(!         ==  PIPSI\(ICHI,2*IBH-1,IKPT,ISPIN\)= REAL\(THIS%TBC\(1,IBH,IPRO\)\)      ==) N
(!         ==  PIPSI\(ICHI,2*IBH  ,IKPT,ISPIN\)=AIMAG\(THIS%TBC\(1,IBH,IPRO\)\)      ==) N
(!         ======================================================================) N
(          ) p
(IF) K
(\(NBH) p
(.NE.) K
(NB\) ) p
(THEN) K n
(            ) p
(DO) K
( IBH=1,NBH) p n
(              DHPIPSI\(:,:,IBH\)=) S
(REAL) K
(\(DHPIPSI\(:,:,2*IBH-1\)\) &) p n
(        &                 -CI*) S
(AIMAG) K
(\(DHPIPSI\(:,:,2*IBH\)\) ) p n
(            ) S
(ENDDO) K n
(          ) p
(END) K
( ) p
(IF) K n
(!) c n
(!         ======================================================================) N
(!         ==  DETERMINE CONTRIBUTION TO PROJECTOR PART OF H|PSI>              ==) N
(!         ==  EXPAND TO ALL PROJECTOR FUNCTIONS                               ==) N
(!         ======================================================================) N
(          ) p
(DO) K
( ICHI=1,NCHI) p n
(            IPRO=IPROOFCHI\(ICHI\)) N
(!           == PIPSI\(ICHI,IBH,IKPT,ISPIN\)  =THIS%TBC\(1,IBH,IPRO\) ===============) c n
(            THIS%HTBC\(:,:,IPRO\)=THIS%HTBC\(:,:,IPRO\)+DHPIPSI\(:,ICHI,:NBH\)) p n
(          ) S
(ENDDO) K n
(!) c n
(!         ======================================================================) N
(!         ==  NOW THE SITE-LOCAL TERM FROM THE DOUBLE COUNTING                ==) N
(!         ======================================================================) N
(          IPRO=0) p n
(          ) S
(DO) K
( IAT=1,NAT) p n
(            LMNX=ATOMSET\(IAT\)%DENMAT%LMNX) N
(            I1=IPRO+1) N
(            I2=IPRO+LMNX) N
(            IPRO=IPRO+LMNX) N
(            ) S
(IF) K
(\(ATOMSET\(IAT\)%NLOC) p
(.LE.) K
(0\) ) p
(CYCLE) K
( ) p
(! NO DOUBLE COUNTING          ) c n
(!) N
(            ) p
(DO) K
( IDIM2=1,NDIM) p n
(              ) S
(DO) K
( IDIM1=1,NDIM) p n
(                IDIMD=IDIM1+NDIM*\(IDIM2-1\)+ISPIN-1) N
(!               == HTBC=HAM*TBC ================================================) c n
(!               == HTBC\(IB,I\)=HTBC\(IB,I\)+HAM\(I,J\)*TBC\(IB,J\) ====================) N
(                THIS%HTBC\(IDIM1,:,I1:I2\)=THIS%HTBC\(IDIM1,:,I1:I2\) &) p n
(         &                +) S
(MATMUL) K
(\(THIS%TBC\(IDIM1,:,I1:I2\) &) p n
(         &                       ,) S
(TRANSPOSE) K
(\(ATOMSET\(IAT\)%DENMAT%H\(:,:,IDIMD\)\)\)) p n
(              ) S
(ENDDO) K n
(            ) p
(ENDDO) K n
(          ) p
(ENDDO) K n
(        ) p
(ENDDO) K
( ) p
(! END OF LOOP OVER NSPIN) c n
(      ) p
(ENDDO) K
( ) p
(! END OF LOOP OVER K-POINTS) c n
(                              ) p
(CALL) K
( ) p
(TRACE$POP) l
(\(\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ..........................................................................) N
(      ) p
(SUBROUTINE) K
( ) p
(DMFT_PRECONDITION) L
(\(M,C,NOMEGA,OMEGA,MOMEGA\)) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\) :: M) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\) :: C) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NOMEGA) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(IN) k
(\) :: OMEGA\(NOMEGA\)) p n
(      ) S
(REAL) K
(\(8\)   ,) p
(INTENT) K
(\() p
(OUT) k
(\):: MOMEGA\(NOMEGA\)) p n
(      ) S
(INTEGER) K
(\(4\)            :: NU) p n
(      ) S
(REAL) K
(\(8\)               :: PI,PIHALF) p n
(paw_dmft.f90) (Page 54/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (27/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (55-56) 28
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(REAL) K
(\(8\)               :: FACTOR1,FACTOR2) p n
(!     **************************************************************************) c n
(      PI=4.D0*) p
(ATAN) K
(\(1.D0\)) p n
(      PIHALF=0.5D0*PI) N
(      FACTOR1=M/PIHALF**2) N
(      FACTOR2=PIHALF*) S
(SQRT) K
(\(C/M\)) p n
(      ) S
(DO) K
( NU=1,NOMEGA) p n
(        MOMEGA\(NU\)=FACTOR1*) S
(ATAN) K
(\(FACTOR2/OMEGA\(NU\)\)**2) p n
(      ) S
(ENDDO) K n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(TESTBESSEL) L
(\(\)) p n
(      ) S
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\)           :: L=2) p n
(      ) S
(INTEGER) K
(\(4\),) p
(PARAMETER) K
( :: NKAPPA=5) p n
(      ) S
(INTEGER) K
(\(4\)           :: I) p n
(      ) S
(REAL) K
(\(8\)              :: RAD) p n
(      ) S
(REAL) K
(\(8\)              :: K2\(NKAPPA\)=\(/-0.2D0,-0.1D0,0.D0,1.D0,2.D0/\)) p n
(      ) S
(REAL) K
(\(8\)              :: JVAL\(NKAPPA\),JDER\(NKAPPA\)) p n
(      ) S
(REAL) K
(\(8\)              :: KVAL\(NKAPPA\),KDER\(NKAPPA\)) p n
(      ) S
(INTEGER) K
(\(4\)           :: NFIL1=12,NFIL2=14,IKAPPA) p n
(      ) S
(OPEN) K
(\(NFIL1,FILE=') p
(JVAL.DAT) str
('\)) p n
(      ) S
(OPEN) K
(\(NFIL2,FILE=') p
(KVAL.DAT) str
('\)) p n
(      ) S
(DO) K
( I=1,1000) p n
(        RAD=1.D-2*) S
(REAL) K
(\(I\)) p n
(        ) S
(DO) K
( IKAPPA=1,NKAPPA) p n
(          ) S
(CALL) K
( ) p
(LMTO$SOLIDBESSELRAD) l
(\(L,RAD,K2\(IKAPPA\),JVAL\(IKAPPA\),JDER\(IKAPPA\)\)) p n
(          ) S
(CALL) K
( ) p
(LMTO$SOLIDHANKELRAD) l
(\(L,RAD,K2\(IKAPPA\),KVAL\(IKAPPA\),KDER\(IKAPPA\)\)) p n
(        ) S
(ENDDO) K n
(        ) p
(WRITE) K
(\(NFIL1,*\)RAD,JVAL,JDER) p n
(        ) S
(WRITE) K
(\(NFIL2,*\)RAD,KVAL,KDER) p n
(      ) S
(ENDDO) K n
(      ) p
(CLOSE) K
(\(NFIL1\)) p n
(      ) S
(CLOSE) K
(\(NFIL2\)) p n
(PRINT) K
(*,') p
(.... BESSELTEST DONE) str
(') p n
(STOP) K
( ') p
(FORCED AFTER BESSELTEST) str
(') p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(SPINOR$TEST) L
(\(\)) p n
(!     **************************************************************************) c n
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(PARAMETER) K
( :: NCHI=3) p n
(      ) S
(INTEGER) K
(\(4\),) p
(PARAMETER) K
( :: NDIMD=4) p n
(      ) S
(COMPLEX) K
(\(8\)           :: A\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)           :: B\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)           :: C\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)           :: D\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)           :: MAT1\(2*NCHI,2*NCHI\)) p n
(      ) S
(COMPLEX) K
(\(8\)           :: MAT2\(2*NCHI,2*NCHI\)) p n
(      ) S
(INTEGER) K
(\(4\),) p
(PARAMETER) K
( :: NFIL=6) p n
(      ) S
(REAL) K
(\(8\)              :: RAN1,RAN2) p n
(      ) S
(INTEGER) K
(\(4\)           :: IDIMD,I,J) p n
(      ) S
(REAL) K
(\(8\)  ,) p
(PARAMETER) K
(  :: TOL=1.D-7) p n
(      ) S
(REAL) K
(\(8\)              :: DEV) p n
(!     **************************************************************************) c n
(                                             ) p
(CALL) K
( ) p
(TRACE$PUSH) l
(\(') p
(SPINOR$TEST) str
('\)) p n
(PRINT) K
(*,') p
( STARTING SPINOR TEST) str
(') p n
(paw_dmft.f90) (Page 55/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(DO) K
( IDIMD=1,NDIMD) p n
(        ) S
(DO) K
( I=1,NCHI) p n
(          ) S
(DO) K
( J=1,NCHI) p n
(            ) S
(CALL) K
( ) p
(RANDOM_NUMBER) l
(\(RAN1\)) p n
(            ) S
(CALL) K
( ) p
(RANDOM_NUMBER) l
(\(RAN2\)) p n
(            A\(I,J,IDIMD\)=) S
(CMPLX) K
(\(RAN1,RAN2\)) p n
(          ) S
(ENDDO) K n
(        ) p
(ENDDO) K n
(      ) p
(ENDDO) K n
(      ) p
(DO) K
( IDIMD=1,NDIMD) p n
(        ) S
(DO) K
( I=1,NCHI) p n
(          ) S
(DO) K
( J=1,NCHI) p n
(            ) S
(CALL) K
( ) p
(RANDOM_NUMBER) l
(\(RAN1\)) p n
(            ) S
(CALL) K
( ) p
(RANDOM_NUMBER) l
(\(RAN2\)) p n
(            B\(I,J,IDIMD\)=) S
(CMPLX) K
(\(RAN1,RAN2\)) p n
(          ) S
(ENDDO) K n
(        ) p
(ENDDO) K n
(      ) p
(ENDDO) K n
(!) c n
(!     ==========================================================================) N
(!     ==  TEST FORWARD AND BACK TRANSFORMATION                                ==) N
(!     ==========================================================================) N
(      C=A) p n
(      ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,A\)) p n
(      ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,A\)) p n
(      DEV=) S
(MAXVAL) K
(\() p
(ABS) K
(\(C-A\)\)) p n
(      ) S
(IF) K
(\(DEV) p
(.GT.) K
(TOL\) ) p
(THEN) K
( ) p n
(        ) S
(CALL) K
( ) p
(SPINOR$PRINTMATRIX) l
(\(NFIL,') p
(CONVERSION TEST \(ZERO\)) str
(',') p
(DIRECT) str
(',1,NCHI &) p n
(     &                       ,NDIMD,NCHI,C-A\)) N
(        ) S
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(CONVERSION TEST FAILED) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(SPINOR$TEST) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(!     ==========================================================================) N
(!     ==  TEST MULTIPLICATION                                                 ==) N
(!     ==========================================================================) N
(      C=A) p n
(      D=B) N
(      ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,C\)) p n
(      ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,D\)) p n
(      MAT1=\(0.D0,0.D0\)) N
(      MAT2=\(0.D0,0.D0\)) N
(      ) S
(IF) K
(\(NDIMD) p
(.EQ.) K
(1\) ) p
(THEN) K n
(        MAT1\(:NCHI  ,:NCHI\)  =C\(:,:,1\)) p n
(        MAT1\(NCHI+1:,NCHI+1:\)=C\(:,:,1\)) N
(        MAT2\(:NCHI  ,:NCHI\)  =D\(:,:,1\)) N
(        MAT2\(NCHI+1:,NCHI+1:\)=D\(:,:,1\)) N
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(2\) ) p
(THEN) K n
(        MAT1\(:NCHI  ,:NCHI\)  =C\(:,:,1\)) p n
(        MAT1\(NCHI+1:,NCHI+1:\)=C\(:,:,2\)) N
(        MAT2\(:NCHI  ,:NCHI\)  =D\(:,:,1\)) N
(        MAT2\(NCHI+1:,NCHI+1:\)=D\(:,:,2\)) N
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(        MAT1\(:NCHI  ,:NCHI\)  =C\(:,:,1\)) p n
(        MAT1\(NCHI+1:,:NCHI\)  =C\(:,:,2\)) N
(        MAT1\(:NCHI  ,NCHI+1:\)=C\(:,:,3\)) N
(        MAT1\(NCHI+1:,NCHI+1:\)=C\(:,:,4\)) N
(        MAT2\(:NCHI  ,:NCHI\)  =D\(:,:,1\)) N
(        MAT2\(NCHI+1:,:NCHI\)  =D\(:,:,2\)) N
(        MAT2\(:NCHI  ,NCHI+1:\)=D\(:,:,3\)) N
(        MAT2\(NCHI+1:,NCHI+1:\)=D\(:,:,4\)) N
(      ) S
(END) K
( ) p
(IF) K n
(paw_dmft.f90) (Page 56/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (28/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (57-58) 29
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      MAT1=) p
(MATMUL) K
(\(MAT1,MAT2\)) p n
(      ) S
(IF) K
(\(NDIMD) p
(.EQ.) K
(1\) ) p
(THEN) K n
(        C\(:,:,1\)=MAT1\(:NCHI  ,:NCHI\) ) p n
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(2\) ) p
(THEN) K n
(        C\(:,:,1\)=MAT1\(:NCHI  ,:NCHI\)) p n
(        C\(:,:,2\)=MAT1\(NCHI+1:,NCHI+1:\)) N
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(        C\(:,:,1\)=MAT1\(:NCHI  ,:NCHI\)) p n
(        C\(:,:,2\)=MAT1\(NCHI+1:,:NCHI\)) N
(        C\(:,:,3\)=MAT1\(:NCHI  ,NCHI+1:\)) N
(        C\(:,:,4\)=MAT1\(NCHI+1:,NCHI+1:\)) N
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,C\)) p n
(!) c n
(      ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,A,B,D\)) p n
(      DEV=) S
(MAXVAL) K
(\() p
(ABS) K
(\(D-C\)\)) p n
(      ) S
(IF) K
(\(DEV) p
(.GT.) K
(TOL\) ) p
(THEN) K
( ) p n
(        ) S
(CALL) K
( ) p
(SPINOR$PRINTMATRIX) l
(\(NFIL,') p
(MATMUL TEST \(ZERO\)) str
(',') p
(DIRECT) str
(',1,NCHI &) p n
(     &                       ,NDIMD,NCHI,C-D\)) N
(        ) S
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(MULTIPLICATION  TEST FAILED) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(SPINOR$TEST) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(!     ==========================================================================) N
(!     ==  TEST INVERSION AND MULTIPLICATION                                   ==) N
(!     ==========================================================================) N
(PRINT) K
(*,') p
( BEFORE SPINOR$INVERT) str
(') p n
(      ) S
(CALL) K
( ) p
(SPINOR$INVERT) l
(\(NDIMD,NCHI,A,B\)) p n
(!) c n
(PRINT) K
(*,') p
( BEFORE SPINOR$MATMUL) str
(') p n
(      ) S
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,A,B,C\)) p n
(!) c n
(PRINT) K
(*,') p
( BEFORE SPINOR$PRINTL) str
(') p n
(!      CALL SPINOR$PRINTMATRIX\(NFIL,'IDENTITY TEST','TXYZ',1,NCHI,NDIMD,NCHI,C\)) c n
(      ) p
(CALL) K
( ) p
(SPINOR$PRINTMATRIX) l
(\(NFIL,') p
(IDENTITY TEST) str
(',') p
(UPDOWN) str
(',1,NCHI,NDIMD,NCHI,) p n
(C\)) N
(                                             ) S
(CALL) K
( ) p
(TRACE$POP) l
(\(\)) p n
(      ) S
(STOP) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(SPINOR$BLOWUP) L
(\(NDIMD,NCHI,A,B\)) p n
(!     **************************************************************************) c n
(!     ** CONVERT A MATRIX FROM THE 0XYZ REPRESENTATION INTO THE               **) N
(!     ** \(UU,UD/DU,DD\) REPRESENTATION                                         **) N
(!     **************************************PETER BLOECHL GOSLAR 2013***********) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NCHI) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NDIMD) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\) :: A\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\):: B\(2*NCHI,2*NCHI\)) p n
(      ) S
(COMPLEX) K
(\(8\)            :: A1\(NCHI,NCHI,NDIMD\)) p n
(!     **************************************************************************) c n
(      A1=A) p n
(      ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,A1\)) p n
(      B=\(0.D0,0.D0\)) N
(      ) S
(IF) K
(\(NDIMD) p
(.EQ.) K
(1\) ) p
(THEN) K n
(        B\(  :NCHI,  :NCHI\)=A1\(:,:,1\)) p n
(        B\(NCHI+1:,NCHI+1:\)=A1\(:,:,1\)) N
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(2\) ) p
(THEN) K n
(        B\(  :NCHI,  :NCHI\)=A1\(:,:,1\)) p n
(        B\(NCHI+1:,NCHI+1:\)=A1\(:,:,2\)) N
(paw_dmft.f90) (Page 57/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(        B\(  :NCHI,  :NCHI\)=A1\(:,:,1\)) p n
(        B\(NCHI+1:,  :NCHI\)=A1\(:,:,2\)) N
(        B\(  :NCHI,NCHI+1:\)=A1\(:,:,3\)) N
(        B\(NCHI+1:,NCHI+1:\)=A1\(:,:,4\)) N
(      ) S
(ELSE) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(ILLEGAL VALUE FOR NDIMD. \(MUST BE 1,2 OR 4\)) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NDIMD) str
(',NDIMD\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(SPINOR$BLOWUP) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(SPINOR$SHRINKDOWN) L
(\(NDIMD,NCHI,B,A\)) p n
(!     **************************************************************************) c n
(!     ** CONVERT MATRIX B FROM THE \(UU,UD/DU,DD\) REPRESENTATION               **) N
(!     ** INTO MATRIX A IN 0XYZ REPRESENTATION                                 **) N
(!     **************************************PETER BLOECHL GOSLAR 2013***********) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NCHI) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NDIMD) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\) :: B\(2*NCHI,2*NCHI\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\):: A\(NCHI,NCHI,NDIMD\)) p n
(!     **************************************************************************) c n
(      ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(1\) ) p
(THEN) K n
(        A\(:,:,1\)=0.5D0*\(B\(  :NCHI,  :NCHI\)+B\(NCHI+1:,NCHI+1:\)\)) p n
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(2\) ) p
(THEN) K n
(        A\(:,:,1\)=B\(  :NCHI,  :NCHI\)) p n
(        A\(:,:,2\)=B\(NCHI+1:,NCHI+1:\)) N
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(        A\(:,:,1\)=B\(  :NCHI,  :NCHI\)) p n
(        A\(:,:,2\)=B\(NCHI+1:,  :NCHI\)) N
(        A\(:,:,3\)=B\(  :NCHI,NCHI+1:\)) N
(        A\(:,:,4\)=B\(NCHI+1:,NCHI+1:\)) N
(      ) S
(ELSE) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(ILLEGAL VALUE FOR NDIMD. \(MUST BE 1,2 OR 4\)) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NDIMD) str
(',NDIMD\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(SPINOR$BLOWUP) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,A\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(        ) p n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(SPINOR$MATMUL) L
(\(NDIMD,NCHI,A,B,C\)) p n
(!     **************************************************************************) c n
(!     **  C=A*B                                                               **) N
(!     **                                                                      **) N
(!     **  DERIVATION IN METHODS: SECTION "WORKING WITH SPIN ORBITALS",        **) N
(!     **  SUBSECTION "INVERSION OF A MATRIX IN SPINOR REPRESENTATION          **) N
(!     **************************************PETER BLOECHL GOSLAR 2013***********) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NCHI) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NDIMD) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\) :: A\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\) :: B\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\) :: C\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(PARAMETER) K
(   :: CI=\(0.D0,1.D0\)) p n
(      ) S
(INTEGER) K
(\(4\)             :: IDIMD,I,IP,IPP) p n
(!     **************************************************************************) c n
(paw_dmft.f90) (Page 58/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (29/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (59-60) 30
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      C\(:,:,:\)=0.D0) p n
(      C\(:,:,1\)=) S
(MATMUL) K
(\(A\(:,:,1\),B\(:,:,1\)\)) p n
(      ) S
(DO) K
( IDIMD=2,NDIMD) p n
(        C\(:,:,1\)=C\(:,:,1\)+) S
(MATMUL) K
(\(A\(:,:,IDIMD\),B\(:,:,IDIMD\)\)) p n
(        C\(:,:,IDIMD\)=C\(:,:,IDIMD\)+) S
(MATMUL) K
(\(A\(:,:,1\),B\(:,:,IDIMD\)\) &) p n
(     &                           +) S
(MATMUL) K
(\(A\(:,:,IDIMD\),B\(:,:,1\)\) ) p n
(      ) S
(ENDDO) K n
(!) c n
(!     == THIS TERM IS ONLY PRESENT IN THE NON-COLLINEAR CASE ===================) N
(      ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(        ) p
(DO) K
( I=1,3) p n
(!         == \(X,Y,Z\)->\(2,3,4\)) c n
(          IP=2+) p
(MOD) K
(\(I,3\)) p n
(          IPP=2+) S
(MOD) K
(\(I+1,3\)) p n
(          C\(:,:,1+I\)=C\(:,:,1+I\)+CI*\() S
(MATMUL) K
(\(A\(:,:,IP\),B\(:,:,IPP\)\) &) p n
(     &                             -) S
(MATMUL) K
(\(A\(:,:,IPP\),B\(:,:,IP\)\)\)) p n
(        ) S
(ENDDO) K n
(      ) p
(END) K
( ) p
(IF) K n
(!) c n
(!     == FINALLY APPLY FACTOR 1/2 ==============================================) N
(      C\(:,:,:\)=0.5D0*C\(:,:,:\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
() p n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(SPINOR$INVERT) L
(\(NDIMD,NCHI,A,AINV\)) p n
(!     **************************************************************************) c n
(!     ** INVERTS A MATRIX GIVE IN SPINOR REPRESENTATION                       **) N
(!     **    A\(S1,S2\)=0.5 SUM_{J=0}^3 A\(J\) SIGMAJ\(S1,S2\)                       **) N
(!     ** WHERE SIGMAJ IS THE 2X2 UNIT MATRIX FOR J=0 AND                      **) N
(!     **                 THE PAULI MATRIX FOR J>0                             **) N
(!     **                                                                      **) N
(!     **  RATIONALE FOR THE APPARENTLY COMPLICATED TREATMENT:                 **) N
(!     **  BECAUSE THIS INVERSION IS DONE FREQUENTY, I TRY TO KEEP ARRAYS IN   **) N
(!     **  IN THE STACK. FURTHERMORE, I TRY TO MAINTAIN AN ANALOGOUS TREATMENT **) N
(!     **  OF NON-COLLINEAR, COLLINEAR SPIN-POLARIZED AND NON-COLLINEAR CASES. **) N
(!     **                                                                      **) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NCHI) p n
(      ) S
(INTEGER) K
(\(4\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NDIMD) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(IN) k
(\) :: A\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(INTENT) K
(\() p
(OUT) k
(\):: AINV\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\),) p
(PARAMETER) K
(  :: CI=\(0.D0,1.D0\)) p n
(      ) S
(LOGICAL) K
(\(4\),) p
(PARAMETER) K
(  :: TTEST=.FALSE.) p n
(      ) S
(COMPLEX) K
(\(8\)            :: MAT\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(REAL) K
(\(8\)               :: SVAR) p n
(      ) S
(INTEGER) K
(\(4\)            :: IDIMD,I) p n
(!     **************************************************************************) c n
(      ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(1\) ) p
(THEN) K n
(         ) p
(CALL) K
( ) p
(LIB$INVERTC8) l
(\(NCHI,A\(:,:,1\),AINV\(:,:,1\)\)) p n
(         AINV\(:,:,1\)=4.D0*AINV\(:,:,1\)) N
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(2\) ) p
(THEN) K n
(         AINV\(:,:,1\)=0.5D0*\(A\(:,:,1\)+A\(:,:,2\)\)) p n
(         AINV\(:,:,2\)=0.5D0*\(A\(:,:,1\)-A\(:,:,2\)\)) N
(         ) S
(CALL) K
( ) p
(LIB$INVERTC8) l
(\(NCHI,AINV\(:,:,1\),MAT\(:,:,1\)\)) p n
(         ) S
(CALL) K
( ) p
(LIB$INVERTC8) l
(\(NCHI,AINV\(:,:,2\),MAT\(:,:,2\)\)) p n
(         AINV\(:,:,1\)=MAT\(:,:,1\)+MAT\(:,:,2\)) N
(         AINV\(:,:,2\)=MAT\(:,:,1\)-MAT\(:,:,2\)) N
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(!        =======================================================================) c n
(paw_dmft.f90) (Page 59/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!        == NON-COLLINEAR CASE                                                ==) c n
(!        == 4 INVERSIONS + 6 MULTIPLICATIONS + ORDER N**2                     ==) N
(!        =======================================================================) N
(!        == A\(T,X,Y,Z\)-> AINV\(11,21,12,22\) =====================================) N
(         MAT=A) p n
(         ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,MAT\)) p n
(!) c n
(!        == INVERSION IN UP-DOWN REPRESENTATION ================================) N
(         ) p
(CALL) K
( ) p
(LIB$INVERTC8) l
(\(NCHI,MAT\(:,:,1\),AINV\(:,:,1\)\)   ) p
(! 1/A11) c n
(         ) p
(CALL) K
( ) p
(LIB$INVERTC8) l
(\(NCHI,MAT\(:,:,4\),AINV\(:,:,4\)\)   ) p
(! 1/A22) c n
(         AINV\(:,:,3\)=-) p
(MATMUL) K
(\(AINV\(:,:,1\),MAT\(:,:,3\)\)      ) p
(! -\(1/A11\)*A12) c n
(         AINV\(:,:,2\)=-) p
(MATMUL) K
(\(AINV\(:,:,4\),MAT\(:,:,2\)\)      ) p
(! -\(1/A22\)*A21) c n
(                                                          ) p
(!A22-A21*\(1/A11\)*A12) c n
(         MAT\(:,:,4\)=MAT\(:,:,4\)+) p
(MATMUL) K
(\(MAT\(:,:,2\),AINV\(:,:,3\)\)) p n
(                                                          ) S
(! A11-A12*\(1/A22\)*A21) c n
(         MAT\(:,:,1\)=MAT\(:,:,1\)+) p
(MATMUL) K
(\(MAT\(:,:,3\),AINV\(:,:,2\)\)) p n
(                                                  ) S
(! B11=1/[A22-A21*\(1/A11\)*A12]) c n
(         ) p
(CALL) K
( ) p
(LIB$INVERTC8) l
(\(NCHI,MAT\(:,:,4\),AINV\(:,:,4\)\)) p n
(                                                  ) S
(!B22=1/[A11-A12*\(1/A22\)*A21]) c n
(         ) p
(CALL) K
( ) p
(LIB$INVERTC8) l
(\(NCHI,MAT\(:,:,1\),AINV\(:,:,1\)\) ) p n
(         AINV\(:,:,3\)=) S
(MATMUL) K
(\(AINV\(:,:,3\),AINV\(:,:,4\)\)    ) p
(! B12) c n
(         AINV\(:,:,2\)=) p
(MATMUL) K
(\(AINV\(:,:,2\),AINV\(:,:,1\)\) ) p
(! B21) c n
(!) N
(!        == MAT\(11,21,12,22\) -> AINV\(T,X,Y,Z\) ==================================) N
(         ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,AINV\)) p n
(         ) S
(IF) K
(\(TTEST\) ) p
(THEN) K n
(           ) p
(CALL) K
( ) p
(SPINOR$MATMUL) l
(\(NDIMD,NCHI,A,AINV,MAT\)) p n
(           ) S
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,MAT\)) p n
(           ) S
(DO) K
( IDIMD=1,NDIMD,NDIMD-1 ) p
(! \(1\), \(1,2\), \(1,4\)) c n
(             ) p
(DO) K
( I=1,NCHI) p n
(               MAT\(I,I,IDIMD\)=MAT\(I,I,IDIMD\)-) S
(CMPLX) K
(\(1.D0,0.D0\)) p n
(             ) S
(ENDDO) K n
(           ) p
(ENDDO) K n
(           ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(FWRD) str
(',NCHI,NDIMD,MAT\)) p n
(           SVAR=) S
(MAXVAL) K
(\() p
(ABS) K
(\(MAT\)\)) p n
(           ) S
(IF) K
(\(SVAR) p
(.GT.) K
(1.D-6\) ) p
(THEN) K n
(             ) p
(CALL) K
( ) p
(SPINOR_PRINTMATRIX) l
(\(6,') p
(INVERSION TEST \(0\)) str
(',1,NCHI &) p n
(        &                           ,NDIMD,NCHI,MAT\)) N
(             ) S
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(INVERSION TEST FAILED) str
('\) ) p n
(             ) S
(CALL) K
( ) p
(ERROR$R8VAL) l
(\(') p
(MAX DEV) str
(',SVAR\)) p n
(             ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_INVERTSPINORMATRIX) str
('\)) p n
(           ) S
(END) K
( ) p
(IF) K n
(         ) p
(END) K
( ) p
(IF) K n
(      ) p
(ELSE) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(ILLEGAL VALUE FOR ARGUMENT NDIMD) str
('\) ) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NDIMD) str
(',NDIMD\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_INVERTSPINORMATRIX) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(SPINOR$CONVERT) L
(\(ID,NCHI,NDIMD,A\)) p n
(!     **************************************************************************) c n
(!     **  TRANSFORMATION OF A MATRIX FROM THE UP/DOWN-SPIN REPRESENTATION     **) N
(!     **  \(UU,DU,UD,DD\) TO THE \(TOTAL,X,Y,Z\) REPRESENTATION AND BACK.         **) N
(!     **                                                                      **) N
(!     **  CAUTION! THE UP-DOWN REPRESENTATION USES THE INDEX ORDER OF FORTRAN **) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(CHARACTER) K
(\(*\),) p
(INTENT) K
(\() p
(IN) k
(\)    :: ID) p n
(      ) S
(INTEGER) K
(\(4\)  ,) p
(INTENT) K
(\() p
(IN) k
(\)    :: NCHI) p n
(paw_dmft.f90) (Page 60/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (30/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (61-62) 31
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(INTEGER) K
(\(4\)  ,) p
(INTENT) K
(\() p
(IN) k
(\)    :: NDIMD) p n
(      ) S
(COMPLEX) K
(\(8\)  ,) p
(INTENT) K
(\() p
(INOUT) k
(\) :: A\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)  ,) p
(PARAMETER) K
(     :: CI=\(0.D0,1.D0\)) p n
(      ) S
(COMPLEX) K
(\(8\)                 :: B\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(LOGICAL) K
(\(4\)                 :: TOUPDN) p n
(!     **************************************************************************) c n
(      TOUPDN=ID) p
(.EQ.) K
(') p
(BACK) str
(') p n
(      ) S
(IF) K
(\() p
(.NOT.) K
(\(TOUPDN) p
(.OR.) K
(ID) p
(.EQ.) K
(') p
(FWRD) str
('\)\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(ID NOT RECOGNIZED. MUST BE EITHER "FWRD" OR "BACK") str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(ID) str
(',ID\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(DMFT_TXYZTOUPDOWN) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(      ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(1\) ) p
(THEN) K n
(        ) p
(IF) K
(\(TOUPDN\) ) p
(THEN) K n
(          A\(:,:,1\)=0.5D0*A\(:,:,1\)) p n
(        ) S
(ELSE) K n
(          A\(:,:,1\)=2.D0*A\(:,:,1\)) p n
(        ) S
(END) K
( ) p
(IF) K n
(      ) p
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(2\) ) p
(THEN) K n
(        ) p
(IF) K
(\(TOUPDN\) ) p
(THEN) K n
(          B\(:,:,1\)=0.5D0*\(A\(:,:,1\)+A\(:,:,2\)\)) p n
(          B\(:,:,2\)=0.5D0*\(A\(:,:,1\)-A\(:,:,2\)\)) N
(        ) S
(ELSE) K n
(          B\(:,:,1\)=A\(:,:,1\)+A\(:,:,2\)) p n
(          B\(:,:,2\)=A\(:,:,1\)-A\(:,:,2\)) N
(        ) S
(END) K
( ) p
(IF) K n
(        A=B) p n
(      ) S
(ELSE) K
( ) p
(IF) K
(\(NDIMD) p
(.EQ.) K
(4\) ) p
(THEN) K n
(        ) p
(IF) K
(\(TOUPDN\) ) p
(THEN) K
( ) p
(! A\(T,X,Y,Z\)-> B\(UU,UD,DU,DD\)) c n
(          B\(:,:,1\)=0.5D0*\(A\(:,:,1\)+A\(:,:,4\)\)) p n
(          B\(:,:,2\)=0.5D0*\(A\(:,:,2\)+CI*A\(:,:,3\)\)) N
(          B\(:,:,3\)=0.5D0*\(A\(:,:,2\)-CI*A\(:,:,3\)\)) N
(          B\(:,:,4\)=0.5D0*\(A\(:,:,1\)-A\(:,:,4\)\)) N
(        ) S
(ELSE) K
( ) p
(! A\(UU,UD,DU,DD\)-> B\(T,X,Y,Z\)) c n
(          B\(:,:,1\)=A\(:,:,1\)+A\(:,:,4\)) p n
(          B\(:,:,2\)=A\(:,:,2\)+A\(:,:,3\)) N
(          B\(:,:,3\)=-CI*\(A\(:,:,2\)-A\(:,:,3\)\)) N
(          B\(:,:,4\)=A\(:,:,1\)-A\(:,:,4\)) N
(        ) S
(END) K
( ) p
(IF) K n
(        A=B) p n
(      ) S
(ELSE) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(ILLEGAL VALUE FOR ARGUMENT NDIMD) str
('\) ) p n
(        ) S
(CALL) K
( ) p
(ERROR$I4VAL) l
(\(') p
(NDIMD) str
(',NDIMD\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(SPINOR_CONVERT) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K
(   ) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(SPINOR$PRINTMATRIX) L
(\(NFIL,NAME,) p
(TYPE) K
(,I1,I2,NDIMD,NCHI,A\)) p n
(!     **************************************************************************) c n
(!     ** PRINT A SPINOR MATRIX FOR THE SECTION \(I1:I2\)X\(I1:I2\) IN THE         **) N
(!     ** REPRESENTATION SPECIFIED BY THE VARIABLE TYPE.                       **) N
(!     ** TYPE MAY BE 'UPDOWN', 'TXYZ' OR 'DIRECT') N
(!     ** ) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\)  ,) p
(INTENT) K
(\() p
(IN) k
(\) :: NFIL) p n
(      ) S
(CHARACTER) K
(\(*\),) p
(INTENT) K
(\() p
(IN) k
(\) :: ) p
(TYPE) K
(  ) p
(! MAY BE) c n
(      ) p
(INTEGER) K
(\(4\)  ,) p
(INTENT) K
(\() p
(IN) k
(\) :: I1,I2) p n
(      ) S
(CHARACTER) K
(\(*\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NAME) p n
(paw_dmft.f90) (Page 61/63) (Feb 11, 14 19:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(INTEGER) K
(\(4\)  ,) p
(INTENT) K
(\() p
(IN) k
(\) :: NDIMD) p n
(      ) S
(INTEGER) K
(\(4\)  ,) p
(INTENT) K
(\() p
(IN) k
(\) :: NCHI) p n
(      ) S
(COMPLEX) K
(\(8\)  ,) p
(INTENT) K
(\() p
(IN) k
(\) :: A\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(COMPLEX) K
(\(8\)  ,) p
(PARAMETER) K
(  :: CI=\(0.D0,1.D0\)) p n
(      ) S
(COMPLEX) K
(\(8\)              :: B\(NCHI,NCHI,NDIMD\)) p n
(!     **************************************************************************) c n
(      ) p
(IF) K
(\(I2) p
(.LT.) K
(I1\) ) p
(RETURN) K n
(!) c n
(!     ==========================================================================) N
(!     == ARGUMENT CHECKS                                                      ==) N
(!     ==========================================================================) N
(      ) p
(IF) K
(\(I1) p
(.LT.) K
(1) p
(.OR.) K
(I1) p
(.GT.) K
(NCHI\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(LOWER BOUND I1 OUT OF RANGE) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(I1) str
(',I1\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(I2) str
(',I2\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(NCHI) str
(',NCHI\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(NAME) str
(',NAME\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(SPINOR$PRINTMATRIX) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(      ) p
(IF) K
(\(I2) p
(.LT.) K
(1) p
(.OR.) K
(I2) p
(.GT.) K
(NCHI\) ) p
(THEN) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(UPPER BOUND I2 OUT OF RANGE) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(I1) str
(',I1\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(I2) str
(',I2\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(NCHI) str
(',NCHI\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(NAME) str
(',NAME\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(SPINOR$PRINTMATRIX) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(!     ==========================================================================) N
(!     == CONVERT MATRIX IF REQUIRED                                           ==) N
(!     ==========================================================================) N
(      B=A) p n
(      ) S
(IF) K
(\() p
(TYPE.EQ.) K
(') p
(UPDOWN) str
('\) ) p
(THEN) K n
(!       == TRANSFORM FROM \(T,X,Y,Z\) TO \(11,12,21,22\) ===========================) c n
(        ) p
(CALL) K
( ) p
(SPINOR$CONVERT) l
(\(') p
(BACK) str
(',NCHI,NDIMD,B\)) p n
(      ) S
(ELSE) K
( ) p
(IF) K
(\() p
(TYPE.EQ.) K
(') p
(TXYZ) str
(') p
(.OR.TYPE.EQ.) K
(') p
(DIRECT) str
('\) ) p
(THEN) K n
(      ) p
(ELSE) K n
(        ) p
(CALL) K
( ) p
(ERROR$MSG) l
(\(') p
(TYPE ID NOT RECOGNIZED) str
('\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(TYPE) str
(',) p
(TYPE) K
(\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$CHVAL) l
(\(') p
(NAME) str
(',NAME\)) p n
(        ) S
(CALL) K
( ) p
(ERROR$STOP) l
(\(') p
(SPINOR$PRINTMATRIX) str
('\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(!) c n
(!     ==========================================================================) N
(!     == PRINT MATRIX                                                         ==) N
(!     ==========================================================================) N
(      ) p
(CALL) K
( ) p
(SPINOR_PRINTMATRIX) l
(\(NFIL,NAME,I1,I2,NDIMD,NCHI,B\)) p n
(      ) S
(RETURN) K n
(      ) p
(END) K n
(!) c n
(!     ...1.........2.........3.........4.........5.........6.........7.........8) N
(      ) p
(SUBROUTINE) K
( ) p
(SPINOR_PRINTMATRIX) L
(\(NFIL,NAME,I1,I2,NDIMD,NCHI,A\)) p n
(!     **************************************************************************) c n
(!     ** PRINT THE SUBBLOCK I1:I2 X I1:I2 FROM THE MATRIX IN SPINOR           **) N
(!     ** REPRESENTATION                                                       **) N
(!     **                                                                      **) N
(!     **************************************************************************) N
(      ) p
(IMPLICIT) K
( ) p
(NONE) K n
(      ) p
(INTEGER) K
(\(4\)  ,) p
(INTENT) K
(\() p
(IN) k
(\) :: NFIL) p n
(      ) S
(CHARACTER) K
(\(*\),) p
(INTENT) K
(\() p
(IN) k
(\) :: NAME) p n
(      ) S
(INTEGER) K
(\(4\)  ,) p
(INTENT) K
(\() p
(IN) k
(\) :: NDIMD) p n
(      ) S
(INTEGER) K
(\(4\)  ,) p
(INTENT) K
(\() p
(IN) k
(\) :: NCHI) p n
(paw_dmft.f90) (Page 62/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (31/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (63) 32
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(INTEGER) K
(\(4\)  ,) p
(INTENT) K
(\() p
(IN) k
(\) :: I1,I2) p n
(      ) S
(COMPLEX) K
(\(8\)  ,) p
(INTENT) K
(\() p
(IN) k
(\) :: A\(NCHI,NCHI,NDIMD\)) p n
(      ) S
(INTEGER) K
(\(4\)              :: I,IDIMD) p n
(!     **************************************************************************) c n
(      ) p
(WRITE) K
(\(NFIL,) p
(FMT) K
(=') p
(\(82\("="\),T10," ",A," "\)) str
('\)NAME) p n
(      ) S
(DO) K
( IDIMD=1,NDIMD) p n
(        ) S
(DO) K
( I=I1,I2) p n
(          ) S
(WRITE) K
(\(NFIL,) p
(FMT) K
(=') p
(\("IDIMD=",I1,":",100\("\(",2F10.5,"\)"\)\)) str
('\) &) p n
(    &                    IDIMD,A\(I,I1:I2,IDIMD\)) N
(        ) S
(ENDDO) K n
(      ) p
(ENDDO) K n
(      ) p
(RETURN) K n
(      ) p
(END) K n
(paw_dmft.f90) (Page 63/63) (Feb 11, 14 19:20) title
border
grestore
(Printed by Peter Bloechl) rhead
(src/paw_dmft.f90) (32/32) (Thursday February 13, 2014) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
